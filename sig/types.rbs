module TD
  module Types
    LOOKUP_TABLE: untyped

    # sord omit - no YARD type given for "object", using untyped
    # sord omit - no YARD return type given, using untyped
    # Recursively wraps a hash into typed classes
    def wrap: (untyped object) -> untyped

    # sord omit - no YARD type given for "object", using untyped
    # sord omit - no YARD return type given, using untyped
    # Recursively wraps a hash into typed classes
    def self.wrap: (untyped object) -> untyped

    # sord omit - no YARD type given for "str", using untyped
    # sord omit - no YARD return type given, using untyped
    # Simple implementation for internal use only.
    def camelize: (untyped str) -> untyped

    # sord omit - no YARD type given for "str", using untyped
    # sord omit - no YARD return type given, using untyped
    # Simple implementation for internal use only.
    def self.camelize: (untyped str) -> untyped

    # An object of this type is returned on a successful function call for certain functions.
    class Ok < TD::Types::Base
    end

    class Base < Dry::Struct
      # sord omit - no YARD return type given, using untyped
      def to_hash: () -> untyped

      # sord omit - no YARD type given for "*args", using untyped
      # sord omit - no YARD return type given, using untyped
      def to_json: (*untyped args) -> untyped
    end

    # Describes a call.
    # 
    # @attr id [Integer] Call identifier, not persistent.
    # @attr user_id [Integer] Peer user identifier.
    # @attr is_outgoing [Boolean] True, if the call is outgoing.
    # @attr is_video [Boolean] True, if the call is a video call.
    # @attr state [TD::Types::CallState] Call state.
    class Call < TD::Types::Base
      # Call identifier, not persistent.
      attr_accessor id: Integer

      # Peer user identifier.
      attr_accessor user_id: Integer

      # True, if the call is outgoing.
      attr_accessor is_outgoing: bool

      # True, if the call is a video call.
      attr_accessor is_video: bool

      # Call state.
      attr_accessor state: TD::Types::CallState
    end

    # A chat.
    # (Can be a private chat, basic group, supergroup, or secret chat).
    # 
    # @attr id [Integer] Chat unique identifier.
    # @attr type [TD::Types::ChatType] Type of the chat.
    # @attr title [TD::Types::String] Chat title.
    # @attr photo [TD::Types::ChatPhotoInfo, nil] Chat photo; may be null.
    # @attr permissions [TD::Types::ChatPermissions] Actions that non-administrator chat members are allowed to take in
    #   the chat.
    # @attr last_message [TD::Types::Message, nil] Last message in the chat; may be null.
    # @attr positions [Array<TD::Types::ChatPosition>] Positions of the chat in chat lists.
    # @attr message_sender_id [TD::Types::MessageSender, nil] Identifier of a user or chat that is selected to send
    #   messages in the chat; may be null if the user can't change message sender.
    # @attr has_protected_content [Boolean] True, if chat content can't be saved locally, forwarded, or copied.
    # @attr is_marked_as_unread [Boolean] True, if the chat is marked as unread.
    # @attr is_blocked [Boolean] True, if the chat is blocked by the current user and private messages from the chat
    #   can't be received.
    # @attr has_scheduled_messages [Boolean] True, if the chat has scheduled messages.
    # @attr can_be_deleted_only_for_self [Boolean] True, if the chat messages can be deleted only for the current user
    #   while other users will continue to see the messages.
    # @attr can_be_deleted_for_all_users [Boolean] True, if the chat messages can be deleted for all users.
    # @attr can_be_reported [Boolean] True, if the chat can be reported to Telegram moderators through reportChat or
    #   reportChatPhoto.
    # @attr default_disable_notification [Boolean] Default value of the disable_notification parameter, used when a
    #   message is sent to the chat.
    # @attr unread_count [Integer] Number of unread messages in the chat.
    # @attr last_read_inbox_message_id [Integer] Identifier of the last read incoming message.
    # @attr last_read_outbox_message_id [Integer] Identifier of the last read outgoing message.
    # @attr unread_mention_count [Integer] Number of unread messages with a mention/reply in the chat.
    # @attr unread_reaction_count [Integer] Number of messages with unread reactions in the chat.
    # @attr notification_settings [TD::Types::ChatNotificationSettings] Notification settings for the chat.
    # @attr available_reactions [Array<TD::Types::String>] List of reactions, available in the chat.
    # @attr message_ttl [Integer] Current message Time To Live setting (self-destruct timer) for the chat; 0 if not
    #   defined.
    #   TTL is counted from the time message or its content is viewed in secret chats and from the send date in other
    #   chats.
    # @attr theme_name [TD::Types::String] If non-empty, name of a theme, set for the chat.
    # @attr action_bar [TD::Types::ChatActionBar, nil] Information about actions which must be possible to do through the
    #   chat action bar; may be null.
    # @attr video_chat [TD::Types::VideoChat] Information about video chat of the chat.
    # @attr pending_join_requests [TD::Types::ChatJoinRequestsInfo, nil] Information about pending join requests; may be
    #   null.
    # @attr reply_markup_message_id [Integer] Identifier of the message from which reply markup needs to be used; 0 if
    #   there is no default custom reply markup in the chat.
    # @attr draft_message [TD::Types::DraftMessage, nil] A draft of a message in the chat; may be null.
    # @attr client_data [TD::Types::String] Application-specific data associated with the chat.
    #   (For example, the chat scroll position or local chat notification settings can be stored here.) Persistent if the
    #   message database is used.
    class Chat < TD::Types::Base
      # Chat unique identifier.
      attr_accessor id: Integer

      # Type of the chat.
      attr_accessor type: TD::Types::ChatType

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Chat title.
      attr_accessor title: TD::Types::String

      # Chat photo; may be null.
      attr_accessor photo: TD::Types::ChatPhotoInfo?

      # Actions that non-administrator chat members are allowed to take in
      # the chat.
      attr_accessor permissions: TD::Types::ChatPermissions

      # Last message in the chat; may be null.
      attr_accessor last_message: TD::Types::Message?

      # Positions of the chat in chat lists.
      attr_accessor positions: ::Array[TD::Types::ChatPosition]

      # Identifier of a user or chat that is selected to send
      # messages in the chat; may be null if the user can't change message sender.
      attr_accessor message_sender_id: TD::Types::MessageSender?

      # True, if chat content can't be saved locally, forwarded, or copied.
      attr_accessor has_protected_content: bool

      # True, if the chat is marked as unread.
      attr_accessor is_marked_as_unread: bool

      # True, if the chat is blocked by the current user and private messages from the chat
      # can't be received.
      attr_accessor is_blocked: bool

      # True, if the chat has scheduled messages.
      attr_accessor has_scheduled_messages: bool

      # True, if the chat messages can be deleted only for the current user
      # while other users will continue to see the messages.
      attr_accessor can_be_deleted_only_for_self: bool

      # True, if the chat messages can be deleted for all users.
      attr_accessor can_be_deleted_for_all_users: bool

      # True, if the chat can be reported to Telegram moderators through reportChat or
      # reportChatPhoto.
      attr_accessor can_be_reported: bool

      # Default value of the disable_notification parameter, used when a
      # message is sent to the chat.
      attr_accessor default_disable_notification: bool

      # Number of unread messages in the chat.
      attr_accessor unread_count: Integer

      # Identifier of the last read incoming message.
      attr_accessor last_read_inbox_message_id: Integer

      # Identifier of the last read outgoing message.
      attr_accessor last_read_outbox_message_id: Integer

      # Number of unread messages with a mention/reply in the chat.
      attr_accessor unread_mention_count: Integer

      # Number of messages with unread reactions in the chat.
      attr_accessor unread_reaction_count: Integer

      # Notification settings for the chat.
      attr_accessor notification_settings: TD::Types::ChatNotificationSettings

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # List of reactions, available in the chat.
      attr_accessor available_reactions: ::Array[TD::Types::String]

      # Current message Time To Live setting (self-destruct timer) for the chat; 0 if not
      # defined.
      # TTL is counted from the time message or its content is viewed in secret chats and from the send date in other
      # chats.
      attr_accessor message_ttl: Integer

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # If non-empty, name of a theme, set for the chat.
      attr_accessor theme_name: TD::Types::String

      # Information about actions which must be possible to do through the
      # chat action bar; may be null.
      attr_accessor action_bar: TD::Types::ChatActionBar?

      # Information about video chat of the chat.
      attr_accessor video_chat: TD::Types::VideoChat

      # Information about pending join requests; may be
      # null.
      attr_accessor pending_join_requests: TD::Types::ChatJoinRequestsInfo?

      # Identifier of the message from which reply markup needs to be used; 0 if
      # there is no default custom reply markup in the chat.
      attr_accessor reply_markup_message_id: Integer

      # A draft of a message in the chat; may be null.
      attr_accessor draft_message: TD::Types::DraftMessage?

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Application-specific data associated with the chat.
      # (For example, the chat scroll position or local chat notification settings can be stored here.) Persistent if the
      # message database is used.
      attr_accessor client_data: TD::Types::String
    end

    # Represents a date according to the Gregorian calendar.
    # 
    # @attr day [Integer] Day of the month; 1-31.
    # @attr month [Integer] Month; 1-12.
    # @attr year [Integer] Year; 1-9999.
    class Date < TD::Types::Base
      # Day of the month; 1-31.
      attr_accessor day: Integer

      # Month; 1-12.
      attr_accessor month: Integer

      # Year; 1-9999.
      attr_accessor year: Integer
    end

    # Represents a file.
    # 
    # @attr id [Integer] Unique file identifier.
    # @attr size [Integer] File size, in bytes; 0 if unknown.
    # @attr expected_size [Integer] Approximate file size in bytes in case the exact file size is unknown.
    #   Can be used to show download/upload progress.
    # @attr local [TD::Types::LocalFile] Information about the local copy of the file.
    # @attr remote [TD::Types::RemoteFile] Information about the remote copy of the file.
    class File < TD::Types::Base
      # Unique file identifier.
      attr_accessor id: Integer

      # File size, in bytes; 0 if unknown.
      attr_accessor size: Integer

      # Approximate file size in bytes in case the exact file size is unknown.
      # Can be used to show download/upload progress.
      attr_accessor expected_size: Integer

      # Information about the local copy of the file.
      attr_accessor local: TD::Types::LocalFile

      # Information about the remote copy of the file.
      attr_accessor remote: TD::Types::RemoteFile
    end

    # Describes a game.
    # 
    # @attr id [Integer] Game ID.
    # @attr short_name [TD::Types::String] Game short name.
    #   To share a game use the URL https://t.me/{bot_username}?game={game_short_name}.
    # @attr title [TD::Types::String] Game title.
    # @attr text [TD::Types::FormattedText] Game text, usually containing scoreboards for a game.
    # @attr description [TD::Types::String] Game description.
    # @attr photo [TD::Types::Photo] Game photo.
    # @attr animation [TD::Types::Animation, nil] Game animation; may be null.
    class Game < TD::Types::Base
      # Game ID.
      attr_accessor id: Integer

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Game short name.
      # To share a game use the URL https://t.me/{bot_username}?game={game_short_name}.
      attr_accessor short_name: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Game title.
      attr_accessor title: TD::Types::String

      # Game text, usually containing scoreboards for a game.
      attr_accessor text: TD::Types::FormattedText

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Game description.
      attr_accessor description: TD::Types::String

      # Game photo.
      attr_accessor photo: TD::Types::Photo

      # Game animation; may be null.
      attr_accessor animation: TD::Types::Animation?
    end

    # Describes a poll.
    # 
    # @attr id [Integer] Unique poll identifier.
    # @attr question [TD::Types::String] Poll question; 1-300 characters.
    # @attr options [Array<TD::Types::PollOption>] List of poll answer options.
    # @attr total_voter_count [Integer] Total number of voters, participating in the poll.
    # @attr recent_voter_user_ids [Array<Integer>] User identifiers of recent voters, if the poll is non-anonymous.
    # @attr is_anonymous [Boolean] True, if the poll is anonymous.
    # @attr type [TD::Types::PollType] Type of the poll.
    # @attr open_period [Integer] Amount of time the poll will be active after creation, in seconds.
    # @attr close_date [Integer] Point in time (Unix timestamp) when the poll will automatically be closed.
    # @attr is_closed [Boolean] True, if the poll is closed.
    class Poll < TD::Types::Base
      # Unique poll identifier.
      attr_accessor id: Integer

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Poll question; 1-300 characters.
      attr_accessor question: TD::Types::String

      # List of poll answer options.
      attr_accessor options: ::Array[TD::Types::PollOption]

      # Total number of voters, participating in the poll.
      attr_accessor total_voter_count: Integer

      # User identifiers of recent voters, if the poll is non-anonymous.
      attr_accessor recent_voter_user_ids: ::Array[Integer]

      # True, if the poll is anonymous.
      attr_accessor is_anonymous: bool

      # Type of the poll.
      attr_accessor type: TD::Types::PollType

      # Amount of time the poll will be active after creation, in seconds.
      attr_accessor open_period: Integer

      # Point in time (Unix timestamp) when the poll will automatically be closed.
      attr_accessor close_date: Integer

      # True, if the poll is closed.
      attr_accessor is_closed: bool
    end

    # Contains some text.
    # 
    # @attr text [TD::Types::String] Text.
    class Text < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Text.
      attr_accessor text: TD::Types::String
    end

    # Represents a user.
    # 
    # @attr id [Integer] User identifier.
    # @attr first_name [TD::Types::String] First name of the user.
    # @attr last_name [TD::Types::String] Last name of the user.
    # @attr username [TD::Types::String] Username of the user.
    # @attr phone_number [TD::Types::String] Phone number of the user.
    # @attr status [TD::Types::UserStatus] Current online status of the user.
    # @attr profile_photo [TD::Types::ProfilePhoto, nil] Profile photo of the user; may be null.
    # @attr is_contact [Boolean] The user is a contact of the current user.
    # @attr is_mutual_contact [Boolean] The user is a contact of the current user and the current user is a contact of
    #   the user.
    # @attr is_verified [Boolean] True, if the user is verified.
    # @attr is_support [Boolean] True, if the user is Telegram support account.
    # @attr restriction_reason [TD::Types::String] If non-empty, it contains a human-readable description of the reason
    #   why access to this user must be restricted.
    # @attr is_scam [Boolean] True, if many users reported this user as a scam.
    # @attr is_fake [Boolean] True, if many users reported this user as a fake account.
    # @attr have_access [Boolean] If false, the user is inaccessible, and the only information known about the user is
    #   inside this class.
    #   It can't be passed to any method except GetUser.
    # @attr type [TD::Types::UserType] Type of the user.
    # @attr language_code [TD::Types::String] IETF language tag of the user's language; only available to bots.
    class User < TD::Types::Base
      # User identifier.
      attr_accessor id: Integer

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # First name of the user.
      attr_accessor first_name: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Last name of the user.
      attr_accessor last_name: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Username of the user.
      attr_accessor username: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Phone number of the user.
      attr_accessor phone_number: TD::Types::String

      # Current online status of the user.
      attr_accessor status: TD::Types::UserStatus

      # Profile photo of the user; may be null.
      attr_accessor profile_photo: TD::Types::ProfilePhoto?

      # The user is a contact of the current user.
      attr_accessor is_contact: bool

      # The user is a contact of the current user and the current user is a contact of
      # the user.
      attr_accessor is_mutual_contact: bool

      # True, if the user is verified.
      attr_accessor is_verified: bool

      # True, if the user is Telegram support account.
      attr_accessor is_support: bool

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # If non-empty, it contains a human-readable description of the reason
      # why access to this user must be restricted.
      attr_accessor restriction_reason: TD::Types::String

      # True, if many users reported this user as a scam.
      attr_accessor is_scam: bool

      # True, if many users reported this user as a fake account.
      attr_accessor is_fake: bool

      # If false, the user is inaccessible, and the only information known about the user is
      # inside this class.
      # It can't be passed to any method except GetUser.
      attr_accessor have_access: bool

      # Type of the user.
      attr_accessor type: TD::Types::UserType

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # IETF language tag of the user's language; only available to bots.
      attr_accessor language_code: TD::Types::String
    end

    # Describes an audio file.
    # Audio is usually in MP3 or M4A format.
    # 
    # @attr duration [Integer] Duration of the audio, in seconds; as defined by the sender.
    # @attr title [TD::Types::String] Title of the audio; as defined by the sender.
    # @attr performer [TD::Types::String] Performer of the audio; as defined by the sender.
    # @attr file_name [TD::Types::String] Original name of the file; as defined by the sender.
    # @attr mime_type [TD::Types::String] The MIME type of the file; as defined by the sender.
    # @attr album_cover_minithumbnail [TD::Types::Minithumbnail, nil] The minithumbnail of the album cover; may be null.
    # @attr album_cover_thumbnail [TD::Types::Thumbnail, nil] The thumbnail of the album cover in JPEG format; as defined
    #   by the sender.
    #   The full size thumbnail is supposed to be extracted from the downloaded file; may be null.
    # @attr audio [TD::Types::File] File containing the audio.
    class Audio < TD::Types::Base
      # Duration of the audio, in seconds; as defined by the sender.
      attr_accessor duration: Integer

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Title of the audio; as defined by the sender.
      attr_accessor title: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Performer of the audio; as defined by the sender.
      attr_accessor performer: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Original name of the file; as defined by the sender.
      attr_accessor file_name: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # The MIME type of the file; as defined by the sender.
      attr_accessor mime_type: TD::Types::String

      # The minithumbnail of the album cover; may be null.
      attr_accessor album_cover_minithumbnail: TD::Types::Minithumbnail?

      # The thumbnail of the album cover in JPEG format; as defined
      # by the sender.
      # The full size thumbnail is supposed to be extracted from the downloaded file; may be null.
      attr_accessor album_cover_thumbnail: TD::Types::Thumbnail?

      # File containing the audio.
      attr_accessor audio: TD::Types::File
    end

    # Represents a list of chats.
    # 
    # @attr total_count [Integer] Approximate total count of chats found.
    # @attr chat_ids [Array<Integer>] List of chat identifiers.
    class Chats < TD::Types::Base
      # Approximate total count of chats found.
      attr_accessor total_count: Integer

      # List of chat identifiers.
      attr_accessor chat_ids: ::Array[Integer]
    end

    # Contains a counter.
    # 
    # @attr count [Integer] Count.
    class Count < TD::Types::Base
      # Count.
      attr_accessor count: Integer
    end

    # An object of this type can be returned on every function call, in case of an error.
    # 
    # @attr code [Integer] Error code; subject to future changes.
    #   If the error code is 406, the error message must not be processed in any way and must not be displayed to the
    #   user.
    # @attr message [TD::Types::String] Error message; subject to future changes.
    class Error < TD::Types::Base
      # Error code; subject to future changes.
      # If the error code is 406, the error message must not be processed in any way and must not be displayed to the
      # user.
      attr_accessor code: Integer

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Error message; subject to future changes.
      attr_accessor message: TD::Types::String
    end

    # Describes a photo.
    # 
    # @attr has_stickers [Boolean] True, if stickers were added to the photo.
    #   The list of corresponding sticker sets can be received using getAttachedStickerSets.
    # @attr minithumbnail [TD::Types::Minithumbnail, nil] Photo minithumbnail; may be null.
    # @attr sizes [Array<TD::Types::PhotoSize>] Available variants of the photo, in different sizes.
    class Photo < TD::Types::Base
      # True, if stickers were added to the photo.
      # The list of corresponding sticker sets can be received using getAttachedStickerSets.
      attr_accessor has_stickers: bool

      # Photo minithumbnail; may be null.
      attr_accessor minithumbnail: TD::Types::Minithumbnail?

      # Available variants of the photo, in different sizes.
      attr_accessor sizes: ::Array[TD::Types::PhotoSize]
    end

    # A point on a Cartesian plane.
    # 
    # @attr x [Float] The point's first coordinate.
    # @attr y [Float] The point's second coordinate.
    class Point < TD::Types::Base
      # The point's first coordinate.
      attr_accessor x: Float

      # The point's second coordinate.
      attr_accessor y: Float
    end

    # Contains information about a proxy server.
    # 
    # @attr id [Integer] Unique identifier of the proxy.
    # @attr server [TD::Types::String] Proxy server IP address.
    # @attr port [Integer] Proxy server port.
    # @attr last_used_date [Integer] Point in time (Unix timestamp) when the proxy was last used; 0 if never.
    # @attr is_enabled [Boolean] True, if the proxy is enabled now.
    # @attr type [TD::Types::ProxyType] Type of the proxy.
    class Proxy < TD::Types::Base
      # Unique identifier of the proxy.
      attr_accessor id: Integer

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Proxy server IP address.
      attr_accessor server: TD::Types::String

      # Proxy server port.
      attr_accessor port: Integer

      # Point in time (Unix timestamp) when the proxy was last used; 0 if never.
      attr_accessor last_used_date: Integer

      # True, if the proxy is enabled now.
      attr_accessor is_enabled: bool

      # Type of the proxy.
      attr_accessor type: TD::Types::ProxyType
    end

    # Represents a list of users.
    # 
    # @attr total_count [Integer] Approximate total count of users found.
    # @attr user_ids [Array<Integer>] A list of user identifiers.
    class Users < TD::Types::Base
      # Approximate total count of users found.
      attr_accessor total_count: Integer

      # A list of user identifiers.
      attr_accessor user_ids: ::Array[Integer]
    end

    # Describes a venue.
    # 
    # @attr location [TD::Types::Location] Venue location; as defined by the sender.
    # @attr title [TD::Types::String] Venue name; as defined by the sender.
    # @attr address [TD::Types::String] Venue address; as defined by the sender.
    # @attr provider [TD::Types::String] Provider of the venue database; as defined by the sender.
    #   Currently, only "foursquare" and "gplaces" (Google Places) need to be supported.
    # @attr id [TD::Types::String] Identifier of the venue in the provider database; as defined by the sender.
    # @attr type [TD::Types::String] Type of the venue in the provider database; as defined by the sender.
    class Venue < TD::Types::Base
      # Venue location; as defined by the sender.
      attr_accessor location: TD::Types::Location

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Venue name; as defined by the sender.
      attr_accessor title: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Venue address; as defined by the sender.
      attr_accessor address: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Provider of the venue database; as defined by the sender.
      # Currently, only "foursquare" and "gplaces" (Google Places) need to be supported.
      attr_accessor provider: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Identifier of the venue in the provider database; as defined by the sender.
      attr_accessor id: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Type of the venue in the provider database; as defined by the sender.
      attr_accessor type: TD::Types::String
    end

    # Describes a video file.
    # 
    # @attr duration [Integer] Duration of the video, in seconds; as defined by the sender.
    # @attr width [Integer] Video width; as defined by the sender.
    # @attr height [Integer] Video height; as defined by the sender.
    # @attr file_name [TD::Types::String] Original name of the file; as defined by the sender.
    # @attr mime_type [TD::Types::String] MIME type of the file; as defined by the sender.
    # @attr has_stickers [Boolean] True, if stickers were added to the video.
    #   The list of corresponding sticker sets can be received using getAttachedStickerSets.
    # @attr supports_streaming [Boolean] True, if the video is supposed to be streamed.
    # @attr minithumbnail [TD::Types::Minithumbnail, nil] Video minithumbnail; may be null.
    # @attr thumbnail [TD::Types::Thumbnail, nil] Video thumbnail in JPEG or MPEG4 format; as defined by the sender; may
    #   be null.
    # @attr video [TD::Types::File] File containing the video.
    class Video < TD::Types::Base
      # Duration of the video, in seconds; as defined by the sender.
      attr_accessor duration: Integer

      # Video width; as defined by the sender.
      attr_accessor width: Integer

      # Video height; as defined by the sender.
      attr_accessor height: Integer

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Original name of the file; as defined by the sender.
      attr_accessor file_name: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # MIME type of the file; as defined by the sender.
      attr_accessor mime_type: TD::Types::String

      # True, if stickers were added to the video.
      # The list of corresponding sticker sets can be received using getAttachedStickerSets.
      attr_accessor has_stickers: bool

      # True, if the video is supposed to be streamed.
      attr_accessor supports_streaming: bool

      # Video minithumbnail; may be null.
      attr_accessor minithumbnail: TD::Types::Minithumbnail?

      # Video thumbnail in JPEG or MPEG4 format; as defined by the sender; may
      # be null.
      attr_accessor thumbnail: TD::Types::Thumbnail?

      # File containing the video.
      attr_accessor video: TD::Types::File
    end

    # Represents a list of emoji.
    # 
    # @attr emojis [Array<TD::Types::String>] List of emojis.
    class Emojis < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # List of emojis.
      attr_accessor emojis: ::Array[TD::Types::String]
    end

    # Contains notifications about data changes.
    class Update < TD::Types::Base
      # New call was created or information about a call was updated.
      # 
      # @attr call [TD::Types::Call] New data about a call.
      class Call < TD::Types::Update
        # New data about a call.
        attr_accessor call: TD::Types::Call
      end

      # Information about a file was updated.
      # 
      # @attr file [TD::Types::File] New data about the file.
      class File < TD::Types::Update
        # New data about the file.
        attr_accessor file: TD::Types::File
      end

      # A poll was updated; for bots only.
      # 
      # @attr poll [TD::Types::Poll] New data about the poll.
      class Poll < TD::Types::Update
        # New data about the poll.
        attr_accessor poll: TD::Types::Poll
      end

      # Some data of a user has changed.
      # This update is guaranteed to come before the user identifier is returned to the application.
      # 
      # @attr user [TD::Types::User] New data about the user.
      class User < TD::Types::Update
        # New data about the user.
        attr_accessor user: TD::Types::User
      end

      # An option changed its value.
      # 
      # @attr name [TD::Types::String] The option name.
      # @attr value [TD::Types::OptionValue] The new option value.
      class Option < TD::Types::Update
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # The option name.
        attr_accessor name: TD::Types::String

        # The new option value.
        attr_accessor value: TD::Types::OptionValue
      end

      # A new chat has been loaded/created.
      # This update is guaranteed to come before the chat identifier is returned to the application.
      # The chat field changes will be reported through separate updates.
      # 
      # @attr chat [TD::Types::Chat] The chat.
      class NewChat < TD::Types::Update
        # The chat.
        attr_accessor chat: TD::Types::Chat
      end

      # The list of supported reactions has changed.
      # 
      # @attr reactions [Array<TD::Types::Reaction>] The new list of supported reactions.
      class Reactions < TD::Types::Update
        # The new list of supported reactions.
        attr_accessor reactions: ::Array[TD::Types::Reaction]
      end

      # A chat photo was changed.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr photo [TD::Types::ChatPhotoInfo, nil] The new chat photo; may be null.
      class ChatPhoto < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # The new chat photo; may be null.
        attr_accessor photo: TD::Types::ChatPhotoInfo?
      end

      # The chat theme was changed.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr theme_name [TD::Types::String, nil] The new name of the chat theme; may be empty if theme was reset to
      #   default.
      class ChatTheme < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # The new name of the chat theme; may be empty if theme was reset to
        # default.
        attr_accessor theme_name: TD::Types::String?
      end

      # The title of a chat was changed.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr title [TD::Types::String] The new chat title.
      class ChatTitle < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # The new chat title.
        attr_accessor title: TD::Types::String
      end

      # Information about a group call was updated.
      # 
      # @attr group_call [TD::Types::GroupCall] New data about a group call.
      class GroupCall < TD::Types::Update
        # New data about a group call.
        attr_accessor group_call: TD::Types::GroupCall
      end

      # Some data of a supergroup or a channel has changed.
      # This update is guaranteed to come before the supergroup identifier is returned to the application.
      # 
      # @attr supergroup [TD::Types::Supergroup] New data about the supergroup.
      class Supergroup < TD::Types::Update
        # New data about the supergroup.
        attr_accessor supergroup: TD::Types::Supergroup
      end

      # Some data of a basic group has changed.
      # This update is guaranteed to come before the basic group identifier is returned to the application.
      # 
      # @attr basic_group [TD::Types::BasicGroup] New data about the group.
      class BasicGroup < TD::Types::Update
        # New data about the group.
        attr_accessor basic_group: TD::Types::BasicGroup
      end

      # A message sender activity in the chat has changed.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr message_thread_id [Integer] If not 0, a message thread identifier in which the action was performed.
      # @attr sender_id [TD::Types::MessageSender] Identifier of a message sender performing the action.
      # @attr action [TD::Types::ChatAction] The action.
      class ChatAction < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # If not 0, a message thread identifier in which the action was performed.
        attr_accessor message_thread_id: Integer

        # Identifier of a message sender performing the action.
        attr_accessor sender_id: TD::Types::MessageSender

        # The action.
        attr_accessor action: TD::Types::ChatAction
      end

      # User rights changed in a chat; for bots only.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr actor_user_id [Integer] Identifier of the user, changing the rights.
      # @attr date [Integer] Point in time (Unix timestamp) when the user rights was changed.
      # @attr invite_link [TD::Types::ChatInviteLink, nil] If user has joined the chat using an invite link, the invite
      #   link; may be null.
      # @attr old_chat_member [TD::Types::ChatMember] Previous chat member.
      # @attr new_chat_member [TD::Types::ChatMember] New chat member.
      class ChatMember < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # Identifier of the user, changing the rights.
        attr_accessor actor_user_id: Integer

        # Point in time (Unix timestamp) when the user rights was changed.
        attr_accessor date: Integer

        # If user has joined the chat using an invite link, the invite
        # link; may be null.
        attr_accessor invite_link: TD::Types::ChatInviteLink?

        # Previous chat member.
        attr_accessor old_chat_member: TD::Types::ChatMember

        # New chat member.
        attr_accessor new_chat_member: TD::Types::ChatMember
      end

      # The list of available chat themes has changed.
      # 
      # @attr chat_themes [Array<TD::Types::ChatTheme>] The new list of chat themes.
      class ChatThemes < TD::Types::Update
        # The new list of chat themes.
        attr_accessor chat_themes: ::Array[TD::Types::ChatTheme]
      end

      # The list of supported dice emojis has changed.
      # 
      # @attr emojis [Array<TD::Types::String>] The new list of supported dice emojis.
      class DiceEmojis < TD::Types::Update
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # The new list of supported dice emojis.
        attr_accessor emojis: ::Array[TD::Types::String]
      end

      # A new message was received; can also be an outgoing message.
      # 
      # @attr message [TD::Types::Message] The new message.
      class NewMessage < TD::Types::Update
        # The new message.
        attr_accessor message: TD::Types::Message
      end

      # A user changed the answer to a poll; for bots only.
      # 
      # @attr poll_id [Integer] Unique poll identifier.
      # @attr user_id [Integer] The user, who changed the answer to the poll.
      # @attr option_ids [Array<Integer>] 0-based identifiers of answer options, chosen by the user.
      class PollAnswer < TD::Types::Update
        # Unique poll identifier.
        attr_accessor poll_id: Integer

        # The user, who changed the answer to the poll.
        attr_accessor user_id: Integer

        # 0-based identifiers of answer options, chosen by the user.
        attr_accessor option_ids: ::Array[Integer]
      end

      # Some data of a secret chat has changed.
      # This update is guaranteed to come before the secret chat identifier is returned to the application.
      # 
      # @attr secret_chat [TD::Types::SecretChat] New data about the secret chat.
      class SecretChat < TD::Types::Update
        # New data about the secret chat.
        attr_accessor secret_chat: TD::Types::SecretChat
      end

      # A sticker set has changed.
      # 
      # @attr sticker_set [TD::Types::StickerSet] The sticker set.
      class StickerSet < TD::Types::Update
        # The sticker set.
        attr_accessor sticker_set: TD::Types::StickerSet
      end

      # The user went online or offline.
      # 
      # @attr user_id [Integer] User identifier.
      # @attr status [TD::Types::UserStatus] New status of the user.
      class UserStatus < TD::Types::Update
        # User identifier.
        attr_accessor user_id: Integer

        # New status of the user.
        attr_accessor status: TD::Types::UserStatus
      end

      # The list of chat filters or a chat filter has changed.
      # 
      # @attr chat_filters [Array<TD::Types::ChatFilterInfo>] The new list of chat filters.
      class ChatFilters < TD::Types::Update
        # The new list of chat filters.
        attr_accessor chat_filters: ::Array[TD::Types::ChatFilterInfo]
      end

      # A notification was changed.
      # 
      # @attr notification_group_id [Integer] Unique notification group identifier.
      # @attr notification [TD::Types::Notification] Changed notification.
      class Notification < TD::Types::Update
        # Unique notification group identifier.
        attr_accessor notification_group_id: Integer

        # Changed notification.
        attr_accessor notification: TD::Types::Notification
      end

      # The list of users nearby has changed.
      # The update is guaranteed to be sent only 60 seconds after a successful searchChatsNearby request.
      # 
      # @attr users_nearby [Array<TD::Types::ChatNearby>] The new list of users nearby.
      class UsersNearby < TD::Types::Update
        # The new list of users nearby.
        attr_accessor users_nearby: ::Array[TD::Types::ChatNearby]
      end

      # The position of a chat in a chat list has changed.
      # Instead of this update updateChatLastMessage or updateChatDraftMessage might be sent.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr position [TD::Types::ChatPosition] New chat position.
      #   If new order is 0, then the chat needs to be removed from the list.
      class ChatPosition < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # New chat position.
        # If new order is 0, then the chat needs to be removed from the list.
        attr_accessor position: TD::Types::ChatPosition
      end

      # A message was edited.
      # Changes in the message content will come in a separate updateMessageContent.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr message_id [Integer] Message identifier.
      # @attr edit_date [Integer] Point in time (Unix timestamp) when the message was edited.
      # @attr reply_markup [TD::Types::ReplyMarkup, nil] New message reply markup; may be null.
      class MessageEdited < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # Message identifier.
        attr_accessor message_id: Integer

        # Point in time (Unix timestamp) when the message was edited.
        attr_accessor edit_date: Integer

        # New message reply markup; may be null.
        attr_accessor reply_markup: TD::Types::ReplyMarkup?
      end

      # Some data in userFullInfo has been changed.
      # 
      # @attr user_id [Integer] User identifier.
      # @attr user_full_info [TD::Types::UserFullInfo] New full information about the user.
      class UserFullInfo < TD::Types::Update
        # User identifier.
        attr_accessor user_id: Integer

        # New full information about the user.
        attr_accessor user_full_info: TD::Types::UserFullInfo
      end

      # The chat action bar was changed.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr action_bar [TD::Types::ChatActionBar, nil] The new value of the action bar; may be null.
      class ChatActionBar < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # The new value of the action bar; may be null.
        attr_accessor action_bar: TD::Types::ChatActionBar?
      end

      # A chat was blocked or unblocked.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr is_blocked [Boolean] New value of is_blocked.
      class ChatIsBlocked < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # New value of is_blocked.
        attr_accessor is_blocked: bool
      end

      # Incoming messages were read or the number of unread messages has been changed.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr last_read_inbox_message_id [Integer] Identifier of the last read incoming message.
      # @attr unread_count [Integer] The number of unread messages left in the chat.
      class ChatReadInbox < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # Identifier of the last read incoming message.
        attr_accessor last_read_inbox_message_id: Integer

        # The number of unread messages left in the chat.
        attr_accessor unread_count: Integer
      end

      # A chat video chat state has changed.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr video_chat [TD::Types::VideoChat] New value of video_chat.
      class ChatVideoChat < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # New value of video_chat.
        attr_accessor video_chat: TD::Types::VideoChat
      end

      # Some messages were deleted.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr message_ids [Array<Integer>] Identifiers of the deleted messages.
      # @attr is_permanent [Boolean] True, if the messages are permanently deleted by a user (as opposed to just becoming
      #   inaccessible).
      # @attr from_cache [Boolean] True, if the messages are deleted only from the cache and can possibly be retrieved
      #   again in the future.
      class DeleteMessages < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # Identifiers of the deleted messages.
        attr_accessor message_ids: ::Array[Integer]

        # True, if the messages are permanently deleted by a user (as opposed to just becoming
        # inaccessible).
        attr_accessor is_permanent: bool

        # True, if the messages are deleted only from the cache and can possibly be retrieved
        # again in the future.
        attr_accessor from_cache: bool
      end

      # The message content has changed.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr message_id [Integer] Message identifier.
      # @attr new_content [TD::Types::MessageContent] New message content.
      class MessageContent < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # Message identifier.
        attr_accessor message_id: Integer

        # New message content.
        attr_accessor new_content: TD::Types::MessageContent
      end

      # The list of recently used stickers was updated.
      # 
      # @attr is_attached [Boolean] True, if the list of stickers attached to photo or video files was updated, otherwise
      #   the list of sent stickers is updated.
      # @attr sticker_ids [Array<Integer>] The new list of file identifiers of recently used stickers.
      class RecentStickers < TD::Types::Update
        # True, if the list of stickers attached to photo or video files was updated, otherwise
        # the list of sent stickers is updated.
        attr_accessor is_attached: bool

        # The new list of file identifiers of recently used stickers.
        attr_accessor sticker_ids: ::Array[Integer]
      end

      # The message Time To Live setting for a chat was changed.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr message_ttl [Integer] New value of message_ttl.
      class ChatMessageTtl < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # New value of message_ttl.
        attr_accessor message_ttl: Integer
      end

      # Chat permissions was changed.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr permissions [TD::Types::ChatPermissions] The new chat permissions.
      class ChatPermissions < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # The new chat permissions.
        attr_accessor permissions: TD::Types::ChatPermissions
      end

      # Outgoing messages were read.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr last_read_outbox_message_id [Integer] Identifier of last read outgoing message.
      class ChatReadOutbox < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # Identifier of last read outgoing message.
        attr_accessor last_read_outbox_message_id: Integer
      end

      # The connection state has changed.
      # This update must be used only to show a human-readable description of the connection state.
      # 
      # @attr state [TD::Types::ConnectionState] The new connection state.
      class ConnectionState < TD::Types::Update
        # The new connection state.
        attr_accessor state: TD::Types::ConnectionState
      end

      # A new incoming event; for bots only.
      # 
      # @attr event [TD::Types::String] A JSON-serialized event.
      class NewCustomEvent < TD::Types::Update
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # A JSON-serialized event.
        attr_accessor event: TD::Types::String
      end

      # A new incoming query; for bots only.
      # 
      # @attr id [Integer] The query identifier.
      # @attr data [TD::Types::String] JSON-serialized query data.
      # @attr timeout [Integer] Query timeout.
      class NewCustomQuery < TD::Types::Update
        # The query identifier.
        attr_accessor id: Integer

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # JSON-serialized query data.
        attr_accessor data: TD::Types::String

        # Query timeout.
        attr_accessor timeout: Integer
      end

      # A new incoming inline query; for bots only.
      # 
      # @attr id [Integer] Unique query identifier.
      # @attr sender_user_id [Integer] Identifier of the user who sent the query.
      # @attr user_location [TD::Types::Location, nil] User location; may be null.
      # @attr chat_type [TD::Types::ChatType, nil] The type of the chat, from which the query originated; may be null if
      #   unknown.
      # @attr query [TD::Types::String] Text of the query.
      # @attr offset [TD::Types::String] Offset of the first entry to return.
      class NewInlineQuery < TD::Types::Update
        # Unique query identifier.
        attr_accessor id: Integer

        # Identifier of the user who sent the query.
        attr_accessor sender_user_id: Integer

        # User location; may be null.
        attr_accessor user_location: TD::Types::Location?

        # The type of the chat, from which the query originated; may be null if
        # unknown.
        attr_accessor chat_type: TD::Types::ChatType?

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Text of the query.
        attr_accessor query: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Offset of the first entry to return.
        attr_accessor offset: TD::Types::String
      end

      # The list of saved animations was updated.
      # 
      # @attr animation_ids [Array<Integer>] The new list of file identifiers of saved animations.
      class SavedAnimations < TD::Types::Update
        # The new list of file identifiers of saved animations.
        attr_accessor animation_ids: ::Array[Integer]
      end

      # New terms of service must be accepted by the user.
      # If the terms of service are declined, then the deleteAccount method must be called with the reason "Decline ToS
      #   update".
      # 
      # @attr terms_of_service_id [TD::Types::String] Identifier of the terms of service.
      # @attr terms_of_service [TD::Types::TermsOfService] The new terms of service.
      class TermsOfService < TD::Types::Update
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Identifier of the terms of service.
        attr_accessor terms_of_service_id: TD::Types::String

        # The new terms of service.
        attr_accessor terms_of_service: TD::Types::TermsOfService
      end

      # The last message of a chat was changed.
      # If last_message is null, then the last message in the chat became unknown.
      # Some new unknown messages might be added to the chat in this case.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr last_message [TD::Types::Message, nil] The new last message in the chat; may be null.
      # @attr positions [Array<TD::Types::ChatPosition>] The new chat positions in the chat lists.
      class ChatLastMessage < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # The new last message in the chat; may be null.
        attr_accessor last_message: TD::Types::Message?

        # The new chat positions in the chat lists.
        attr_accessor positions: ::Array[TD::Types::ChatPosition]
      end

      # The default chat reply markup was changed.
      # Can occur because new messages with reply markup were received or because an old reply markup was hidden by the
      #   user.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr reply_markup_message_id [Integer] Identifier of the message from which reply markup needs to be used; 0 if
      #   there is no default custom reply markup in the chat.
      class ChatReplyMarkup < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # Identifier of the message from which reply markup needs to be used; 0 if
        # there is no default custom reply markup in the chat.
        attr_accessor reply_markup_message_id: Integer
      end

      # The list of favorite stickers was updated.
      # 
      # @attr sticker_ids [Array<Integer>] The new list of file identifiers of favorite stickers.
      class FavoriteStickers < TD::Types::Update
        # The new list of file identifiers of favorite stickers.
        attr_accessor sticker_ids: ::Array[Integer]
      end

      # The message pinned state was changed.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr message_id [Integer] The message identifier.
      # @attr is_pinned [Boolean] True, if the message is pinned.
      class MessageIsPinned < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # The message identifier.
        attr_accessor message_id: Integer

        # True, if the message is pinned.
        attr_accessor is_pinned: bool
      end

      # The list of suggested to the user actions has changed.
      # 
      # @attr added_actions [Array<TD::Types::SuggestedAction>] Added suggested actions.
      # @attr removed_actions [Array<TD::Types::SuggestedAction>] Removed suggested actions.
      class SuggestedActions < TD::Types::Update
        # Added suggested actions.
        attr_accessor added_actions: ::Array[TD::Types::SuggestedAction]

        # Removed suggested actions.
        attr_accessor removed_actions: ::Array[TD::Types::SuggestedAction]
      end

      # Number of unread chats, i.e.
      # with unread messages or marked as unread, has changed.
      # This update is sent only if the message database is used.
      # 
      # @attr chat_list [TD::Types::ChatList] The chat list with changed number of unread messages.
      # @attr total_count [Integer] Approximate total number of chats in the chat list.
      # @attr unread_count [Integer] Total number of unread chats.
      # @attr unread_unmuted_count [Integer] Total number of unread unmuted chats.
      # @attr marked_as_unread_count [Integer] Total number of chats marked as unread.
      # @attr marked_as_unread_unmuted_count [Integer] Total number of unmuted chats marked as unread.
      class UnreadChatCount < TD::Types::Update
        # The chat list with changed number of unread messages.
        attr_accessor chat_list: TD::Types::ChatList

        # Approximate total number of chats in the chat list.
        attr_accessor total_count: Integer

        # Total number of unread chats.
        attr_accessor unread_count: Integer

        # Total number of unread unmuted chats.
        attr_accessor unread_unmuted_count: Integer

        # Total number of chats marked as unread.
        attr_accessor marked_as_unread_count: Integer

        # Total number of unmuted chats marked as unread.
        attr_accessor marked_as_unread_unmuted_count: Integer
      end

      # A chat draft has changed.
      # Be aware that the update may come in the currently opened chat but with old content of the draft.
      # If the user has changed the content of the draft, this update mustn't be applied.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr draft_message [TD::Types::DraftMessage, nil] The new draft message; may be null.
      # @attr positions [Array<TD::Types::ChatPosition>] The new chat positions in the chat lists.
      class ChatDraftMessage < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # The new draft message; may be null.
        attr_accessor draft_message: TD::Types::DraftMessage?

        # The new chat positions in the chat lists.
        attr_accessor positions: ::Array[TD::Types::ChatPosition]
      end

      # A new incoming callback query; for bots only.
      # 
      # @attr id [Integer] Unique query identifier.
      # @attr sender_user_id [Integer] Identifier of the user who sent the query.
      # @attr chat_id [Integer] Identifier of the chat where the query was sent.
      # @attr message_id [Integer] Identifier of the message, from which the query originated.
      # @attr chat_instance [Integer] Identifier that uniquely corresponds to the chat to which the message was sent.
      # @attr payload [TD::Types::CallbackQueryPayload] Query payload.
      class NewCallbackQuery < TD::Types::Update
        # Unique query identifier.
        attr_accessor id: Integer

        # Identifier of the user who sent the query.
        attr_accessor sender_user_id: Integer

        # Identifier of the chat where the query was sent.
        attr_accessor chat_id: Integer

        # Identifier of the message, from which the query originated.
        attr_accessor message_id: Integer

        # Identifier that uniquely corresponds to the chat to which the message was sent.
        attr_accessor chat_instance: Integer

        # Query payload.
        attr_accessor payload: TD::Types::CallbackQueryPayload
      end

      # A new incoming shipping query; for bots only.
      # Only for invoices with flexible price.
      # 
      # @attr id [Integer] Unique query identifier.
      # @attr sender_user_id [Integer] Identifier of the user who sent the query.
      # @attr invoice_payload [TD::Types::String] Invoice payload.
      # @attr shipping_address [TD::Types::Address] User shipping address.
      class NewShippingQuery < TD::Types::Update
        # Unique query identifier.
        attr_accessor id: Integer

        # Identifier of the user who sent the query.
        attr_accessor sender_user_id: Integer

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Invoice payload.
        attr_accessor invoice_payload: TD::Types::String

        # User shipping address.
        attr_accessor shipping_address: TD::Types::Address
      end

      # A list of active notifications in a notification group has changed.
      # 
      # @attr notification_group_id [Integer] Unique notification group identifier.
      # @attr type [TD::Types::NotificationGroupType] New type of the notification group.
      # @attr chat_id [Integer] Identifier of a chat to which all notifications in the group belong.
      # @attr notification_settings_chat_id [Integer] Chat identifier, which notification settings must be applied to the
      #   added notifications.
      # @attr is_silent [Boolean] True, if the notifications must be shown without sound.
      # @attr total_count [Integer] Total number of unread notifications in the group, can be bigger than number of active
      #   notifications.
      # @attr added_notifications [Array<TD::Types::Notification>] List of added group notifications, sorted by
      #   notification ID.
      # @attr removed_notification_ids [Array<Integer>] Identifiers of removed group notifications, sorted by notification
      #   ID.
      class NotificationGroup < TD::Types::Update
        # Unique notification group identifier.
        attr_accessor notification_group_id: Integer

        # New type of the notification group.
        attr_accessor type: TD::Types::NotificationGroupType

        # Identifier of a chat to which all notifications in the group belong.
        attr_accessor chat_id: Integer

        # Chat identifier, which notification settings must be applied to the
        # added notifications.
        attr_accessor notification_settings_chat_id: Integer

        # True, if the notifications must be shown without sound.
        attr_accessor is_silent: bool

        # Total number of unread notifications in the group, can be bigger than number of active
        # notifications.
        attr_accessor total_count: Integer

        # List of added group notifications, sorted by
        # notification ID.
        attr_accessor added_notifications: ::Array[TD::Types::Notification]

        # Identifiers of removed group notifications, sorted by notification
        # ID.
        attr_accessor removed_notification_ids: ::Array[Integer]
      end

      # The user authorization state has changed.
      # 
      # @attr authorization_state [TD::Types::AuthorizationState] New authorization state.
      class AuthorizationState < TD::Types::Update
        # New authorization state.
        attr_accessor authorization_state: TD::Types::AuthorizationState
      end

      # The message sender that is selected to send messages in a chat has changed.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr message_sender_id [TD::Types::MessageSender, nil] New value of message_sender_id; may be null if the user
      #   can't change message sender.
      class ChatMessageSender < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # New value of message_sender_id; may be null if the user
        # can't change message sender.
        attr_accessor message_sender_id: TD::Types::MessageSender?
      end

      # A message failed to send.
      # Be aware that some messages being sent can be irrecoverably deleted, in which case updateDeleteMessages will be
      #   received instead of this update.
      # 
      # @attr message [TD::Types::Message] The failed to send message.
      # @attr old_message_id [Integer] The previous temporary message identifier.
      # @attr error_code [Integer] An error code.
      # @attr error_message [TD::Types::String] Error message.
      class MessageSendFailed < TD::Types::Update
        # The failed to send message.
        attr_accessor message: TD::Types::Message

        # The previous temporary message identifier.
        attr_accessor old_message_id: Integer

        # An error code.
        attr_accessor error_code: Integer

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Error message.
        attr_accessor error_message: TD::Types::String
      end

      # The selected background has changed.
      # 
      # @attr for_dark_theme [Boolean] True, if background for dark theme has changed.
      # @attr background [TD::Types::Background, nil] The new selected background; may be null.
      class SelectedBackground < TD::Types::Update
        # True, if background for dark theme has changed.
        attr_accessor for_dark_theme: bool

        # The new selected background; may be null.
        attr_accessor background: TD::Types::Background?
      end

      # Contains active notifications that was shown on previous application launches.
      # This update is sent only if the message database is used.
      # In that case it comes once before any updateNotification and updateNotificationGroup update.
      # 
      # @attr groups [Array<TD::Types::NotificationGroup>] Lists of active notification groups.
      class ActiveNotifications < TD::Types::Update
        # Lists of active notification groups.
        attr_accessor groups: ::Array[TD::Types::NotificationGroup]
      end

      # File generation is no longer needed.
      # 
      # @attr generation_id [Integer] Unique identifier for the generation process.
      class FileGenerationStop < TD::Types::Update
        # Unique identifier for the generation process.
        attr_accessor generation_id: Integer
      end

      # A message with an unread mention was read.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr message_id [Integer] Message identifier.
      # @attr unread_mention_count [Integer] The new number of unread mention messages left in the chat.
      class MessageMentionRead < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # Message identifier.
        attr_accessor message_id: Integer

        # The new number of unread mention messages left in the chat.
        attr_accessor unread_mention_count: Integer
      end

      # A service notification from the server was received.
      # Upon receiving this the application must show a popup with the content of the notification.
      # 
      # @attr type [TD::Types::String] Notification type.
      #   If type begins with "AUTH_KEY_DROP_", then two buttons "Cancel" and "Log out" must be shown under notification;
      #   if user presses the second, all local data must be destroyed using Destroy method.
      # @attr content [TD::Types::MessageContent] Notification content.
      class ServiceNotification < TD::Types::Update
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Notification type.
        # If type begins with "AUTH_KEY_DROP_", then two buttons "Cancel" and "Log out" must be shown under notification;
        # if user presses the second, all local data must be destroyed using Destroy method.
        attr_accessor type: TD::Types::String

        # Notification content.
        attr_accessor content: TD::Types::MessageContent
      end

      # Some data in supergroupFullInfo has been changed.
      # 
      # @attr supergroup_id [Integer] Identifier of the supergroup or channel.
      # @attr supergroup_full_info [TD::Types::SupergroupFullInfo] New full information about the supergroup.
      class SupergroupFullInfo < TD::Types::Update
        # Identifier of the supergroup or channel.
        attr_accessor supergroup_id: Integer

        # New full information about the supergroup.
        attr_accessor supergroup_full_info: TD::Types::SupergroupFullInfo
      end

      # Number of unread messages in a chat list has changed.
      # This update is sent only if the message database is used.
      # 
      # @attr chat_list [TD::Types::ChatList] The chat list with changed number of unread messages.
      # @attr unread_count [Integer] Total number of unread messages.
      # @attr unread_unmuted_count [Integer] Total number of unread messages in unmuted chats.
      class UnreadMessageCount < TD::Types::Update
        # The chat list with changed number of unread messages.
        attr_accessor chat_list: TD::Types::ChatList

        # Total number of unread messages.
        attr_accessor unread_count: Integer

        # Total number of unread messages in unmuted chats.
        attr_accessor unread_unmuted_count: Integer
      end

      # Some data in basicGroupFullInfo has been changed.
      # 
      # @attr basic_group_id [Integer] Identifier of a basic group.
      # @attr basic_group_full_info [TD::Types::BasicGroupFullInfo] New full information about the group.
      class BasicGroupFullInfo < TD::Types::Update
        # Identifier of a basic group.
        attr_accessor basic_group_id: Integer

        # New full information about the group.
        attr_accessor basic_group_full_info: TD::Types::BasicGroupFullInfo
      end

      # The file generation process needs to be started by the application.
      # 
      # @attr generation_id [Integer] Unique identifier for the generation process.
      # @attr original_path [TD::Types::String, nil] The path to a file from which a new file is generated; may be empty.
      # @attr destination_path [TD::Types::String] The path to a file that must be created and where the new file is
      #   generated.
      # @attr conversion [TD::Types::String] String specifying the conversion applied to the original file.
      #   If conversion is "#url#" than original_path contains an HTTP/HTTPS URL of a file, which must be downloaded by the
      #   application.
      class FileGenerationStart < TD::Types::Update
        # Unique identifier for the generation process.
        attr_accessor generation_id: Integer

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # The path to a file from which a new file is generated; may be empty.
        attr_accessor original_path: TD::Types::String?

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # The path to a file that must be created and where the new file is
        # generated.
        attr_accessor destination_path: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # String specifying the conversion applied to the original file.
        # If conversion is "#url#" than original_path contains an HTTP/HTTPS URL of a file, which must be downloaded by the
        # application.
        attr_accessor conversion: TD::Types::String
      end

      # Some language pack strings have been updated.
      # 
      # @attr localization_target [TD::Types::String] Localization target to which the language pack belongs.
      # @attr language_pack_id [TD::Types::String] Identifier of the updated language pack.
      # @attr strings [Array<TD::Types::LanguagePackString>] List of changed language pack strings.
      class LanguagePackStrings < TD::Types::Update
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Localization target to which the language pack belongs.
        attr_accessor localization_target: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Identifier of the updated language pack.
        attr_accessor language_pack_id: TD::Types::String

        # List of changed language pack strings.
        attr_accessor strings: ::Array[TD::Types::LanguagePackString]
      end

      # A user sent a join request to a chat; for bots only.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr request [TD::Types::ChatJoinRequest] Join request.
      # @attr invite_link [TD::Types::ChatInviteLink, nil] The invite link, which was used to send join request; may be
      #   null.
      class NewChatJoinRequest < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # Join request.
        attr_accessor request: TD::Types::ChatJoinRequest

        # The invite link, which was used to send join request; may be
        # null.
        attr_accessor invite_link: TD::Types::ChatInviteLink?
      end

      # The list of trending sticker sets was updated or some of them were viewed.
      # 
      # @attr sticker_sets [TD::Types::StickerSets] The prefix of the list of trending sticker sets with the newest
      #   trending sticker sets.
      class TrendingStickerSets < TD::Types::Update
        # The prefix of the list of trending sticker sets with the newest
        # trending sticker sets.
        attr_accessor sticker_sets: TD::Types::StickerSets
      end

      # Information about a group call participant was changed.
      # The updates are sent only after the group call is received through getGroupCall and only if the call is joined or
      #   being joined.
      # 
      # @attr group_call_id [Integer] Identifier of group call.
      # @attr participant [TD::Types::GroupCallParticipant] New data about a participant.
      class GroupCallParticipant < TD::Types::Update
        # Identifier of group call.
        attr_accessor group_call_id: Integer

        # New data about a participant.
        attr_accessor participant: TD::Types::GroupCallParticipant
      end

      # The list of installed sticker sets was updated.
      # 
      # @attr is_masks [Boolean] True, if the list of installed mask sticker sets was updated.
      # @attr sticker_set_ids [Array<Integer>] The new list of installed ordinary sticker sets.
      class InstalledStickerSets < TD::Types::Update
        # True, if the list of installed mask sticker sets was updated.
        attr_accessor is_masks: bool

        # The new list of installed ordinary sticker sets.
        attr_accessor sticker_set_ids: ::Array[Integer]
      end

      # The message content was opened.
      # Updates voice note messages to "listened", video note messages to "viewed" and starts the TTL timer for
      #   self-destructing messages.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr message_id [Integer] Message identifier.
      class MessageContentOpened < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # Message identifier.
        attr_accessor message_id: Integer
      end

      # A message has been successfully sent.
      # 
      # @attr message [TD::Types::Message] The sent message.
      #   Usually only the message identifier, date, and content are changed, but almost all other fields can also change.
      # @attr old_message_id [Integer] The previous temporary message identifier.
      class MessageSendSucceeded < TD::Types::Update
        # The sent message.
        # Usually only the message identifier, date, and content are changed, but almost all other fields can also change.
        attr_accessor message: TD::Types::Message

        # The previous temporary message identifier.
        attr_accessor old_message_id: Integer
      end

      # A new incoming pre-checkout query; for bots only.
      # Contains full information about a checkout.
      # 
      # @attr id [Integer] Unique query identifier.
      # @attr sender_user_id [Integer] Identifier of the user who sent the query.
      # @attr currency [TD::Types::String] Currency for the product price.
      # @attr total_amount [Integer] Total price for the product, in the smallest units of the currency.
      # @attr invoice_payload [String] Invoice payload.
      # @attr shipping_option_id [TD::Types::String, nil] Identifier of a shipping option chosen by the user; may be empty
      #   if not applicable.
      # @attr order_info [TD::Types::OrderInfo, nil] Information about the order; may be null.
      class NewPreCheckoutQuery < TD::Types::Update
        # Unique query identifier.
        attr_accessor id: Integer

        # Identifier of the user who sent the query.
        attr_accessor sender_user_id: Integer

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Currency for the product price.
        attr_accessor currency: TD::Types::String

        # Total price for the product, in the smallest units of the currency.
        attr_accessor total_amount: Integer

        # Invoice payload.
        attr_accessor invoice_payload: String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Identifier of a shipping option chosen by the user; may be empty
        # if not applicable.
        attr_accessor shipping_option_id: TD::Types::String?

        # Information about the order; may be null.
        attr_accessor order_info: TD::Types::OrderInfo?
      end

      # New call signaling data arrived.
      # 
      # @attr call_id [Integer] The call identifier.
      # @attr data [String] The data.
      class NewCallSignalingData < TD::Types::Update
        # The call identifier.
        attr_accessor call_id: Integer

        # The data.
        attr_accessor data: String
      end

      # The chat available reactions were changed.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr available_reactions [Array<TD::Types::String>] The new list of reactions, available in the chat.
      class ChatAvailableReactions < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # The new list of reactions, available in the chat.
        attr_accessor available_reactions: ::Array[TD::Types::String]
      end

      # A chat was marked as unread or was read.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr is_marked_as_unread [Boolean] New value of is_marked_as_unread.
      class ChatIsMarkedAsUnread < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # New value of is_marked_as_unread.
        attr_accessor is_marked_as_unread: bool
      end

      # The number of online group members has changed.
      # This update with non-zero count is sent only for currently opened chats.
      # There is no guarantee that it will be sent just after the count has changed.
      # 
      # @attr chat_id [Integer] Identifier of the chat.
      # @attr online_member_count [Integer] New number of online members in the chat, or 0 if unknown.
      class ChatOnlineMemberCount < TD::Types::Update
        # Identifier of the chat.
        attr_accessor chat_id: Integer

        # New number of online members in the chat, or 0 if unknown.
        attr_accessor online_member_count: Integer
      end

      # The information about interactions with a message has changed.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr message_id [Integer] Message identifier.
      # @attr interaction_info [TD::Types::MessageInteractionInfo, nil] New information about interactions with the
      #   message; may be null.
      class MessageInteractionInfo < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # Message identifier.
        attr_accessor message_id: Integer

        # New information about interactions with the
        # message; may be null.
        attr_accessor interaction_info: TD::Types::MessageInteractionInfo?
      end

      # The list of unread reactions added to a message was changed.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr message_id [Integer] Message identifier.
      # @attr unread_reactions [Array<TD::Types::UnreadReaction>] The new list of unread reactions.
      # @attr unread_reaction_count [Integer] The new number of messages with unread reactions left in the chat.
      class MessageUnreadReactions < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # Message identifier.
        attr_accessor message_id: Integer

        # The new list of unread reactions.
        attr_accessor unread_reactions: ::Array[TD::Types::UnreadReaction]

        # The new number of messages with unread reactions left in the chat.
        attr_accessor unread_reaction_count: Integer
      end

      # The user has chosen a result of an inline query; for bots only.
      # 
      # @attr sender_user_id [Integer] Identifier of the user who sent the query.
      # @attr user_location [TD::Types::Location, nil] User location; may be null.
      # @attr query [TD::Types::String] Text of the query.
      # @attr result_id [TD::Types::String] Identifier of the chosen result.
      # @attr inline_message_id [TD::Types::String] Identifier of the sent inline message, if known.
      class NewChosenInlineResult < TD::Types::Update
        # Identifier of the user who sent the query.
        attr_accessor sender_user_id: Integer

        # User location; may be null.
        attr_accessor user_location: TD::Types::Location?

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Text of the query.
        attr_accessor query: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Identifier of the chosen result.
        attr_accessor result_id: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Identifier of the sent inline message, if known.
        attr_accessor inline_message_id: TD::Types::String
      end

      # The chat unread_mention_count has changed.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr unread_mention_count [Integer] The number of unread mention messages left in the chat.
      class ChatUnreadMentionCount < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # The number of unread mention messages left in the chat.
        attr_accessor unread_mention_count: Integer
      end

      # A request to send a message has reached the Telegram server.
      # This doesn't mean that the message will be sent successfully or even that the send message request will be
      #   processed.
      # This update will be sent only if the option "use_quick_ack" is set to true.
      # This update may be sent multiple times for the same message.
      # 
      # @attr chat_id [Integer] The chat identifier of the sent message.
      # @attr message_id [Integer] A temporary message identifier.
      class MessageSendAcknowledged < TD::Types::Update
        # The chat identifier of the sent message.
        attr_accessor chat_id: Integer

        # A temporary message identifier.
        attr_accessor message_id: Integer
      end

      # A new incoming callback query from a message sent via a bot; for bots only.
      # 
      # @attr id [Integer] Unique query identifier.
      # @attr sender_user_id [Integer] Identifier of the user who sent the query.
      # @attr inline_message_id [TD::Types::String] Identifier of the inline message, from which the query originated.
      # @attr chat_instance [Integer] An identifier uniquely corresponding to the chat a message was sent to.
      # @attr payload [TD::Types::CallbackQueryPayload] Query payload.
      class NewInlineCallbackQuery < TD::Types::Update
        # Unique query identifier.
        attr_accessor id: Integer

        # Identifier of the user who sent the query.
        attr_accessor sender_user_id: Integer

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Identifier of the inline message, from which the query originated.
        attr_accessor inline_message_id: TD::Types::String

        # An identifier uniquely corresponding to the chat a message was sent to.
        attr_accessor chat_instance: Integer

        # Query payload.
        attr_accessor payload: TD::Types::CallbackQueryPayload
      end

      # A chat content was allowed or restricted for saving.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr has_protected_content [Boolean] New value of has_protected_content.
      class ChatHasProtectedContent < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # New value of has_protected_content.
        attr_accessor has_protected_content: bool
      end

      # Notification settings for a chat were changed.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr notification_settings [TD::Types::ChatNotificationSettings] The new notification settings.
      class ChatNotificationSettings < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # The new notification settings.
        attr_accessor notification_settings: TD::Types::ChatNotificationSettings
      end

      # The chat pending join requests were changed.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr pending_join_requests [TD::Types::ChatJoinRequestsInfo, nil] The new data about pending join requests; may be
      #   null.
      class ChatPendingJoinRequests < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # The new data about pending join requests; may be
        # null.
        attr_accessor pending_join_requests: TD::Types::ChatJoinRequestsInfo?
      end

      # The chat unread_reaction_count has changed.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr unread_reaction_count [Integer] The number of messages with unread reactions left in the chat.
      class ChatUnreadReactionCount < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # The number of messages with unread reactions left in the chat.
        attr_accessor unread_reaction_count: Integer
      end

      # Describes whether there are some pending notification updates.
      # Can be used to prevent application from killing, while there are some pending notifications.
      # 
      # @attr have_delayed_notifications [Boolean] True, if there are some delayed notification updates, which will be sent
      #   soon.
      # @attr have_unreceived_notifications [Boolean] True, if there can be some yet unreceived notifications, which are
      #   being fetched from the server.
      class HavePendingNotifications < TD::Types::Update
        # True, if there are some delayed notification updates, which will be sent
        # soon.
        attr_accessor have_delayed_notifications: bool

        # True, if there can be some yet unreceived notifications, which are
        # being fetched from the server.
        attr_accessor have_unreceived_notifications: bool
      end

      # Some privacy setting rules have been changed.
      # 
      # @attr setting [TD::Types::UserPrivacySetting] The privacy setting.
      # @attr rules [TD::Types::UserPrivacySettingRules] New privacy rules.
      class UserPrivacySettingRules < TD::Types::Update
        # The privacy setting.
        attr_accessor setting: TD::Types::UserPrivacySetting

        # New privacy rules.
        attr_accessor rules: TD::Types::UserPrivacySettingRules
      end

      # The parameters of animation search through GetOption("animation_search_bot_username") bot has changed.
      # 
      # @attr provider [TD::Types::String] Name of the animation search provider.
      # @attr emojis [Array<TD::Types::String>] The new list of emojis suggested for searching.
      class AnimationSearchParameters < TD::Types::Update
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Name of the animation search provider.
        attr_accessor provider: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # The new list of emojis suggested for searching.
        attr_accessor emojis: ::Array[TD::Types::String]
      end

      # A chat's has_scheduled_messages field has changed.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr has_scheduled_messages [Boolean] New value of has_scheduled_messages.
      class ChatHasScheduledMessages < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # New value of has_scheduled_messages.
        attr_accessor has_scheduled_messages: bool
      end

      # Notification settings for some type of chats were updated.
      # 
      # @attr scope [TD::Types::NotificationSettingsScope] Types of chats for which notification settings were updated.
      # @attr notification_settings [TD::Types::ScopeNotificationSettings] The new notification settings.
      class ScopeNotificationSettings < TD::Types::Update
        # Types of chats for which notification settings were updated.
        attr_accessor scope: TD::Types::NotificationSettingsScope

        # The new notification settings.
        attr_accessor notification_settings: TD::Types::ScopeNotificationSettings
      end

      # A message with a live location was viewed.
      # When the update is received, the application is supposed to update the live location.
      # 
      # @attr chat_id [Integer] Identifier of the chat with the live location message.
      # @attr message_id [Integer] Identifier of the message with live location.
      class MessageLiveLocationViewed < TD::Types::Update
        # Identifier of the chat with the live location message.
        attr_accessor chat_id: Integer

        # Identifier of the message with live location.
        attr_accessor message_id: Integer
      end

      # Some animated emoji message was clicked and a big animated sticker must be played if the message is visible on the
      #   screen.
      # chatActionWatchingAnimations with the text of the message needs to be sent if the sticker is played.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr message_id [Integer] Message identifier.
      # @attr sticker [TD::Types::Sticker] The animated sticker to be played.
      class AnimatedEmojiMessageClicked < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # Message identifier.
        attr_accessor message_id: Integer

        # The animated sticker to be played.
        attr_accessor sticker: TD::Types::Sticker
      end

      # The value of the default disable_notification parameter, used when a message is sent to the chat, was changed.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr default_disable_notification [Boolean] The new default_disable_notification value.
      class ChatDefaultDisableNotification < TD::Types::Update
        # Chat identifier.
        attr_accessor chat_id: Integer

        # The new default_disable_notification value.
        attr_accessor default_disable_notification: bool
      end
    end

    # Describes an address.
    # 
    # @attr country_code [TD::Types::String] A two-letter ISO 3166-1 alpha-2 country code.
    # @attr state [TD::Types::String] State, if applicable.
    # @attr city [TD::Types::String] City.
    # @attr street_line1 [TD::Types::String] First line of the address.
    # @attr street_line2 [TD::Types::String] Second line of the address.
    # @attr postal_code [TD::Types::String] Address postal code.
    class Address < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # A two-letter ISO 3166-1 alpha-2 country code.
      attr_accessor country_code: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # State, if applicable.
      attr_accessor state: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # City.
      attr_accessor city: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # First line of the address.
      attr_accessor street_line1: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Second line of the address.
      attr_accessor street_line2: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Address postal code.
      attr_accessor postal_code: TD::Types::String
    end

    # Contains the call identifier.
    # 
    # @attr id [Integer] Call identifier.
    class CallId < TD::Types::Base
      # Call identifier.
      attr_accessor id: Integer
    end

    # Describes a user contact.
    # 
    # @attr phone_number [TD::Types::String] Phone number of the user.
    # @attr first_name [TD::Types::String] First name of the user; 1-255 characters in length.
    # @attr last_name [TD::Types::String] Last name of the user.
    # @attr vcard [TD::Types::String] Additional data about the user in a form of vCard; 0-2048 bytes in length.
    # @attr user_id [Integer] Identifier of the user, if known; otherwise 0.
    class Contact < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Phone number of the user.
      attr_accessor phone_number: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # First name of the user; 1-255 characters in length.
      attr_accessor first_name: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Last name of the user.
      attr_accessor last_name: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Additional data about the user in a form of vCard; 0-2048 bytes in length.
      attr_accessor vcard: TD::Types::String

      # Identifier of the user, if known; otherwise 0.
      attr_accessor user_id: Integer
    end

    # Product invoice.
    # 
    # @attr currency [TD::Types::String] ISO 4217 currency code.
    # @attr price_parts [Array<TD::Types::LabeledPricePart>] A list of objects used to calculate the total price of the
    #   product.
    # @attr max_tip_amount [Integer] The maximum allowed amount of tip in the smallest units of the currency.
    # @attr suggested_tip_amounts [Array<Integer>] Suggested amounts of tip in the smallest units of the currency.
    # @attr is_test [Boolean] True, if the payment is a test payment.
    # @attr need_name [Boolean] True, if the user's name is needed for payment.
    # @attr need_phone_number [Boolean] True, if the user's phone number is needed for payment.
    # @attr need_email_address [Boolean] True, if the user's email address is needed for payment.
    # @attr need_shipping_address [Boolean] True, if the user's shipping address is needed for payment.
    # @attr send_phone_number_to_provider [Boolean] True, if the user's phone number will be sent to the provider.
    # @attr send_email_address_to_provider [Boolean] True, if the user's email address will be sent to the provider.
    # @attr is_flexible [Boolean] True, if the total price depends on the shipping method.
    class Invoice < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # ISO 4217 currency code.
      attr_accessor currency: TD::Types::String

      # A list of objects used to calculate the total price of the
      # product.
      attr_accessor price_parts: ::Array[TD::Types::LabeledPricePart]

      # The maximum allowed amount of tip in the smallest units of the currency.
      attr_accessor max_tip_amount: Integer

      # Suggested amounts of tip in the smallest units of the currency.
      attr_accessor suggested_tip_amounts: ::Array[Integer]

      # True, if the payment is a test payment.
      attr_accessor is_test: bool

      # True, if the user's name is needed for payment.
      attr_accessor need_name: bool

      # True, if the user's phone number is needed for payment.
      attr_accessor need_phone_number: bool

      # True, if the user's email address is needed for payment.
      attr_accessor need_email_address: bool

      # True, if the user's shipping address is needed for payment.
      attr_accessor need_shipping_address: bool

      # True, if the user's phone number will be sent to the provider.
      attr_accessor send_phone_number_to_provider: bool

      # True, if the user's email address will be sent to the provider.
      attr_accessor send_email_address_to_provider: bool

      # True, if the total price depends on the shipping method.
      attr_accessor is_flexible: bool
    end

    # Describes a message.
    # 
    # @attr id [Integer] Message identifier; unique for the chat to which the message belongs.
    # @attr sender_id [TD::Types::MessageSender] Identifier of the sender of the message.
    # @attr chat_id [Integer] Chat identifier.
    # @attr sending_state [TD::Types::MessageSendingState, nil] The sending state of the message; may be null.
    # @attr scheduling_state [TD::Types::MessageSchedulingState, nil] The scheduling state of the message; may be null.
    # @attr is_outgoing [Boolean] True, if the message is outgoing.
    # @attr is_pinned [Boolean] True, if the message is pinned.
    # @attr can_be_edited [Boolean] True, if the message can be edited.
    #   For live location and poll messages this fields shows whether editMessageLiveLocation or stopPoll can be used
    #   with this message by the application.
    # @attr can_be_forwarded [Boolean] True, if the message can be forwarded.
    # @attr can_be_saved [Boolean] True, if content of the message can be saved locally or copied.
    # @attr can_be_deleted_only_for_self [Boolean] True, if the message can be deleted only for the current user while
    #   other users will continue to see it.
    # @attr can_be_deleted_for_all_users [Boolean] True, if the message can be deleted for all users.
    # @attr can_get_added_reactions [Boolean] True, if the list of added reactions is available through
    #   getMessageAddedReactions.
    # @attr can_get_statistics [Boolean] True, if the message statistics are available through getMessageStatistics.
    # @attr can_get_message_thread [Boolean] True, if the message thread info is available through getMessageThread.
    # @attr can_get_viewers [Boolean] True, if chat members already viewed the message can be received through
    #   getMessageViewers.
    # @attr can_get_media_timestamp_links [Boolean] True, if media timestamp links can be generated for media timestamp
    #   entities in the message text, caption or web page description through getMessageLink.
    # @attr has_timestamped_media [Boolean] True, if media timestamp entities refers to a media in this message as
    #   opposed to a media in the replied message.
    # @attr is_channel_post [Boolean] True, if the message is a channel post.
    #   All messages to channels are channel posts, all other messages are not channel posts.
    # @attr contains_unread_mention [Boolean] True, if the message contains an unread mention for the current user.
    # @attr date [Integer] Point in time (Unix timestamp) when the message was sent.
    # @attr edit_date [Integer] Point in time (Unix timestamp) when the message was last edited.
    # @attr forward_info [TD::Types::MessageForwardInfo, nil] Information about the initial message sender; may be null.
    # @attr interaction_info [TD::Types::MessageInteractionInfo, nil] Information about interactions with the message;
    #   may be null.
    # @attr unread_reactions [Array<TD::Types::UnreadReaction>] Information about unread reactions added to the message.
    # @attr reply_in_chat_id [Integer] If non-zero, the identifier of the chat to which the replied message belongs;
    #   Currently, only messages in the Replies chat can have different reply_in_chat_id and chat_id.
    # @attr reply_to_message_id [Integer] If non-zero, the identifier of the message this message is replying to; can be
    #   the identifier of a deleted message.
    # @attr message_thread_id [Integer] If non-zero, the identifier of the message thread the message belongs to; unique
    #   within the chat to which the message belongs.
    # @attr ttl [Integer] For self-destructing messages, the message's TTL (Time To Live), in seconds; 0 if none.
    #   TDLib will send {TD::Types::Update::DeleteMessages} or {TD::Types::Update::MessageContent} once the TTL expires.
    # @attr ttl_expires_in [Float] Time left before the message expires, in seconds.
    #   If the TTL timer isn't started yet, equals to the value of the ttl field.
    # @attr via_bot_user_id [Integer] If non-zero, the user identifier of the bot through which this message was sent.
    # @attr author_signature [TD::Types::String, nil] For channel posts and anonymous group messages, optional author
    #   signature.
    # @attr media_album_id [Integer] Unique identifier of an album this message belongs to.
    #   Only audios, documents, photos and videos can be grouped together in albums.
    # @attr restriction_reason [TD::Types::String] If non-empty, contains a human-readable description of the reason why
    #   access to this message must be restricted.
    # @attr content [TD::Types::MessageContent] Content of the message.
    # @attr reply_markup [TD::Types::ReplyMarkup, nil] Reply markup for the message; may be null.
    class Message < TD::Types::Base
      # Message identifier; unique for the chat to which the message belongs.
      attr_accessor id: Integer

      # Identifier of the sender of the message.
      attr_accessor sender_id: TD::Types::MessageSender

      # Chat identifier.
      attr_accessor chat_id: Integer

      # The sending state of the message; may be null.
      attr_accessor sending_state: TD::Types::MessageSendingState?

      # The scheduling state of the message; may be null.
      attr_accessor scheduling_state: TD::Types::MessageSchedulingState?

      # True, if the message is outgoing.
      attr_accessor is_outgoing: bool

      # True, if the message is pinned.
      attr_accessor is_pinned: bool

      # True, if the message can be edited.
      # For live location and poll messages this fields shows whether editMessageLiveLocation or stopPoll can be used
      # with this message by the application.
      attr_accessor can_be_edited: bool

      # True, if the message can be forwarded.
      attr_accessor can_be_forwarded: bool

      # True, if content of the message can be saved locally or copied.
      attr_accessor can_be_saved: bool

      # True, if the message can be deleted only for the current user while
      # other users will continue to see it.
      attr_accessor can_be_deleted_only_for_self: bool

      # True, if the message can be deleted for all users.
      attr_accessor can_be_deleted_for_all_users: bool

      # True, if the list of added reactions is available through
      # getMessageAddedReactions.
      attr_accessor can_get_added_reactions: bool

      # True, if the message statistics are available through getMessageStatistics.
      attr_accessor can_get_statistics: bool

      # True, if the message thread info is available through getMessageThread.
      attr_accessor can_get_message_thread: bool

      # True, if chat members already viewed the message can be received through
      # getMessageViewers.
      attr_accessor can_get_viewers: bool

      # True, if media timestamp links can be generated for media timestamp
      # entities in the message text, caption or web page description through getMessageLink.
      attr_accessor can_get_media_timestamp_links: bool

      # True, if media timestamp entities refers to a media in this message as
      # opposed to a media in the replied message.
      attr_accessor has_timestamped_media: bool

      # True, if the message is a channel post.
      # All messages to channels are channel posts, all other messages are not channel posts.
      attr_accessor is_channel_post: bool

      # True, if the message contains an unread mention for the current user.
      attr_accessor contains_unread_mention: bool

      # Point in time (Unix timestamp) when the message was sent.
      attr_accessor date: Integer

      # Point in time (Unix timestamp) when the message was last edited.
      attr_accessor edit_date: Integer

      # Information about the initial message sender; may be null.
      attr_accessor forward_info: TD::Types::MessageForwardInfo?

      # Information about interactions with the message;
      # may be null.
      attr_accessor interaction_info: TD::Types::MessageInteractionInfo?

      # Information about unread reactions added to the message.
      attr_accessor unread_reactions: ::Array[TD::Types::UnreadReaction]

      # If non-zero, the identifier of the chat to which the replied message belongs;
      # Currently, only messages in the Replies chat can have different reply_in_chat_id and chat_id.
      attr_accessor reply_in_chat_id: Integer

      # If non-zero, the identifier of the message this message is replying to; can be
      # the identifier of a deleted message.
      attr_accessor reply_to_message_id: Integer

      # If non-zero, the identifier of the message thread the message belongs to; unique
      # within the chat to which the message belongs.
      attr_accessor message_thread_id: Integer

      # For self-destructing messages, the message's TTL (Time To Live), in seconds; 0 if none.
      # TDLib will send {TD::Types::Update::DeleteMessages} or {TD::Types::Update::MessageContent} once the TTL expires.
      attr_accessor ttl: Integer

      # Time left before the message expires, in seconds.
      # If the TTL timer isn't started yet, equals to the value of the ttl field.
      attr_accessor ttl_expires_in: Float

      # If non-zero, the user identifier of the bot through which this message was sent.
      attr_accessor via_bot_user_id: Integer

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # For channel posts and anonymous group messages, optional author
      # signature.
      attr_accessor author_signature: TD::Types::String?

      # Unique identifier of an album this message belongs to.
      # Only audios, documents, photos and videos can be grouped together in albums.
      attr_accessor media_album_id: Integer

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # If non-empty, contains a human-readable description of the reason why
      # access to this message must be restricted.
      attr_accessor restriction_reason: TD::Types::String

      # Content of the message.
      attr_accessor content: TD::Types::MessageContent

      # Reply markup for the message; may be null.
      attr_accessor reply_markup: TD::Types::ReplyMarkup?
    end

    # Represents a list of proxy servers.
    # 
    # @attr proxies [Array<TD::Types::Proxy>] List of proxy servers.
    class Proxies < TD::Types::Base
      # List of proxy servers.
      attr_accessor proxies: ::Array[TD::Types::Proxy]
    end

    # Contains a value representing a number of seconds.
    # 
    # @attr seconds [Float] Number of seconds.
    class Seconds < TD::Types::Base
      # Number of seconds.
      attr_accessor seconds: Float
    end

    # Contains information about one session in a Telegram application used by the current user.
    # Sessions must be shown to the user in the returned order.
    # 
    # @attr id [Integer] Session identifier.
    # @attr is_current [Boolean] True, if this session is the current session.
    # @attr is_password_pending [Boolean] True, if a password is needed to complete authorization of the session.
    # @attr can_accept_secret_chats [Boolean] True, if incoming secret chats can be accepted by the session.
    # @attr can_accept_calls [Boolean] True, if incoming calls can be accepted by the session.
    # @attr api_id [Integer] Telegram API identifier, as provided by the application.
    # @attr application_name [TD::Types::String] Name of the application, as provided by the application.
    # @attr application_version [TD::Types::String] The version of the application, as provided by the application.
    # @attr is_official_application [Boolean] True, if the application is an official application or uses the api_id of
    #   an official application.
    # @attr device_model [TD::Types::String] Model of the device the application has been run or is running on, as
    #   provided by the application.
    # @attr platform [TD::Types::String] Operating system the application has been run or is running on, as provided by
    #   the application.
    # @attr system_version [TD::Types::String] Version of the operating system the application has been run or is running
    #   on, as provided by the application.
    # @attr log_in_date [Integer] Point in time (Unix timestamp) when the user has logged in.
    # @attr last_active_date [Integer] Point in time (Unix timestamp) when the session was last used.
    # @attr ip [TD::Types::String] IP address from which the session was created, in human-readable format.
    # @attr country [TD::Types::String] A two-letter country code for the country from which the session was created,
    #   based on the IP address.
    # @attr region [TD::Types::String] Region code from which the session was created, based on the IP address.
    class Session < TD::Types::Base
      # Session identifier.
      attr_accessor id: Integer

      # True, if this session is the current session.
      attr_accessor is_current: bool

      # True, if a password is needed to complete authorization of the session.
      attr_accessor is_password_pending: bool

      # True, if incoming secret chats can be accepted by the session.
      attr_accessor can_accept_secret_chats: bool

      # True, if incoming calls can be accepted by the session.
      attr_accessor can_accept_calls: bool

      # Telegram API identifier, as provided by the application.
      attr_accessor api_id: Integer

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Name of the application, as provided by the application.
      attr_accessor application_name: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # The version of the application, as provided by the application.
      attr_accessor application_version: TD::Types::String

      # True, if the application is an official application or uses the api_id of
      # an official application.
      attr_accessor is_official_application: bool

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Model of the device the application has been run or is running on, as
      # provided by the application.
      attr_accessor device_model: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Operating system the application has been run or is running on, as provided by
      # the application.
      attr_accessor platform: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Version of the operating system the application has been run or is running
      # on, as provided by the application.
      attr_accessor system_version: TD::Types::String

      # Point in time (Unix timestamp) when the user has logged in.
      attr_accessor log_in_date: Integer

      # Point in time (Unix timestamp) when the session was last used.
      attr_accessor last_active_date: Integer

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # IP address from which the session was created, in human-readable format.
      attr_accessor ip: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # A two-letter country code for the country from which the session was created,
      # based on the IP address.
      attr_accessor country: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Region code from which the session was created, based on the IP address.
      attr_accessor region: TD::Types::String
    end

    # Describes a sticker.
    # 
    # @attr set_id [Integer] The identifier of the sticker set to which the sticker belongs; 0 if none.
    # @attr width [Integer] Sticker width; as defined by the sender.
    # @attr height [Integer] Sticker height; as defined by the sender.
    # @attr emoji [TD::Types::String] Emoji corresponding to the sticker.
    # @attr type [TD::Types::StickerType] Sticker type.
    # @attr outline [Array<TD::Types::ClosedVectorPath>, nil] Sticker's outline represented as a list of closed vector
    #   paths; may be empty.
    #   The coordinate system origin is in the upper-left corner.
    # @attr thumbnail [TD::Types::Thumbnail, nil] Sticker thumbnail in WEBP or JPEG format; may be null.
    # @attr sticker [TD::Types::File] File containing the sticker.
    class Sticker < TD::Types::Base
      # The identifier of the sticker set to which the sticker belongs; 0 if none.
      attr_accessor set_id: Integer

      # Sticker width; as defined by the sender.
      attr_accessor width: Integer

      # Sticker height; as defined by the sender.
      attr_accessor height: Integer

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Emoji corresponding to the sticker.
      attr_accessor emoji: TD::Types::String

      # Sticker type.
      attr_accessor type: TD::Types::StickerType

      # Sticker's outline represented as a list of closed vector
      # paths; may be empty.
      # The coordinate system origin is in the upper-left corner.
      attr_accessor outline: ::Array[TD::Types::ClosedVectorPath]?

      # Sticker thumbnail in WEBP or JPEG format; may be null.
      attr_accessor thumbnail: TD::Types::Thumbnail?

      # File containing the sticker.
      attr_accessor sticker: TD::Types::File
    end

    # Contains a list of updates.
    # 
    # @attr updates [Array<TD::Types::Update>] List of updates.
    class Updates < TD::Types::Base
      # List of updates.
      attr_accessor updates: ::Array[TD::Types::Update]
    end

    # Describes a document of any type.
    # 
    # @attr file_name [TD::Types::String] Original name of the file; as defined by the sender.
    # @attr mime_type [TD::Types::String] MIME type of the file; as defined by the sender.
    # @attr minithumbnail [TD::Types::Minithumbnail, nil] Document minithumbnail; may be null.
    # @attr thumbnail [TD::Types::Thumbnail, nil] Document thumbnail in JPEG or PNG format (PNG will be used only for
    #   background patterns); as defined by the sender; may be null.
    # @attr document [TD::Types::File] File containing the document.
    class Document < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Original name of the file; as defined by the sender.
      attr_accessor file_name: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # MIME type of the file; as defined by the sender.
      attr_accessor mime_type: TD::Types::String

      # Document minithumbnail; may be null.
      attr_accessor minithumbnail: TD::Types::Minithumbnail?

      # Document thumbnail in JPEG or PNG format (PNG will be used only for
      # background patterns); as defined by the sender; may be null.
      attr_accessor thumbnail: TD::Types::Thumbnail?

      # File containing the document.
      attr_accessor document: TD::Types::File
    end

    # Contains a list of hashtags.
    # 
    # @attr hashtags [Array<TD::Types::String>] A list of hashtags.
    class Hashtags < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # A list of hashtags.
      attr_accessor hashtags: ::Array[TD::Types::String]
    end

    # Contains an HTTP URL.
    # 
    # @attr url [TD::Types::String] The URL.
    class HttpUrl < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # The URL.
      attr_accessor url: TD::Types::String
    end

    # Describes a location on planet Earth.
    # 
    # @attr latitude [Float] Latitude of the location in degrees; as defined by the sender.
    # @attr longitude [Float] Longitude of the location, in degrees; as defined by the sender.
    # @attr horizontal_accuracy [Float] The estimated horizontal accuracy of the location, in meters; as defined by the
    #   sender.
    #   0 if unknown.
    class Location < TD::Types::Base
      # Latitude of the location in degrees; as defined by the sender.
      attr_accessor latitude: Float

      # Longitude of the location, in degrees; as defined by the sender.
      attr_accessor longitude: Float

      # The estimated horizontal accuracy of the location, in meters; as defined by the
      # sender.
      # 0 if unknown.
      attr_accessor horizontal_accuracy: Float
    end

    # Contains a list of available TDLib internal log tags.
    # 
    # @attr tags [Array<TD::Types::String>] List of log tags.
    class LogTags < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # List of log tags.
      attr_accessor tags: ::Array[TD::Types::String]
    end

    # Contains a list of messages.
    # 
    # @attr total_count [Integer] Approximate total count of messages found.
    # @attr messages [Array<TD::Types::Message>, nil] List of messages; messages may be null.
    class Messages < TD::Types::Base
      # Approximate total count of messages found.
      attr_accessor total_count: Integer

      # List of messages; messages may be null.
      attr_accessor messages: ::Array[TD::Types::Message]?
    end

    # Contains stickers which must be used for reaction animation rendering.
    # 
    # @attr reaction [TD::Types::String] Text representation of the reaction.
    # @attr title [TD::Types::String] Reaction title.
    # @attr is_active [Boolean] True, if the reaction can be added to new messages and enabled in chats.
    # @attr static_icon [TD::Types::Sticker] Static icon for the reaction.
    # @attr appear_animation [TD::Types::Sticker] Appear animation for the reaction.
    # @attr select_animation [TD::Types::Sticker] Select animation for the reaction.
    # @attr activate_animation [TD::Types::Sticker] Activate animation for the reaction.
    # @attr effect_animation [TD::Types::Sticker] Effect animation for the reaction.
    # @attr around_animation [TD::Types::Sticker, nil] Around animation for the reaction; may be null.
    # @attr center_animation [TD::Types::Sticker, nil] Center animation for the reaction; may be null.
    class Reaction < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Text representation of the reaction.
      attr_accessor reaction: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Reaction title.
      attr_accessor title: TD::Types::String

      # True, if the reaction can be added to new messages and enabled in chats.
      attr_accessor is_active: bool

      # Static icon for the reaction.
      attr_accessor static_icon: TD::Types::Sticker

      # Appear animation for the reaction.
      attr_accessor appear_animation: TD::Types::Sticker

      # Select animation for the reaction.
      attr_accessor select_animation: TD::Types::Sticker

      # Activate animation for the reaction.
      attr_accessor activate_animation: TD::Types::Sticker

      # Effect animation for the reaction.
      attr_accessor effect_animation: TD::Types::Sticker

      # Around animation for the reaction; may be null.
      attr_accessor around_animation: TD::Types::Sticker?

      # Center animation for the reaction; may be null.
      attr_accessor center_animation: TD::Types::Sticker?
    end

    # Contains a list of sessions.
    # 
    # @attr sessions [Array<TD::Types::Session>] List of sessions.
    # @attr inactive_session_ttl_days [Integer] Number of days of inactivity before sessions will automatically be
    #   terminated; 1-366 days.
    class Sessions < TD::Types::Base
      # List of sessions.
      attr_accessor sessions: ::Array[TD::Types::Session]

      # Number of days of inactivity before sessions will automatically be
      # terminated; 1-366 days.
      attr_accessor inactive_session_ttl_days: Integer
    end

    # Represents a list of stickers.
    # 
    # @attr stickers [Array<TD::Types::Sticker>] List of stickers.
    class Stickers < TD::Types::Base
      # List of stickers.
      attr_accessor stickers: ::Array[TD::Types::Sticker]
    end

    # Represents a URL linking to an internal Telegram entity.
    # 
    # @attr url [TD::Types::String] URL.
    # @attr type [TD::Types::TMeUrlType] Type of the URL.
    class TMeUrl < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # URL.
      attr_accessor url: TD::Types::String

      # Type of the URL.
      attr_accessor type: TD::Types::TMeUrlType
    end

    # Describes a web page preview.
    # 
    # @attr url [TD::Types::String] Original URL of the link.
    # @attr display_url [TD::Types::String] URL to display.
    # @attr type [TD::Types::String] Type of the web page.
    #   Can be: article, photo, audio, video, document, profile, app, or something else.
    # @attr site_name [TD::Types::String] Short name of the site (e.g., Google Docs, App Store).
    # @attr title [TD::Types::String] Title of the content.
    # @attr description [TD::Types::FormattedText] Description of the content.
    # @attr photo [TD::Types::Photo, nil] Image representing the content; may be null.
    # @attr embed_url [TD::Types::String] URL to show in the embedded preview.
    # @attr embed_type [TD::Types::String] MIME type of the embedded preview, (e.g., text/html or video/mp4).
    # @attr embed_width [Integer] Width of the embedded preview.
    # @attr embed_height [Integer] Height of the embedded preview.
    # @attr duration [Integer] Duration of the content, in seconds.
    # @attr author [TD::Types::String] Author of the content.
    # @attr animation [TD::Types::Animation, nil] Preview of the content as an animation, if available; may be null.
    # @attr audio [TD::Types::Audio, nil] Preview of the content as an audio file, if available; may be null.
    # @attr document [TD::Types::Document, nil] Preview of the content as a document, if available; may be null.
    # @attr sticker [TD::Types::Sticker, nil] Preview of the content as a sticker for small WEBP files, if available; may
    #   be null.
    # @attr video [TD::Types::Video, nil] Preview of the content as a video, if available; may be null.
    # @attr video_note [TD::Types::VideoNote, nil] Preview of the content as a video note, if available; may be null.
    # @attr voice_note [TD::Types::VoiceNote, nil] Preview of the content as a voice note, if available; may be null.
    # @attr instant_view_version [Integer] Version of instant view, available for the web page (currently, can be 1 or
    #   2), 0 if none.
    class WebPage < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Original URL of the link.
      attr_accessor url: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # URL to display.
      attr_accessor display_url: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Type of the web page.
      # Can be: article, photo, audio, video, document, profile, app, or something else.
      attr_accessor type: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Short name of the site (e.g., Google Docs, App Store).
      attr_accessor site_name: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Title of the content.
      attr_accessor title: TD::Types::String

      # Description of the content.
      attr_accessor description: TD::Types::FormattedText

      # Image representing the content; may be null.
      attr_accessor photo: TD::Types::Photo?

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # URL to show in the embedded preview.
      attr_accessor embed_url: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # MIME type of the embedded preview, (e.g., text/html or video/mp4).
      attr_accessor embed_type: TD::Types::String

      # Width of the embedded preview.
      attr_accessor embed_width: Integer

      # Height of the embedded preview.
      attr_accessor embed_height: Integer

      # Duration of the content, in seconds.
      attr_accessor duration: Integer

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Author of the content.
      attr_accessor author: TD::Types::String

      # Preview of the content as an animation, if available; may be null.
      attr_accessor animation: TD::Types::Animation?

      # Preview of the content as an audio file, if available; may be null.
      attr_accessor audio: TD::Types::Audio?

      # Preview of the content as a document, if available; may be null.
      attr_accessor document: TD::Types::Document?

      # Preview of the content as a sticker for small WEBP files, if available; may
      # be null.
      attr_accessor sticker: TD::Types::Sticker?

      # Preview of the content as a video, if available; may be null.
      attr_accessor video: TD::Types::Video?

      # Preview of the content as a video note, if available; may be null.
      attr_accessor video_note: TD::Types::VideoNote?

      # Preview of the content as a voice note, if available; may be null.
      attr_accessor voice_note: TD::Types::VoiceNote?

      # Version of instant view, available for the web page (currently, can be 1 or
      # 2), 0 if none.
      attr_accessor instant_view_version: Integer
    end

    # Describes an animation file.
    # The animation must be encoded in GIF or MPEG4 format.
    # 
    # @attr duration [Integer] Duration of the animation, in seconds; as defined by the sender.
    # @attr width [Integer] Width of the animation.
    # @attr height [Integer] Height of the animation.
    # @attr file_name [TD::Types::String] Original name of the file; as defined by the sender.
    # @attr mime_type [TD::Types::String] MIME type of the file, usually "image/gif" or "video/mp4".
    # @attr has_stickers [Boolean] True, if stickers were added to the animation.
    #   The list of corresponding sticker set can be received using getAttachedStickerSets.
    # @attr minithumbnail [TD::Types::Minithumbnail, nil] Animation minithumbnail; may be null.
    # @attr thumbnail [TD::Types::Thumbnail, nil] Animation thumbnail in JPEG or MPEG4 format; may be null.
    # @attr animation [TD::Types::File] File containing the animation.
    class Animation < TD::Types::Base
      # Duration of the animation, in seconds; as defined by the sender.
      attr_accessor duration: Integer

      # Width of the animation.
      attr_accessor width: Integer

      # Height of the animation.
      attr_accessor height: Integer

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Original name of the file; as defined by the sender.
      attr_accessor file_name: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # MIME type of the file, usually "image/gif" or "video/mp4".
      attr_accessor mime_type: TD::Types::String

      # True, if stickers were added to the animation.
      # The list of corresponding sticker set can be received using getAttachedStickerSets.
      attr_accessor has_stickers: bool

      # Animation minithumbnail; may be null.
      attr_accessor minithumbnail: TD::Types::Minithumbnail?

      # Animation thumbnail in JPEG or MPEG4 format; may be null.
      attr_accessor thumbnail: TD::Types::Thumbnail?

      # File containing the animation.
      attr_accessor animation: TD::Types::File
    end

    # Describes a list of chats.
    class ChatList < TD::Types::Base
      # A main list of chats.
      class Main < TD::Types::ChatList
      end

      # A list of chats belonging to a chat filter.
      # 
      # @attr chat_filter_id [Integer] Chat filter identifier.
      class Filter < TD::Types::ChatList
        # Chat filter identifier.
        attr_accessor chat_filter_id: Integer
      end

      # A list of chats usually located at the top of the main chat list.
      # Unmuted chats are automatically moved from the Archive to the Main chat list when a new message arrives.
      class Archive < TD::Types::ChatList
      end
    end

    # Describes the type of a chat.
    class ChatType < TD::Types::Base
      # A secret chat with a user.
      # 
      # @attr secret_chat_id [Integer] Secret chat identifier.
      # @attr user_id [Integer] User identifier of the secret chat peer.
      class Secret < TD::Types::ChatType
        # Secret chat identifier.
        attr_accessor secret_chat_id: Integer

        # User identifier of the secret chat peer.
        attr_accessor user_id: Integer
      end

      # An ordinary chat with a user.
      # 
      # @attr user_id [Integer] User identifier.
      class Private < TD::Types::ChatType
        # User identifier.
        attr_accessor user_id: Integer
      end

      # A supergroup or channel (with unlimited members).
      # 
      # @attr supergroup_id [Integer] Supergroup or channel identifier.
      # @attr is_channel [Boolean] True, if the supergroup is a channel.
      class Supergroup < TD::Types::ChatType
        # Supergroup or channel identifier.
        attr_accessor supergroup_id: Integer

        # True, if the supergroup is a channel.
        attr_accessor is_channel: bool
      end

      # A basic group (a chat with 0-200 other users).
      # 
      # @attr basic_group_id [Integer] Basic group identifier.
      class BasicGroup < TD::Types::ChatType
        # Basic group identifier.
        attr_accessor basic_group_id: Integer
      end
    end

    # Contains information about countries.
    # 
    # @attr countries [Array<TD::Types::CountryInfo>] The list of countries.
    class Countries < TD::Types::Base
      # The list of countries.
      attr_accessor countries: ::Array[TD::Types::CountryInfo]
    end

    # Contains a part of a file.
    # 
    # @attr data [String] File bytes.
    class FilePart < TD::Types::Base
      # File bytes.
      attr_accessor data: String
    end

    # Represents the type of a file.
    class FileType < TD::Types::Base
      # The data is not a file.
      class None < TD::Types::FileType
      end

      # The file is an audio file.
      class Audio < TD::Types::FileType
      end

      # The file is a photo.
      class Photo < TD::Types::FileType
      end

      # The file is a video.
      class Video < TD::Types::FileType
      end

      # The file was sent to a secret chat (the file type is not known to the server).
      class Secret < TD::Types::FileType
      end

      # The file is a file from Secure storage used for storing Telegram Passport files.
      class Secure < TD::Types::FileType
      end

      # The file is a sticker.
      class Sticker < TD::Types::FileType
      end

      # The file type is not yet known.
      class Unknown < TD::Types::FileType
      end

      # The file is a document.
      class Document < TD::Types::FileType
      end

      # The file is an animation.
      class Animation < TD::Types::FileType
      end

      # The file is a thumbnail of another file.
      class Thumbnail < TD::Types::FileType
      end

      # The file is a wallpaper or a background pattern.
      class Wallpaper < TD::Types::FileType
      end

      # The file is a video note.
      class VideoNote < TD::Types::FileType
      end

      # The file is a voice note.
      class VoiceNote < TD::Types::FileType
      end

      # The file is a profile photo.
      class ProfilePhoto < TD::Types::FileType
      end

      # The file is a thumbnail of a file from a secret chat.
      class SecretThumbnail < TD::Types::FileType
      end
    end

    # Describes the type of a poll.
    class PollType < TD::Types::Base
      # A poll in quiz mode, which has exactly one correct answer option and can be answered only once.
      # 
      # @attr correct_option_id [Integer] 0-based identifier of the correct answer option; -1 for a yet unanswered poll.
      # @attr explanation [TD::Types::FormattedText, nil] Text that is shown when the user chooses an incorrect answer or
      #   taps on the lamp icon; 0-200 characters with at most 2 line feeds; empty for a yet unanswered poll.
      class Quiz < TD::Types::PollType
        # 0-based identifier of the correct answer option; -1 for a yet unanswered poll.
        attr_accessor correct_option_id: Integer

        # Text that is shown when the user chooses an incorrect answer or
        # taps on the lamp icon; 0-200 characters with at most 2 line feeds; empty for a yet unanswered poll.
        attr_accessor explanation: TD::Types::FormattedText?
      end

      # A regular poll.
      # 
      # @attr allow_multiple_answers [Boolean] True, if multiple answer options can be chosen simultaneously.
      class Regular < TD::Types::PollType
        # True, if multiple answer options can be chosen simultaneously.
        attr_accessor allow_multiple_answers: bool
      end
    end

    # Describes a text object inside an instant-view web page.
    class RichText < TD::Types::Base
      # A concatenation of rich texts.
      # 
      # @attr texts [Array<TD::Types::RichText>] Texts.
      class S < TD::Types::RichText
        # Texts.
        attr_accessor texts: ::Array[TD::Types::RichText]
      end

      # A rich text URL link.
      # 
      # @attr text [TD::Types::RichText] Text.
      # @attr url [TD::Types::String] URL.
      # @attr is_cached [Boolean] True, if the URL has cached instant view server-side.
      class Url < TD::Types::RichText
        # Text.
        attr_accessor text: TD::Types::RichText

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # URL.
        attr_accessor url: TD::Types::String

        # True, if the URL has cached instant view server-side.
        attr_accessor is_cached: bool
      end

      # A bold rich text.
      # 
      # @attr text [TD::Types::RichText] Text.
      class Bold < TD::Types::RichText
        # Text.
        attr_accessor text: TD::Types::RichText
      end

      # A small image inside the text.
      # 
      # @attr document [TD::Types::Document] The image represented as a document.
      #   The image can be in GIF, JPEG or PNG format.
      # @attr width [Integer] Width of a bounding box in which the image must be shown; 0 if unknown.
      # @attr height [Integer] Height of a bounding box in which the image must be shown; 0 if unknown.
      class Icon < TD::Types::RichText
        # The image represented as a document.
        # The image can be in GIF, JPEG or PNG format.
        attr_accessor document: TD::Types::Document

        # Width of a bounding box in which the image must be shown; 0 if unknown.
        attr_accessor width: Integer

        # Height of a bounding box in which the image must be shown; 0 if unknown.
        attr_accessor height: Integer
      end

      # A fixed-width rich text.
      # 
      # @attr text [TD::Types::RichText] Text.
      class Fixed < TD::Types::RichText
        # Text.
        attr_accessor text: TD::Types::RichText
      end

      # A plain text.
      # 
      # @attr text [TD::Types::String] Text.
      class Plain < TD::Types::RichText
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Text.
        attr_accessor text: TD::Types::String
      end

      # An anchor.
      # 
      # @attr name [TD::Types::String] Anchor name.
      class Anchor < TD::Types::RichText
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Anchor name.
        attr_accessor name: TD::Types::String
      end

      # An italicized rich text.
      # 
      # @attr text [TD::Types::RichText] Text.
      class Italic < TD::Types::RichText
        # Text.
        attr_accessor text: TD::Types::RichText
      end

      # A marked rich text.
      # 
      # @attr text [TD::Types::RichText] Text.
      class Marked < TD::Types::RichText
        # Text.
        attr_accessor text: TD::Types::RichText
      end

      # A reference to a richTexts object on the same web page.
      # 
      # @attr text [TD::Types::RichText] The text.
      # @attr anchor_name [TD::Types::String] The name of a {TD::Types::RichText::Anchor} object, which is the first
      #   element of the target {TD::Types::RichText::s} object.
      # @attr url [TD::Types::String] An HTTP URL, opening the reference.
      class Reference < TD::Types::RichText
        # The text.
        attr_accessor text: TD::Types::RichText

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # The name of a {TD::Types::RichText::Anchor} object, which is the first
        # element of the target {TD::Types::RichText::s} object.
        attr_accessor anchor_name: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # An HTTP URL, opening the reference.
        attr_accessor url: TD::Types::String
      end

      # A subscript rich text.
      # 
      # @attr text [TD::Types::RichText] Text.
      class Subscript < TD::Types::RichText
        # Text.
        attr_accessor text: TD::Types::RichText
      end

      # An underlined rich text.
      # 
      # @attr text [TD::Types::RichText] Text.
      class Underline < TD::Types::RichText
        # Text.
        attr_accessor text: TD::Types::RichText
      end

      # A link to an anchor on the same web page.
      # 
      # @attr text [TD::Types::RichText] The link text.
      # @attr anchor_name [TD::Types::String] The anchor name.
      #   If the name is empty, the link must bring back to top.
      # @attr url [TD::Types::String] An HTTP URL, opening the anchor.
      class AnchorLink < TD::Types::RichText
        # The link text.
        attr_accessor text: TD::Types::RichText

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # The anchor name.
        # If the name is empty, the link must bring back to top.
        attr_accessor anchor_name: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # An HTTP URL, opening the anchor.
        attr_accessor url: TD::Types::String
      end

      # A superscript rich text.
      # 
      # @attr text [TD::Types::RichText] Text.
      class Superscript < TD::Types::RichText
        # Text.
        attr_accessor text: TD::Types::RichText
      end

      # A rich text phone number.
      # 
      # @attr text [TD::Types::RichText] Text.
      # @attr phone_number [TD::Types::String] Phone number.
      class PhoneNumber < TD::Types::RichText
        # Text.
        attr_accessor text: TD::Types::RichText

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Phone number.
        attr_accessor phone_number: TD::Types::String
      end

      # A rich text email link.
      # 
      # @attr text [TD::Types::RichText] Text.
      # @attr email_address [TD::Types::String] Email address.
      class EmailAddress < TD::Types::RichText
        # Text.
        attr_accessor text: TD::Types::RichText

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Email address.
        attr_accessor email_address: TD::Types::String
      end

      # A strikethrough rich text.
      # 
      # @attr text [TD::Types::RichText] Text.
      class Strikethrough < TD::Types::RichText
        # Text.
        attr_accessor text: TD::Types::RichText
      end
    end

    # Contains a list of t.me URLs.
    # 
    # @attr urls [Array<TD::Types::TMeUrl>] List of URLs.
    class TMeUrls < TD::Types::Base
      # List of URLs.
      attr_accessor urls: ::Array[TD::Types::TMeUrl]
    end

    # Represents a thumbnail.
    # 
    # @attr format [TD::Types::ThumbnailFormat] Thumbnail format.
    # @attr width [Integer] Thumbnail width.
    # @attr height [Integer] Thumbnail height.
    # @attr file [TD::Types::File] The thumbnail.
    class Thumbnail < TD::Types::Base
      # Thumbnail format.
      attr_accessor format: TD::Types::ThumbnailFormat

      # Thumbnail width.
      attr_accessor width: Integer

      # Thumbnail height.
      attr_accessor height: Integer

      # The thumbnail.
      attr_accessor file: TD::Types::File
    end

    # Represents the type of a user.
    # The following types are possible: regular users, deleted users and bots.
    class UserType < TD::Types::Base
      # A bot (see https://core.telegram.org/bots).
      # 
      # @attr can_join_groups [Boolean] True, if the bot can be invited to basic group and supergroup chats.
      # @attr can_read_all_group_messages [Boolean] True, if the bot can read all messages in basic group or supergroup
      #   chats and not just those addressed to the bot.
      #   In private and channel chats a bot can always read all messages.
      # @attr is_inline [Boolean] True, if the bot supports inline queries.
      # @attr inline_query_placeholder [TD::Types::String] Placeholder for inline queries (displayed on the application
      #   input field).
      # @attr need_location [Boolean] True, if the location of the user is expected to be sent with every inline query to
      #   this bot.
      class Bot < TD::Types::UserType
        # True, if the bot can be invited to basic group and supergroup chats.
        attr_accessor can_join_groups: bool

        # True, if the bot can read all messages in basic group or supergroup
        # chats and not just those addressed to the bot.
        # In private and channel chats a bot can always read all messages.
        attr_accessor can_read_all_group_messages: bool

        # True, if the bot supports inline queries.
        attr_accessor is_inline: bool

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Placeholder for inline queries (displayed on the application
        # input field).
        attr_accessor inline_query_placeholder: TD::Types::String

        # True, if the location of the user is expected to be sent with every inline query to
        # this bot.
        attr_accessor need_location: bool
      end

      # A deleted user or deleted bot.
      # No information on the user besides the user identifier is available.
      # It is not possible to perform any active actions on this type of user.
      class Deleted < TD::Types::UserType
      end

      # A regular user.
      class Regular < TD::Types::UserType
      end

      # No information on the user besides the user identifier is available, yet this user has not been deleted.
      # This object is extremely rare and must be handled like a deleted user.
      # It is not possible to perform any actions on users of this type.
      class Unknown < TD::Types::UserType
      end
    end

    # Represents a list of animations.
    # 
    # @attr animations [Array<TD::Types::Animation>] List of animations.
    class Animations < TD::Types::Base
      # List of animations.
      attr_accessor animations: ::Array[TD::Types::Animation]
    end

    # Describes a chat background.
    # 
    # @attr id [Integer] Unique background identifier.
    # @attr is_default [Boolean] True, if this is one of default backgrounds.
    # @attr is_dark [Boolean] True, if the background is dark and is recommended to be used with dark theme.
    # @attr name [TD::Types::String] Unique background name.
    # @attr document [TD::Types::Document, nil] Document with the background; may be null.
    #   Null only for filled backgrounds.
    # @attr type [TD::Types::BackgroundType] Type of the background.
    class Background < TD::Types::Base
      # Unique background identifier.
      attr_accessor id: Integer

      # True, if this is one of default backgrounds.
      attr_accessor is_default: bool

      # True, if the background is dark and is recommended to be used with dark theme.
      attr_accessor is_dark: bool

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Unique background name.
      attr_accessor name: TD::Types::String

      # Document with the background; may be null.
      # Null only for filled backgrounds.
      attr_accessor document: TD::Types::Document?

      # Type of the background.
      attr_accessor type: TD::Types::BackgroundType
    end

    # Describes the current call state.
    class CallState < TD::Types::Base
      # The call has ended with an error.
      # 
      # @attr error [TD::Types::Error] Error.
      #   An error with the code 4005000 will be returned if an outgoing call is missed because of an expired timeout.
      class Error < TD::Types::CallState
        # Error.
        # An error with the code 4005000 will be returned if an outgoing call is missed because of an expired timeout.
        attr_accessor error: TD::Types::Error
      end

      # The call is ready to use.
      # 
      # @attr protocol [TD::Types::CallProtocol] Call protocols supported by the peer.
      # @attr servers [Array<TD::Types::CallServer>] List of available call servers.
      # @attr config [TD::Types::String] A JSON-encoded call config.
      # @attr encryption_key [String] Call encryption key.
      # @attr emojis [Array<TD::Types::String>] Encryption key emojis fingerprint.
      # @attr allow_p2p [Boolean] True, if peer-to-peer connection is allowed by users privacy settings.
      class Ready < TD::Types::CallState
        # Call protocols supported by the peer.
        attr_accessor protocol: TD::Types::CallProtocol

        # List of available call servers.
        attr_accessor servers: ::Array[TD::Types::CallServer]

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # A JSON-encoded call config.
        attr_accessor config: TD::Types::String

        # Call encryption key.
        attr_accessor encryption_key: String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Encryption key emojis fingerprint.
        attr_accessor emojis: ::Array[TD::Types::String]

        # True, if peer-to-peer connection is allowed by users privacy settings.
        attr_accessor allow_p2p: bool
      end

      # The call is pending, waiting to be accepted by a user.
      # 
      # @attr is_created [Boolean] True, if the call has already been created by the server.
      # @attr is_received [Boolean] True, if the call has already been received by the other party.
      class Pending < TD::Types::CallState
        # True, if the call has already been created by the server.
        attr_accessor is_created: bool

        # True, if the call has already been received by the other party.
        attr_accessor is_received: bool
      end

      # The call has ended successfully.
      # 
      # @attr reason [TD::Types::CallDiscardReason] The reason, why the call has ended.
      # @attr need_rating [Boolean] True, if the call rating must be sent to the server.
      # @attr need_debug_information [Boolean] True, if the call debug information must be sent to the server.
      class Discarded < TD::Types::CallState
        # The reason, why the call has ended.
        attr_accessor reason: TD::Types::CallDiscardReason

        # True, if the call rating must be sent to the server.
        attr_accessor need_rating: bool

        # True, if the call debug information must be sent to the server.
        attr_accessor need_debug_information: bool
      end

      # The call is hanging up after discardCall has been called.
      class HangingUp < TD::Types::CallState
      end

      # The call has been answered and encryption keys are being exchanged.
      class ExchangingKeys < TD::Types::CallState
      end
    end

    # Represents a chat event.
    # 
    # @attr id [Integer] Chat event identifier.
    # @attr date [Integer] Point in time (Unix timestamp) when the event happened.
    # @attr member_id [TD::Types::MessageSender] Identifier of the user or chat who performed the action.
    # @attr action [TD::Types::ChatEventAction] The action.
    class ChatEvent < TD::Types::Base
      # Chat event identifier.
      attr_accessor id: Integer

      # Point in time (Unix timestamp) when the event happened.
      attr_accessor date: Integer

      # Identifier of the user or chat who performed the action.
      attr_accessor member_id: TD::Types::MessageSender

      # The action.
      attr_accessor action: TD::Types::ChatEventAction
    end

    # Contains a list of chat lists.
    # 
    # @attr chat_lists [Array<TD::Types::ChatList>] List of chat lists.
    class ChatLists < TD::Types::Base
      # List of chat lists.
      attr_accessor chat_lists: ::Array[TD::Types::ChatList]
    end

    # Describes a chat or user profile photo.
    # 
    # @attr id [Integer] Unique photo identifier.
    # @attr added_date [Integer] Point in time (Unix timestamp) when the photo has been added.
    # @attr minithumbnail [TD::Types::Minithumbnail, nil] Photo minithumbnail; may be null.
    # @attr sizes [Array<TD::Types::PhotoSize>] Available variants of the photo in JPEG format, in different size.
    # @attr animation [TD::Types::AnimatedChatPhoto, nil] Animated variant of the photo in MPEG4 format; may be null.
    class ChatPhoto < TD::Types::Base
      # Unique photo identifier.
      attr_accessor id: Integer

      # Point in time (Unix timestamp) when the photo has been added.
      attr_accessor added_date: Integer

      # Photo minithumbnail; may be null.
      attr_accessor minithumbnail: TD::Types::Minithumbnail?

      # Available variants of the photo in JPEG format, in different size.
      attr_accessor sizes: ::Array[TD::Types::PhotoSize]

      # Animated variant of the photo in MPEG4 format; may be null.
      attr_accessor animation: TD::Types::AnimatedChatPhoto?
    end

    # Describes a chat theme.
    # 
    # @attr name [TD::Types::String] Theme name.
    # @attr light_settings [TD::Types::ThemeSettings] Theme settings for a light chat theme.
    # @attr dark_settings [TD::Types::ThemeSettings] Theme settings for a dark chat theme.
    class ChatTheme < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Theme name.
      attr_accessor name: TD::Types::String

      # Theme settings for a light chat theme.
      attr_accessor light_settings: TD::Types::ThemeSettings

      # Theme settings for a dark chat theme.
      attr_accessor dark_settings: TD::Types::ThemeSettings
    end

    # Represents a date range.
    # 
    # @attr start_date [Integer] Point in time (Unix timestamp) at which the date range begins.
    # @attr end_date [Integer] Point in time (Unix timestamp) at which the date range ends.
    class DateRange < TD::Types::Base
      # Point in time (Unix timestamp) at which the date range begins.
      attr_accessor start_date: Integer

      # Point in time (Unix timestamp) at which the date range ends.
      attr_accessor end_date: Integer
    end

    # File with the date it was uploaded.
    # 
    # @attr file [TD::Types::File] The file.
    # @attr date [Integer] Point in time (Unix timestamp) when the file was uploaded.
    class DatedFile < TD::Types::Base
      # The file.
      attr_accessor file: TD::Types::File

      # Point in time (Unix timestamp) when the file was uploaded.
      attr_accessor date: Integer
    end

    # Describes a group call.
    # 
    # @attr id [Integer] Group call identifier.
    # @attr title [TD::Types::String] Group call title.
    # @attr scheduled_start_date [Integer] Point in time (Unix timestamp) when the group call is supposed to be started
    #   by an administrator; 0 if it is already active or was ended.
    # @attr enabled_start_notification [Boolean] True, if the group call is scheduled and the current user will receive a
    #   notification when the group call will start.
    # @attr is_active [Boolean] True, if the call is active.
    # @attr is_joined [Boolean] True, if the call is joined.
    # @attr need_rejoin [Boolean] True, if user was kicked from the call because of network loss and the call needs to be
    #   rejoined.
    # @attr can_be_managed [Boolean] True, if the current user can manage the group call.
    # @attr participant_count [Integer] Number of participants in the group call.
    # @attr loaded_all_participants [Boolean] True, if all group call participants are loaded.
    # @attr recent_speakers [Array<TD::Types::GroupCallRecentSpeaker>] At most 3 recently speaking users in the group
    #   call.
    # @attr is_my_video_enabled [Boolean] True, if the current user's video is enabled.
    # @attr is_my_video_paused [Boolean] True, if the current user's video is paused.
    # @attr can_enable_video [Boolean] True, if the current user can broadcast video or share screen.
    # @attr mute_new_participants [Boolean] True, if only group call administrators can unmute new participants.
    # @attr can_toggle_mute_new_participants [Boolean] True, if the current user can enable or disable
    #   mute_new_participants setting.
    # @attr record_duration [Integer] Duration of the ongoing group call recording, in seconds; 0 if none.
    #   An {TD::Types::Update::GroupCall} update is not triggered when value of this field changes, but the same
    #   recording goes on.
    # @attr is_video_recorded [Boolean] True, if a video file is being recorded for the call.
    # @attr duration [Integer] Call duration, in seconds; for ended calls only.
    class GroupCall < TD::Types::Base
      # Group call identifier.
      attr_accessor id: Integer

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Group call title.
      attr_accessor title: TD::Types::String

      # Point in time (Unix timestamp) when the group call is supposed to be started
      # by an administrator; 0 if it is already active or was ended.
      attr_accessor scheduled_start_date: Integer

      # True, if the group call is scheduled and the current user will receive a
      # notification when the group call will start.
      attr_accessor enabled_start_notification: bool

      # True, if the call is active.
      attr_accessor is_active: bool

      # True, if the call is joined.
      attr_accessor is_joined: bool

      # True, if user was kicked from the call because of network loss and the call needs to be
      # rejoined.
      attr_accessor need_rejoin: bool

      # True, if the current user can manage the group call.
      attr_accessor can_be_managed: bool

      # Number of participants in the group call.
      attr_accessor participant_count: Integer

      # True, if all group call participants are loaded.
      attr_accessor loaded_all_participants: bool

      # At most 3 recently speaking users in the group
      # call.
      attr_accessor recent_speakers: ::Array[TD::Types::GroupCallRecentSpeaker]

      # True, if the current user's video is enabled.
      attr_accessor is_my_video_enabled: bool

      # True, if the current user's video is paused.
      attr_accessor is_my_video_paused: bool

      # True, if the current user can broadcast video or share screen.
      attr_accessor can_enable_video: bool

      # True, if only group call administrators can unmute new participants.
      attr_accessor mute_new_participants: bool

      # True, if the current user can enable or disable
      # mute_new_participants setting.
      attr_accessor can_toggle_mute_new_participants: bool

      # Duration of the ongoing group call recording, in seconds; 0 if none.
      # An {TD::Types::Update::GroupCall} update is not triggered when value of this field changes, but the same
      # recording goes on.
      attr_accessor record_duration: Integer

      # True, if a video file is being recorded for the call.
      attr_accessor is_video_recorded: bool

      # Call duration, in seconds; for ended calls only.
      attr_accessor duration: Integer
    end

    # Points to a file.
    class InputFile < TD::Types::Base
      # A file defined by its unique ID.
      # 
      # @attr id [Integer] Unique file identifier.
      class Id < TD::Types::InputFile
        # Unique file identifier.
        attr_accessor id: Integer
      end

      # A file defined by a local path.
      # 
      # @attr path [TD::Types::String] Local path to the file.
      class Local < TD::Types::InputFile
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Local path to the file.
        attr_accessor path: TD::Types::String
      end

      # A file defined by its remote ID.
      # The remote ID is guaranteed to be usable only if the corresponding file is still accessible to the user and known
      #   to TDLib.
      # For example, if the file is from a message, then the message must be not deleted and accessible to the user.
      # If the file database is disabled, then the corresponding object with the file must be preloaded by the application.
      # 
      # @attr id [TD::Types::String] Remote file identifier.
      class Remote < TD::Types::InputFile
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Remote file identifier.
        attr_accessor id: TD::Types::String
      end

      # A file generated by the application.
      # 
      # @attr original_path [TD::Types::String, nil] Local path to a file from which the file is generated; may be empty if
      #   there is no such file.
      # @attr conversion [TD::Types::String] String specifying the conversion applied to the original file; must be
      #   persistent across application restarts.
      #   Conversions beginning with '#' are reserved for internal TDLib usage.
      # @attr expected_size [Integer] Expected size of the generated file, in bytes; 0 if unknown.
      class Generated < TD::Types::InputFile
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Local path to a file from which the file is generated; may be empty if
        # there is no such file.
        attr_accessor original_path: TD::Types::String?

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # String specifying the conversion applied to the original file; must be
        # persistent across application restarts.
        # Conversions beginning with '#' are reserved for internal TDLib usage.
        attr_accessor conversion: TD::Types::String

        # Expected size of the generated file, in bytes; 0 if unknown.
        attr_accessor expected_size: Integer
      end
    end

    # Represents a JSON value.
    class JsonValue < TD::Types::Base
      # Represents a null JSON value.
      class Null < TD::Types::JsonValue
      end

      # Represents a JSON array.
      # 
      # @attr values [Array<TD::Types::JsonValue>] The list of array elements.
      class Array < TD::Types::JsonValue
        # The list of array elements.
        attr_accessor values: ::Array[TD::Types::JsonValue]
      end

      # Represents a numeric JSON value.
      # 
      # @attr value [Float] The value.
      class Number < TD::Types::JsonValue
        # The value.
        attr_accessor value: Float
      end

      # Represents a JSON object.
      # 
      # @attr members [Array<TD::Types::JsonObjectMember>] The list of object members.
      class Object < TD::Types::JsonValue
        # The list of object members.
        attr_accessor members: ::Array[TD::Types::JsonObjectMember]
      end

      # Represents a string JSON value.
      # 
      # @attr value [TD::Types::String] The value.
      class String < TD::Types::JsonValue
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # The value.
        attr_accessor value: TD::Types::String
      end

      # Represents a boolean JSON value.
      # 
      # @attr value [Boolean] The value.
      class Boolean < TD::Types::JsonValue
        # The value.
        attr_accessor value: bool
      end
    end

    # Represents a local file.
    # 
    # @attr path [TD::Types::String, nil] Local path to the locally available file part; may be empty.
    # @attr can_be_downloaded [Boolean] True, if it is possible to download or generate the file.
    # @attr can_be_deleted [Boolean] True, if the file can be deleted.
    # @attr is_downloading_active [Boolean] True, if the file is currently being downloaded (or a local copy is being
    #   generated by some other means).
    # @attr is_downloading_completed [Boolean] True, if the local copy is fully available.
    # @attr download_offset [Integer] Download will be started from this offset.
    #   downloaded_prefix_size is calculated from this offset.
    # @attr downloaded_prefix_size [Integer] If is_downloading_completed is false, then only some prefix of the file
    #   starting from download_offset is ready to be read.
    #   downloaded_prefix_size is the size of that prefix in bytes.
    # @attr downloaded_size [Integer] Total downloaded file size, in bytes.
    #   Can be used only for calculating download progress.
    #   The actual file size may be bigger, and some parts of it may contain garbage.
    class LocalFile < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Local path to the locally available file part; may be empty.
      attr_accessor path: TD::Types::String?

      # True, if it is possible to download or generate the file.
      attr_accessor can_be_downloaded: bool

      # True, if the file can be deleted.
      attr_accessor can_be_deleted: bool

      # True, if the file is currently being downloaded (or a local copy is being
      # generated by some other means).
      attr_accessor is_downloading_active: bool

      # True, if the local copy is fully available.
      attr_accessor is_downloading_completed: bool

      # Download will be started from this offset.
      # downloaded_prefix_size is calculated from this offset.
      attr_accessor download_offset: Integer

      # If is_downloading_completed is false, then only some prefix of the file
      # starting from download_offset is ready to be read.
      # downloaded_prefix_size is the size of that prefix in bytes.
      attr_accessor downloaded_prefix_size: Integer

      # Total downloaded file size, in bytes.
      # Can be used only for calculating download progress.
      # The actual file size may be bigger, and some parts of it may contain garbage.
      attr_accessor downloaded_size: Integer
    end

    # Describes a stream to which TDLib internal log is written.
    class LogStream < TD::Types::Base
      # The log is written to a file.
      # 
      # @attr path [TD::Types::String] Path to the file to where the internal TDLib log will be written.
      # @attr max_file_size [Integer] The maximum size of the file to where the internal TDLib log is written before the
      #   file will automatically be rotated, in bytes.
      # @attr redirect_stderr [Boolean] Pass true to additionally redirect stderr to the log file.
      #   Ignored on Windows.
      class File < TD::Types::LogStream
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Path to the file to where the internal TDLib log will be written.
        attr_accessor path: TD::Types::String

        # The maximum size of the file to where the internal TDLib log is written before the
        # file will automatically be rotated, in bytes.
        attr_accessor max_file_size: Integer

        # Pass true to additionally redirect stderr to the log file.
        # Ignored on Windows.
        attr_accessor redirect_stderr: bool
      end

      # The log is written nowhere.
      class Empty < TD::Types::LogStream
      end

      # The log is written to stderr or an OS specific log.
      class Default < TD::Types::LogStream
      end
    end

    # Part of the face, relative to which a mask is placed.
    class MaskPoint < TD::Types::Base
      # The mask is placed relatively to the chin.
      class Chin < TD::Types::MaskPoint
      end

      # The mask is placed relatively to the eyes.
      class Eyes < TD::Types::MaskPoint
      end

      # The mask is placed relatively to the mouth.
      class Mouth < TD::Types::MaskPoint
      end

      # The mask is placed relatively to the forehead.
      class Forehead < TD::Types::MaskPoint
      end
    end

    # Order information.
    # 
    # @attr name [TD::Types::String] Name of the user.
    # @attr phone_number [TD::Types::String] Phone number of the user.
    # @attr email_address [TD::Types::String] Email address of the user.
    # @attr shipping_address [TD::Types::Address, nil] Shipping address for this order; may be null.
    class OrderInfo < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Name of the user.
      attr_accessor name: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Phone number of the user.
      attr_accessor phone_number: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Email address of the user.
      attr_accessor email_address: TD::Types::String

      # Shipping address for this order; may be null.
      attr_accessor shipping_address: TD::Types::Address?
    end

    # Describes a block of an instant view web page.
    class PageBlock < TD::Types::Base
      # A map.
      # 
      # @attr location [TD::Types::Location] Location of the map center.
      # @attr zoom [Integer] Map zoom level.
      # @attr width [Integer] Map width.
      # @attr height [Integer] Map height.
      # @attr caption [TD::Types::PageBlockCaption] Block caption.
      class Map < TD::Types::PageBlock
        # Location of the map center.
        attr_accessor location: TD::Types::Location

        # Map zoom level.
        attr_accessor zoom: Integer

        # Map width.
        attr_accessor width: Integer

        # Map height.
        attr_accessor height: Integer

        # Block caption.
        attr_accessor caption: TD::Types::PageBlockCaption
      end

      # A list of data blocks.
      # 
      # @attr items [Array<TD::Types::PageBlockListItem>] The items of the list.
      class List < TD::Types::PageBlock
        # The items of the list.
        attr_accessor items: ::Array[TD::Types::PageBlockListItem]
      end

      # An audio file.
      # 
      # @attr audio [TD::Types::Audio, nil] Audio file; may be null.
      # @attr caption [TD::Types::PageBlockCaption] Audio file caption.
      class Audio < TD::Types::PageBlock
        # Audio file; may be null.
        attr_accessor audio: TD::Types::Audio?

        # Audio file caption.
        attr_accessor caption: TD::Types::PageBlockCaption
      end

      # A page cover.
      # 
      # @attr cover [TD::Types::PageBlock] Cover.
      class Cover < TD::Types::PageBlock
        # Cover.
        attr_accessor cover: TD::Types::PageBlock
      end

      # A photo.
      # 
      # @attr photo [TD::Types::Photo, nil] Photo file; may be null.
      # @attr caption [TD::Types::PageBlockCaption] Photo caption.
      # @attr url [TD::Types::String] URL that needs to be opened when the photo is clicked.
      class Photo < TD::Types::PageBlock
        # Photo file; may be null.
        attr_accessor photo: TD::Types::Photo?

        # Photo caption.
        attr_accessor caption: TD::Types::PageBlockCaption

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # URL that needs to be opened when the photo is clicked.
        attr_accessor url: TD::Types::String
      end

      # A table.
      # 
      # @attr caption [TD::Types::RichText] Table caption.
      # @attr cells [Array<Array<TD::Types::PageBlockTableCell>>] Table cells.
      # @attr is_bordered [Boolean] True, if the table is bordered.
      # @attr is_striped [Boolean] True, if the table is striped.
      class Table < TD::Types::PageBlock
        # Table caption.
        attr_accessor caption: TD::Types::RichText

        # Table cells.
        attr_accessor cells: ::Array[::Array[TD::Types::PageBlockTableCell]]

        # True, if the table is bordered.
        attr_accessor is_bordered: bool

        # True, if the table is striped.
        attr_accessor is_striped: bool
      end

      # The title of a page.
      # 
      # @attr title [TD::Types::RichText] Title.
      class Title < TD::Types::PageBlock
        # Title.
        attr_accessor title: TD::Types::RichText
      end

      # A video.
      # 
      # @attr video [TD::Types::Video, nil] Video file; may be null.
      # @attr caption [TD::Types::PageBlockCaption] Video caption.
      # @attr need_autoplay [Boolean] True, if the video must be played automatically.
      # @attr is_looped [Boolean] True, if the video must be looped.
      class Video < TD::Types::PageBlock
        # Video file; may be null.
        attr_accessor video: TD::Types::Video?

        # Video caption.
        attr_accessor caption: TD::Types::PageBlockCaption

        # True, if the video must be played automatically.
        attr_accessor need_autoplay: bool

        # True, if the video must be looped.
        attr_accessor is_looped: bool
      end

      # An invisible anchor on a page, which can be used in a URL to open the page from the specified anchor.
      # 
      # @attr name [TD::Types::String] Name of the anchor.
      class Anchor < TD::Types::PageBlock
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Name of the anchor.
        attr_accessor name: TD::Types::String
      end

      # The footer of a page.
      # 
      # @attr footer [TD::Types::RichText] Footer.
      class Footer < TD::Types::PageBlock
        # Footer.
        attr_accessor footer: TD::Types::RichText
      end

      # A header.
      # 
      # @attr header [TD::Types::RichText] Header.
      class Header < TD::Types::PageBlock
        # Header.
        attr_accessor header: TD::Types::RichText
      end

      # A kicker.
      # 
      # @attr kicker [TD::Types::RichText] Kicker.
      class Kicker < TD::Types::PageBlock
        # Kicker.
        attr_accessor kicker: TD::Types::RichText
      end

      # A collage.
      # 
      # @attr page_blocks [Array<TD::Types::PageBlock>] Collage item contents.
      # @attr caption [TD::Types::PageBlockCaption] Block caption.
      class Collage < TD::Types::PageBlock
        # Collage item contents.
        attr_accessor page_blocks: ::Array[TD::Types::PageBlock]

        # Block caption.
        attr_accessor caption: TD::Types::PageBlockCaption
      end

      # A collapsible block.
      # 
      # @attr header [TD::Types::RichText] Always visible heading for the block.
      # @attr page_blocks [Array<TD::Types::PageBlock>] Block contents.
      # @attr is_open [Boolean] True, if the block is open by default.
      class Details < TD::Types::PageBlock
        # Always visible heading for the block.
        attr_accessor header: TD::Types::RichText

        # Block contents.
        attr_accessor page_blocks: ::Array[TD::Types::PageBlock]

        # True, if the block is open by default.
        attr_accessor is_open: bool
      end

      # An empty block separating a page.
      class Divider < TD::Types::PageBlock
      end

      # An embedded web page.
      # 
      # @attr url [TD::Types::String, nil] Web page URL, if available.
      # @attr html [TD::Types::String] HTML-markup of the embedded page.
      # @attr poster_photo [TD::Types::Photo, nil] Poster photo, if available; may be null.
      # @attr width [Integer] Block width; 0 if unknown.
      # @attr height [Integer] Block height; 0 if unknown.
      # @attr caption [TD::Types::PageBlockCaption] Block caption.
      # @attr is_full_width [Boolean] True, if the block must be full width.
      # @attr allow_scrolling [Boolean] True, if scrolling needs to be allowed.
      class Embedded < TD::Types::PageBlock
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Web page URL, if available.
        attr_accessor url: TD::Types::String?

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # HTML-markup of the embedded page.
        attr_accessor html: TD::Types::String

        # Poster photo, if available; may be null.
        attr_accessor poster_photo: TD::Types::Photo?

        # Block width; 0 if unknown.
        attr_accessor width: Integer

        # Block height; 0 if unknown.
        attr_accessor height: Integer

        # Block caption.
        attr_accessor caption: TD::Types::PageBlockCaption

        # True, if the block must be full width.
        attr_accessor is_full_width: bool

        # True, if scrolling needs to be allowed.
        attr_accessor allow_scrolling: bool
      end

      # The subtitle of a page.
      # 
      # @attr subtitle [TD::Types::RichText] Subtitle.
      class Subtitle < TD::Types::PageBlock
        # Subtitle.
        attr_accessor subtitle: TD::Types::RichText
      end

      # An animation.
      # 
      # @attr animation [TD::Types::Animation, nil] Animation file; may be null.
      # @attr caption [TD::Types::PageBlockCaption] Animation caption.
      # @attr need_autoplay [Boolean] True, if the animation must be played automatically.
      class Animation < TD::Types::PageBlock
        # Animation file; may be null.
        attr_accessor animation: TD::Types::Animation?

        # Animation caption.
        attr_accessor caption: TD::Types::PageBlockCaption

        # True, if the animation must be played automatically.
        attr_accessor need_autoplay: bool
      end

      # A link to a chat.
      # 
      # @attr title [TD::Types::String] Chat title.
      # @attr photo [TD::Types::ChatPhotoInfo, nil] Chat photo; may be null.
      # @attr username [TD::Types::String] Chat username, by which all other information about the chat can be resolved.
      class ChatLink < TD::Types::PageBlock
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Chat title.
        attr_accessor title: TD::Types::String

        # Chat photo; may be null.
        attr_accessor photo: TD::Types::ChatPhotoInfo?

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Chat username, by which all other information about the chat can be resolved.
        attr_accessor username: TD::Types::String
      end

      # A text paragraph.
      # 
      # @attr text [TD::Types::RichText] Paragraph text.
      class Paragraph < TD::Types::PageBlock
        # Paragraph text.
        attr_accessor text: TD::Types::RichText
      end

      # A slideshow.
      # 
      # @attr page_blocks [Array<TD::Types::PageBlock>] Slideshow item contents.
      # @attr caption [TD::Types::PageBlockCaption] Block caption.
      class Slideshow < TD::Types::PageBlock
        # Slideshow item contents.
        attr_accessor page_blocks: ::Array[TD::Types::PageBlock]

        # Block caption.
        attr_accessor caption: TD::Types::PageBlockCaption
      end

      # A subheader.
      # 
      # @attr subheader [TD::Types::RichText] Subheader.
      class Subheader < TD::Types::PageBlock
        # Subheader.
        attr_accessor subheader: TD::Types::RichText
      end

      # A pull quote.
      # 
      # @attr text [TD::Types::RichText] Quote text.
      # @attr credit [TD::Types::RichText] Quote credit.
      class PullQuote < TD::Types::PageBlock
        # Quote text.
        attr_accessor text: TD::Types::RichText

        # Quote credit.
        attr_accessor credit: TD::Types::RichText
      end

      # A voice note.
      # 
      # @attr voice_note [TD::Types::VoiceNote, nil] Voice note; may be null.
      # @attr caption [TD::Types::PageBlockCaption] Voice note caption.
      class VoiceNote < TD::Types::PageBlock
        # Voice note; may be null.
        attr_accessor voice_note: TD::Types::VoiceNote?

        # Voice note caption.
        attr_accessor caption: TD::Types::PageBlockCaption
      end

      # The author and publishing date of a page.
      # 
      # @attr author [TD::Types::RichText] Author.
      # @attr publish_date [Integer] Point in time (Unix timestamp) when the article was published; 0 if unknown.
      class AuthorDate < TD::Types::PageBlock
        # Author.
        attr_accessor author: TD::Types::RichText

        # Point in time (Unix timestamp) when the article was published; 0 if unknown.
        attr_accessor publish_date: Integer
      end

      # A block quote.
      # 
      # @attr text [TD::Types::RichText] Quote text.
      # @attr credit [TD::Types::RichText] Quote credit.
      class BlockQuote < TD::Types::PageBlock
        # Quote text.
        attr_accessor text: TD::Types::RichText

        # Quote credit.
        attr_accessor credit: TD::Types::RichText
      end

      # A preformatted text paragraph.
      # 
      # @attr text [TD::Types::RichText] Paragraph text.
      # @attr language [TD::Types::String] Programming language for which the text needs to be formatted.
      class Preformatted < TD::Types::PageBlock
        # Paragraph text.
        attr_accessor text: TD::Types::RichText

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Programming language for which the text needs to be formatted.
        attr_accessor language: TD::Types::String
      end

      # An embedded post.
      # 
      # @attr url [TD::Types::String] Web page URL.
      # @attr author [TD::Types::String] Post author.
      # @attr author_photo [TD::Types::Photo, nil] Post author photo; may be null.
      # @attr date [Integer] Point in time (Unix timestamp) when the post was created; 0 if unknown.
      # @attr page_blocks [Array<TD::Types::PageBlock>] Post content.
      # @attr caption [TD::Types::PageBlockCaption] Post caption.
      class EmbeddedPost < TD::Types::PageBlock
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Web page URL.
        attr_accessor url: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Post author.
        attr_accessor author: TD::Types::String

        # Post author photo; may be null.
        attr_accessor author_photo: TD::Types::Photo?

        # Point in time (Unix timestamp) when the post was created; 0 if unknown.
        attr_accessor date: Integer

        # Post content.
        attr_accessor page_blocks: ::Array[TD::Types::PageBlock]

        # Post caption.
        attr_accessor caption: TD::Types::PageBlockCaption
      end

      # Related articles.
      # 
      # @attr header [TD::Types::RichText] Block header.
      # @attr articles [Array<TD::Types::PageBlockRelatedArticle>] List of related articles.
      class RelatedArticles < TD::Types::PageBlock
        # Block header.
        attr_accessor header: TD::Types::RichText

        # List of related articles.
        attr_accessor articles: ::Array[TD::Types::PageBlockRelatedArticle]
      end
    end

    # Describes an image in JPEG format.
    # 
    # @attr type [TD::Types::String] Image type (see https://core.telegram.org/constructor/photoSize).
    # @attr photo [TD::Types::File] Information about the image file.
    # @attr width [Integer] Image width.
    # @attr height [Integer] Image height.
    # @attr progressive_sizes [Array<Integer>] Sizes of progressive JPEG file prefixes, which can be used to
    #   preliminarily show the image; in bytes.
    class PhotoSize < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Image type (see https://core.telegram.org/constructor/photoSize).
      attr_accessor type: TD::Types::String

      # Information about the image file.
      attr_accessor photo: TD::Types::File

      # Image width.
      attr_accessor width: Integer

      # Image height.
      attr_accessor height: Integer

      # Sizes of progressive JPEG file prefixes, which can be used to
      # preliminarily show the image; in bytes.
      attr_accessor progressive_sizes: ::Array[Integer]
    end

    # Describes the type of a proxy server.
    class ProxyType < TD::Types::Base
      # A HTTP transparent proxy server.
      # 
      # @attr username [TD::Types::String, nil] Username for logging in; may be empty.
      # @attr password [TD::Types::String, nil] Password for logging in; may be empty.
      # @attr http_only [Boolean] Pass true if the proxy supports only HTTP requests and doesn't support transparent TCP
      #   connections via HTTP CONNECT method.
      class Http < TD::Types::ProxyType
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Username for logging in; may be empty.
        attr_accessor username: TD::Types::String?

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Password for logging in; may be empty.
        attr_accessor password: TD::Types::String?

        # Pass true if the proxy supports only HTTP requests and doesn't support transparent TCP
        # connections via HTTP CONNECT method.
        attr_accessor http_only: bool
      end

      # A SOCKS5 proxy server.
      # 
      # @attr username [TD::Types::String, nil] Username for logging in; may be empty.
      # @attr password [TD::Types::String, nil] Password for logging in; may be empty.
      class Socks5 < TD::Types::ProxyType
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Username for logging in; may be empty.
        attr_accessor username: TD::Types::String?

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Password for logging in; may be empty.
        attr_accessor password: TD::Types::String?
      end

      # An MTProto proxy server.
      # 
      # @attr secret [TD::Types::String] The proxy's secret in hexadecimal encoding.
      class Mtproto < TD::Types::ProxyType
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # The proxy's secret in hexadecimal encoding.
        attr_accessor secret: TD::Types::String
      end
    end

    # Represents a supergroup or channel with zero or more members (subscribers in the case of channels).
    # From the point of view of the system, a channel is a special kind of a supergroup: only administrators can post and
    #   see the list of members, and posts from all administrators use the name and photo of the channel instead of individual
    #   names and profile photos.
    # Unlike supergroups, channels can have an unlimited number of subscribers.
    # 
    # @attr id [Integer] Supergroup or channel identifier.
    # @attr username [TD::Types::String, nil] Username of the supergroup or channel; empty for private supergroups or
    #   channels.
    # @attr date [Integer] Point in time (Unix timestamp) when the current user joined, or the point in time when the
    #   supergroup or channel was created, in case the user is not a member.
    # @attr status [TD::Types::ChatMemberStatus] Status of the current user in the supergroup or channel; custom title
    #   will be always empty.
    # @attr member_count [Integer] Number of members in the supergroup or channel; 0 if unknown.
    #   Currently, it is guaranteed to be known only if the supergroup or channel was received through searchPublicChats,
    #   searchChatsNearby, getInactiveSupergroupChats, getSuitableDiscussionChats, getGroupsInCommon, or
    #   getUserPrivacySettingRules.
    # @attr has_linked_chat [Boolean] True, if the channel has a discussion group, or the supergroup is the designated
    #   discussion group for a channel.
    # @attr has_location [Boolean] True, if the supergroup is connected to a location, i.e.
    #   the supergroup is a location-based supergroup.
    # @attr sign_messages [Boolean] True, if messages sent to the channel need to contain information about the sender.
    #   This field is only applicable to channels.
    # @attr is_slow_mode_enabled [Boolean] True, if the slow mode is enabled in the supergroup.
    # @attr is_channel [Boolean] True, if the supergroup is a channel.
    # @attr is_broadcast_group [Boolean] True, if the supergroup is a broadcast group, i.e.
    #   only administrators can send messages and there is no limit on the number of members.
    # @attr is_verified [Boolean] True, if the supergroup or channel is verified.
    # @attr restriction_reason [TD::Types::String] If non-empty, contains a human-readable description of the reason why
    #   access to this supergroup or channel must be restricted.
    # @attr is_scam [Boolean] True, if many users reported this supergroup or channel as a scam.
    # @attr is_fake [Boolean] True, if many users reported this supergroup or channel as a fake account.
    class Supergroup < TD::Types::Base
      # Supergroup or channel identifier.
      attr_accessor id: Integer

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Username of the supergroup or channel; empty for private supergroups or
      # channels.
      attr_accessor username: TD::Types::String?

      # Point in time (Unix timestamp) when the current user joined, or the point in time when the
      # supergroup or channel was created, in case the user is not a member.
      attr_accessor date: Integer

      # Status of the current user in the supergroup or channel; custom title
      # will be always empty.
      attr_accessor status: TD::Types::ChatMemberStatus

      # Number of members in the supergroup or channel; 0 if unknown.
      # Currently, it is guaranteed to be known only if the supergroup or channel was received through searchPublicChats,
      # searchChatsNearby, getInactiveSupergroupChats, getSuitableDiscussionChats, getGroupsInCommon, or
      # getUserPrivacySettingRules.
      attr_accessor member_count: Integer

      # True, if the channel has a discussion group, or the supergroup is the designated
      # discussion group for a channel.
      attr_accessor has_linked_chat: bool

      # True, if the supergroup is connected to a location, i.e.
      # the supergroup is a location-based supergroup.
      attr_accessor has_location: bool

      # True, if messages sent to the channel need to contain information about the sender.
      # This field is only applicable to channels.
      attr_accessor sign_messages: bool

      # True, if the slow mode is enabled in the supergroup.
      attr_accessor is_slow_mode_enabled: bool

      # True, if the supergroup is a channel.
      attr_accessor is_channel: bool

      # True, if the supergroup is a broadcast group, i.e.
      # only administrators can send messages and there is no limit on the number of members.
      attr_accessor is_broadcast_group: bool

      # True, if the supergroup or channel is verified.
      attr_accessor is_verified: bool

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # If non-empty, contains a human-readable description of the reason why
      # access to this supergroup or channel must be restricted.
      attr_accessor restriction_reason: TD::Types::String

      # True, if many users reported this supergroup or channel as a scam.
      attr_accessor is_scam: bool

      # True, if many users reported this supergroup or channel as a fake account.
      attr_accessor is_fake: bool
    end

    # Describes a video chat.
    # 
    # @attr group_call_id [Integer] Group call identifier of an active video chat; 0 if none.
    #   Full information about the video chat can be received through the method getGroupCall.
    # @attr has_participants [Boolean] True, if the video chat has participants.
    # @attr default_participant_id [TD::Types::MessageSender, nil] Default group call participant identifier to join the
    #   video chat; may be null.
    class VideoChat < TD::Types::Base
      # Group call identifier of an active video chat; 0 if none.
      # Full information about the video chat can be received through the method getGroupCall.
      attr_accessor group_call_id: Integer

      # True, if the video chat has participants.
      attr_accessor has_participants: bool

      # Default group call participant identifier to join the
      # video chat; may be null.
      attr_accessor default_participant_id: TD::Types::MessageSender?
    end

    # Describes a video note.
    # The video must be equal in width and height, cropped to a circle, and stored in MPEG4 format.
    # 
    # @attr duration [Integer] Duration of the video, in seconds; as defined by the sender.
    # @attr length [Integer] Video width and height; as defined by the sender.
    # @attr minithumbnail [TD::Types::Minithumbnail, nil] Video minithumbnail; may be null.
    # @attr thumbnail [TD::Types::Thumbnail, nil] Video thumbnail in JPEG format; as defined by the sender; may be null.
    # @attr video [TD::Types::File] File containing the video.
    class VideoNote < TD::Types::Base
      # Duration of the video, in seconds; as defined by the sender.
      attr_accessor duration: Integer

      # Video width and height; as defined by the sender.
      attr_accessor length: Integer

      # Video minithumbnail; may be null.
      attr_accessor minithumbnail: TD::Types::Minithumbnail?

      # Video thumbnail in JPEG format; as defined by the sender; may be null.
      attr_accessor thumbnail: TD::Types::Thumbnail?

      # File containing the video.
      attr_accessor video: TD::Types::File
    end

    # Describes a voice note.
    # The voice note must be encoded with the Opus codec, and stored inside an OGG container.
    # Voice notes can have only a single audio channel.
    # 
    # @attr duration [Integer] Duration of the voice note, in seconds; as defined by the sender.
    # @attr waveform [String] A waveform representation of the voice note in 5-bit format.
    # @attr mime_type [TD::Types::String] MIME type of the file; as defined by the sender.
    # @attr voice [TD::Types::File] File containing the voice note.
    class VoiceNote < TD::Types::Base
      # Duration of the voice note, in seconds; as defined by the sender.
      attr_accessor duration: Integer

      # A waveform representation of the voice note in 5-bit format.
      attr_accessor waveform: String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # MIME type of the file; as defined by the sender.
      attr_accessor mime_type: TD::Types::String

      # File containing the voice note.
      attr_accessor voice: TD::Types::File
    end

    # Contains information about the period of inactivity after which the current user's account will automatically be
    #   deleted.
    # 
    # @attr days [Integer] Number of days of inactivity before the account will be flagged for deletion; 30-366 days.
    class AccountTtl < TD::Types::Base
      # Number of days of inactivity before the account will be flagged for deletion; 30-366 days.
      attr_accessor days: Integer
    end

    # Contains a list of backgrounds.
    # 
    # @attr backgrounds [Array<TD::Types::Background>] A list of backgrounds.
    class Backgrounds < TD::Types::Base
      # A list of backgrounds.
      attr_accessor backgrounds: ::Array[TD::Types::Background]
    end

    # Represents a basic group of 0-200 users (must be upgraded to a supergroup to accommodate more than 200 users).
    # 
    # @attr id [Integer] Group identifier.
    # @attr member_count [Integer] Number of members in the group.
    # @attr status [TD::Types::ChatMemberStatus] Status of the current user in the group.
    # @attr is_active [Boolean] True, if the group is active.
    # @attr upgraded_to_supergroup_id [Integer] Identifier of the supergroup to which this group was upgraded; 0 if none.
    class BasicGroup < TD::Types::Base
      # Group identifier.
      attr_accessor id: Integer

      # Number of members in the group.
      attr_accessor member_count: Integer

      # Status of the current user in the group.
      attr_accessor status: TD::Types::ChatMemberStatus

      # True, if the group is active.
      attr_accessor is_active: bool

      # Identifier of the supergroup to which this group was upgraded; 0 if none.
      attr_accessor upgraded_to_supergroup_id: Integer
    end

    # Represents a command supported by a bot.
    # 
    # @attr command [TD::Types::String] Text of the bot command.
    # @attr description [TD::Types::String] Description of the bot command.
    class BotCommand < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Text of the bot command.
      attr_accessor command: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Description of the bot command.
      attr_accessor description: TD::Types::String
    end

    # Describes a server for relaying call data.
    # 
    # @attr id [Integer] Server identifier.
    # @attr ip_address [TD::Types::String] Server IPv4 address.
    # @attr ipv6_address [TD::Types::String] Server IPv6 address.
    # @attr port [Integer] Server port number.
    # @attr type [TD::Types::CallServerType] Server type.
    class CallServer < TD::Types::Base
      # Server identifier.
      attr_accessor id: Integer

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Server IPv4 address.
      attr_accessor ip_address: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Server IPv6 address.
      attr_accessor ipv6_address: TD::Types::String

      # Server port number.
      attr_accessor port: Integer

      # Server type.
      attr_accessor type: TD::Types::CallServerType
    end

    # Describes the different types of activity in a chat.
    class ChatAction < TD::Types::Base
      # The user has canceled the previous action.
      class Cancel < TD::Types::ChatAction
      end

      # The user is typing a message.
      class Typing < TD::Types::ChatAction
      end

      # The user is recording a video.
      class RecordingVideo < TD::Types::ChatAction
      end

      # The user is uploading a photo.
      # 
      # @attr progress [Integer] Upload progress, as a percentage.
      class UploadingPhoto < TD::Types::ChatAction
        # Upload progress, as a percentage.
        attr_accessor progress: Integer
      end

      # The user is uploading a video.
      # 
      # @attr progress [Integer] Upload progress, as a percentage.
      class UploadingVideo < TD::Types::ChatAction
        # Upload progress, as a percentage.
        attr_accessor progress: Integer
      end

      # The user is picking a contact to send.
      class ChoosingContact < TD::Types::ChatAction
      end

      # The user is picking a sticker to send.
      class ChoosingSticker < TD::Types::ChatAction
      end

      # The user is picking a location or venue to send.
      class ChoosingLocation < TD::Types::ChatAction
      end

      # The user has started to play a game.
      class StartPlayingGame < TD::Types::ChatAction
      end

      # The user is uploading a document.
      # 
      # @attr progress [Integer] Upload progress, as a percentage.
      class UploadingDocument < TD::Types::ChatAction
        # Upload progress, as a percentage.
        attr_accessor progress: Integer
      end

      # The user is watching animations sent by the other party by clicking on an animated emoji.
      # 
      # @attr emoji [TD::Types::String] The animated emoji.
      class WatchingAnimations < TD::Types::ChatAction
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # The animated emoji.
        attr_accessor emoji: TD::Types::String
      end

      # The user is recording a video note.
      class RecordingVideoNote < TD::Types::ChatAction
      end

      # The user is recording a voice note.
      class RecordingVoiceNote < TD::Types::ChatAction
      end

      # The user is uploading a video note.
      # 
      # @attr progress [Integer] Upload progress, as a percentage.
      class UploadingVideoNote < TD::Types::ChatAction
        # Upload progress, as a percentage.
        attr_accessor progress: Integer
      end

      # The user is uploading a voice note.
      # 
      # @attr progress [Integer] Upload progress, as a percentage.
      class UploadingVoiceNote < TD::Types::ChatAction
        # Upload progress, as a percentage.
        attr_accessor progress: Integer
      end
    end

    # Contains a list of chat events.
    # 
    # @attr events [Array<TD::Types::ChatEvent>] List of events.
    class ChatEvents < TD::Types::Base
      # List of events.
      attr_accessor events: ::Array[TD::Types::ChatEvent]
    end

    # Represents a filter of user chats.
    # 
    # @attr title [TD::Types::String] The title of the filter; 1-12 characters without line feeds.
    # @attr icon_name [TD::Types::String, nil] The chosen icon name for short filter representation.
    #   If non-empty, must be one of "All", "Unread", "Unmuted", "Bots", "Channels", "Groups", "Private", "Custom",
    #   "Setup", "Cat", "Crown", "Favorite", "Flower", "Game", "Home", "Love", "Mask", "Party", "Sport", "Study", "Trade",
    #   "Travel", "Work".
    #   If empty, use getChatFilterDefaultIconName to get default icon name for the filter.
    # @attr pinned_chat_ids [Array<Integer>] The chat identifiers of pinned chats in the filtered chat list.
    # @attr included_chat_ids [Array<Integer>] The chat identifiers of always included chats in the filtered chat list.
    # @attr excluded_chat_ids [Array<Integer>] The chat identifiers of always excluded chats in the filtered chat list.
    # @attr exclude_muted [Boolean] True, if muted chats need to be excluded.
    # @attr exclude_read [Boolean] True, if read chats need to be excluded.
    # @attr exclude_archived [Boolean] True, if archived chats need to be excluded.
    # @attr include_contacts [Boolean] True, if contacts need to be included.
    # @attr include_non_contacts [Boolean] True, if non-contact users need to be included.
    # @attr include_bots [Boolean] True, if bots need to be included.
    # @attr include_groups [Boolean] True, if basic groups and supergroups need to be included.
    # @attr include_channels [Boolean] True, if channels need to be included.
    class ChatFilter < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # The title of the filter; 1-12 characters without line feeds.
      attr_accessor title: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # The chosen icon name for short filter representation.
      # If non-empty, must be one of "All", "Unread", "Unmuted", "Bots", "Channels", "Groups", "Private", "Custom",
      # "Setup", "Cat", "Crown", "Favorite", "Flower", "Game", "Home", "Love", "Mask", "Party", "Sport", "Study", "Trade",
      # "Travel", "Work".
      # If empty, use getChatFilterDefaultIconName to get default icon name for the filter.
      attr_accessor icon_name: TD::Types::String?

      # The chat identifiers of pinned chats in the filtered chat list.
      attr_accessor pinned_chat_ids: ::Array[Integer]

      # The chat identifiers of always included chats in the filtered chat list.
      attr_accessor included_chat_ids: ::Array[Integer]

      # The chat identifiers of always excluded chats in the filtered chat list.
      attr_accessor excluded_chat_ids: ::Array[Integer]

      # True, if muted chats need to be excluded.
      attr_accessor exclude_muted: bool

      # True, if read chats need to be excluded.
      attr_accessor exclude_read: bool

      # True, if archived chats need to be excluded.
      attr_accessor exclude_archived: bool

      # True, if contacts need to be included.
      attr_accessor include_contacts: bool

      # True, if non-contact users need to be included.
      attr_accessor include_non_contacts: bool

      # True, if bots need to be included.
      attr_accessor include_bots: bool

      # True, if basic groups and supergroups need to be included.
      attr_accessor include_groups: bool

      # True, if channels need to be included.
      attr_accessor include_channels: bool
    end

    # Describes a user or a chat as a member of another chat.
    # 
    # @attr member_id [TD::Types::MessageSender] Identifier of the chat member.
    #   Currently, other chats can be only Left or Banned.
    #   Only supergroups and channels can have other chats as Left or Banned members and these chats must be supergroups
    #   or channels.
    # @attr inviter_user_id [Integer] Identifier of a user that invited/promoted/banned this member in the chat; 0 if
    #   unknown.
    # @attr joined_chat_date [Integer] Point in time (Unix timestamp) when the user joined the chat.
    # @attr status [TD::Types::ChatMemberStatus] Status of the member in the chat.
    class ChatMember < TD::Types::Base
      # Identifier of the chat member.
      # Currently, other chats can be only Left or Banned.
      # Only supergroups and channels can have other chats as Left or Banned members and these chats must be supergroups
      # or channels.
      attr_accessor member_id: TD::Types::MessageSender

      # Identifier of a user that invited/promoted/banned this member in the chat; 0 if
      # unknown.
      attr_accessor inviter_user_id: Integer

      # Point in time (Unix timestamp) when the user joined the chat.
      attr_accessor joined_chat_date: Integer

      # Status of the member in the chat.
      attr_accessor status: TD::Types::ChatMemberStatus
    end

    # Describes a chat located nearby.
    # 
    # @attr chat_id [Integer] Chat identifier.
    # @attr distance [Integer] Distance to the chat location, in meters.
    class ChatNearby < TD::Types::Base
      # Chat identifier.
      attr_accessor chat_id: Integer

      # Distance to the chat location, in meters.
      attr_accessor distance: Integer
    end

    # Contains a list of chat or user profile photos.
    # 
    # @attr total_count [Integer] Total number of photos.
    # @attr photos [Array<TD::Types::ChatPhoto>] List of photos.
    class ChatPhotos < TD::Types::Base
      # Total number of photos.
      attr_accessor total_count: Integer

      # List of photos.
      attr_accessor photos: ::Array[TD::Types::ChatPhoto]
    end

    # Describes a reason why an external chat is shown in a chat list.
    class ChatSource < TD::Types::Base
      # The chat is sponsored by the user's MTProxy server.
      class MtprotoProxy < TD::Types::ChatSource
      end

      # The chat contains a public service announcement.
      # 
      # @attr type [TD::Types::String] The type of the announcement.
      # @attr text [TD::Types::String] The text of the announcement.
      class PublicServiceAnnouncement < TD::Types::ChatSource
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # The type of the announcement.
        attr_accessor type: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # The text of the announcement.
        attr_accessor text: TD::Types::String
      end
    end

    # Describes one answer option of a poll.
    # 
    # @attr text [TD::Types::String] Option text; 1-100 characters.
    # @attr voter_count [Integer] Number of voters for this option, available only for closed or voted polls.
    # @attr vote_percentage [Integer] The percentage of votes for this option; 0-100.
    # @attr is_chosen [Boolean] True, if the option was chosen by the user.
    # @attr is_being_chosen [Boolean] True, if the option is being chosen by a pending setPollAnswer request.
    class PollOption < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Option text; 1-100 characters.
      attr_accessor text: TD::Types::String

      # Number of voters for this option, available only for closed or voted polls.
      attr_accessor voter_count: Integer

      # The percentage of votes for this option; 0-100.
      attr_accessor vote_percentage: Integer

      # True, if the option was chosen by the user.
      attr_accessor is_chosen: bool

      # True, if the option is being chosen by a pending setPollAnswer request.
      attr_accessor is_being_chosen: bool
    end

    # Represents a remote file.
    # 
    # @attr id [TD::Types::String, nil] Remote file identifier; may be empty.
    #   Can be used by the current user across application restarts or even from other devices.
    #   Uniquely identifies a file, but a file can have a lot of different valid identifiers.
    #   If the ID starts with "http://" or "https://", it represents the HTTP URL of the file.
    #   TDLib is currently unable to download files if only their URL is known.
    #   If downloadFile is called on such a file or if it is sent to a secret chat, TDLib starts a file generation
    #   process by sending {TD::Types::Update::FileGenerationStart} to the application with the HTTP URL in the original_path
    #   and "#url#" as the conversion string.
    #   Application must generate the file by downloading it to the specified location.
    # @attr unique_id [TD::Types::String, nil] Unique file identifier; may be empty if unknown.
    #   The unique file identifier which is the same for the same file even for different users and is persistent over
    #   time.
    # @attr is_uploading_active [Boolean] True, if the file is currently being uploaded (or a remote copy is being
    #   generated by some other means).
    # @attr is_uploading_completed [Boolean] True, if a remote copy is fully available.
    # @attr uploaded_size [Integer] Size of the remote available part of the file, in bytes; 0 if unknown.
    class RemoteFile < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Remote file identifier; may be empty.
      # Can be used by the current user across application restarts or even from other devices.
      # Uniquely identifies a file, but a file can have a lot of different valid identifiers.
      # If the ID starts with "http://" or "https://", it represents the HTTP URL of the file.
      # TDLib is currently unable to download files if only their URL is known.
      # If downloadFile is called on such a file or if it is sent to a secret chat, TDLib starts a file generation
      # process by sending {TD::Types::Update::FileGenerationStart} to the application with the HTTP URL in the original_path
      # and "#url#" as the conversion string.
      # Application must generate the file by downloading it to the specified location.
      attr_accessor id: TD::Types::String?

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Unique file identifier; may be empty if unknown.
      # The unique file identifier which is the same for the same file even for different users and is persistent over
      # time.
      attr_accessor unique_id: TD::Types::String?

      # True, if the file is currently being uploaded (or a remote copy is being
      # generated by some other means).
      attr_accessor is_uploading_active: bool

      # True, if a remote copy is fully available.
      attr_accessor is_uploading_completed: bool

      # Size of the remote available part of the file, in bytes; 0 if unknown.
      attr_accessor uploaded_size: Integer
    end

    # Represents a secret chat.
    # 
    # @attr id [Integer] Secret chat identifier.
    # @attr user_id [Integer] Identifier of the chat partner.
    # @attr state [TD::Types::SecretChatState] State of the secret chat.
    # @attr is_outbound [Boolean] True, if the chat was created by the current user; otherwise false.
    # @attr key_hash [String] Hash of the currently used key for comparison with the hash of the chat partner's key.
    #   This is a string of 36 little-endian bytes, which must be split into groups of 2 bits, each denoting a pixel of
    #   one of 4 colors FFFFFF, D5E6F3, 2D5775, and 2F99C9.
    #   The pixels must be used to make a 12x12 square image filled from left to right, top to bottom.
    #   Alternatively, the first 32 bytes of the hash can be converted to the hexadecimal format and printed as 32
    #   2-digit hex numbers.
    # @attr layer [Integer] Secret chat layer; determines features supported by the chat partner's application.
    #   Nested text entities and underline and strikethrough entities are supported if the layer >= 101.
    class SecretChat < TD::Types::Base
      # Secret chat identifier.
      attr_accessor id: Integer

      # Identifier of the chat partner.
      attr_accessor user_id: Integer

      # State of the secret chat.
      attr_accessor state: TD::Types::SecretChatState

      # True, if the chat was created by the current user; otherwise false.
      attr_accessor is_outbound: bool

      # Hash of the currently used key for comparison with the hash of the chat partner's key.
      # This is a string of 36 little-endian bytes, which must be split into groups of 2 bits, each denoting a pixel of
      # one of 4 colors FFFFFF, D5E6F3, 2D5775, and 2F99C9.
      # The pixels must be used to make a 12x12 square image filled from left to right, top to bottom.
      # Alternatively, the first 32 bytes of the hash can be converted to the hexadecimal format and printed as 32
      # 2-digit hex numbers.
      attr_accessor key_hash: String

      # Secret chat layer; determines features supported by the chat partner's application.
      # Nested text entities and underline and strikethrough entities are supported if the layer >= 101.
      attr_accessor layer: Integer
    end

    # Represents a sticker set.
    # 
    # @attr id [Integer] Identifier of the sticker set.
    # @attr title [TD::Types::String] Title of the sticker set.
    # @attr name [TD::Types::String] Name of the sticker set.
    # @attr thumbnail [TD::Types::Thumbnail, nil] Sticker set thumbnail in WEBP, TGS, or WEBM format with width and
    #   height 100; may be null.
    #   The file can be downloaded only before the thumbnail is changed.
    # @attr thumbnail_outline [Array<TD::Types::ClosedVectorPath>, nil] Sticker set thumbnail's outline represented as a
    #   list of closed vector paths; may be empty.
    #   The coordinate system origin is in the upper-left corner.
    # @attr is_installed [Boolean] True, if the sticker set has been installed by the current user.
    # @attr is_archived [Boolean] True, if the sticker set has been archived.
    #   A sticker set can't be installed and archived simultaneously.
    # @attr is_official [Boolean] True, if the sticker set is official.
    # @attr sticker_type [TD::Types::StickerType] Type of the stickers in the set.
    # @attr is_viewed [Boolean] True for already viewed trending sticker sets.
    # @attr stickers [Array<TD::Types::Sticker>] List of stickers in this set.
    # @attr emojis [Array<TD::Types::Emojis>] A list of emoji corresponding to the stickers in the same order.
    #   The list is only for informational purposes, because a sticker is always sent with a fixed emoji from the
    #   corresponding Sticker object.
    class StickerSet < TD::Types::Base
      # Identifier of the sticker set.
      attr_accessor id: Integer

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Title of the sticker set.
      attr_accessor title: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Name of the sticker set.
      attr_accessor name: TD::Types::String

      # Sticker set thumbnail in WEBP, TGS, or WEBM format with width and
      # height 100; may be null.
      # The file can be downloaded only before the thumbnail is changed.
      attr_accessor thumbnail: TD::Types::Thumbnail?

      # Sticker set thumbnail's outline represented as a
      # list of closed vector paths; may be empty.
      # The coordinate system origin is in the upper-left corner.
      attr_accessor thumbnail_outline: ::Array[TD::Types::ClosedVectorPath]?

      # True, if the sticker set has been installed by the current user.
      attr_accessor is_installed: bool

      # True, if the sticker set has been archived.
      # A sticker set can't be installed and archived simultaneously.
      attr_accessor is_archived: bool

      # True, if the sticker set is official.
      attr_accessor is_official: bool

      # Type of the stickers in the set.
      attr_accessor sticker_type: TD::Types::StickerType

      # True for already viewed trending sticker sets.
      attr_accessor is_viewed: bool

      # List of stickers in this set.
      attr_accessor stickers: ::Array[TD::Types::Sticker]

      # A list of emoji corresponding to the stickers in the same order.
      # The list is only for informational purposes, because a sticker is always sent with a fixed emoji from the
      # corresponding Sticker object.
      attr_accessor emojis: ::Array[TD::Types::Emojis]
    end

    # Represents a part of the text that needs to be formatted in some unusual way.
    # 
    # @attr offset [Integer] Offset of the entity, in UTF-16 code units.
    # @attr length [Integer] Length of the entity, in UTF-16 code units.
    # @attr type [TD::Types::TextEntityType] Type of the entity.
    class TextEntity < TD::Types::Base
      # Offset of the entity, in UTF-16 code units.
      attr_accessor offset: Integer

      # Length of the entity, in UTF-16 code units.
      attr_accessor length: Integer

      # Type of the entity.
      attr_accessor type: TD::Types::TextEntityType
    end

    # Describes the last time the user was online.
    class UserStatus < TD::Types::Base
      # The user status was never changed.
      class Empty < TD::Types::UserStatus
      end

      # The user is online.
      # 
      # @attr expires [Integer] Point in time (Unix timestamp) when the user's online status will expire.
      class Online < TD::Types::UserStatus
        # Point in time (Unix timestamp) when the user's online status will expire.
        attr_accessor expires: Integer
      end

      # The user is offline.
      # 
      # @attr was_online [Integer] Point in time (Unix timestamp) when the user was last online.
      class Offline < TD::Types::UserStatus
        # Point in time (Unix timestamp) when the user was last online.
        attr_accessor was_online: Integer
      end

      # The user was online recently.
      class Recently < TD::Types::UserStatus
      end

      # The user is offline, but was online last week.
      class LastWeek < TD::Types::UserStatus
      end

      # The user is offline, but was online last month.
      class LastMonth < TD::Types::UserStatus
      end
    end

    # Contains a list of bot commands.
    # 
    # @attr bot_user_id [Integer] Bot's user identifier.
    # @attr commands [Array<TD::Types::BotCommand>] List of bot commands.
    class BotCommands < TD::Types::Base
      # Bot's user identifier.
      attr_accessor bot_user_id: Integer

      # List of bot commands.
      attr_accessor commands: ::Array[TD::Types::BotCommand]
    end

    # Describes the exact type of a problem with a call.
    class CallProblem < TD::Types::Base
      # The user heard their own voice.
      class Echo < TD::Types::CallProblem
      end

      # The user heard background noise.
      class Noise < TD::Types::CallProblem
      end

      # The call ended unexpectedly.
      class Dropped < TD::Types::CallProblem
      end

      # The user couldn't hear the other side.
      class SilentLocal < TD::Types::CallProblem
      end

      # The other side kept disappearing.
      class Interruptions < TD::Types::CallProblem
      end

      # The other side couldn't hear the user.
      class SilentRemote < TD::Types::CallProblem
      end

      # The video was distorted.
      class DistortedVideo < TD::Types::CallProblem
      end

      # The video was pixelated.
      class PixelatedVideo < TD::Types::CallProblem
      end

      # The speech was distorted.
      class DistortedSpeech < TD::Types::CallProblem
      end
    end

    # Contains a list of chat members.
    # 
    # @attr total_count [Integer] Approximate total count of chat members found.
    # @attr members [Array<TD::Types::ChatMember>] A list of chat members.
    class ChatMembers < TD::Types::Base
      # Approximate total count of chat members found.
      attr_accessor total_count: Integer

      # A list of chat members.
      attr_accessor members: ::Array[TD::Types::ChatMember]
    end

    # Represents a list of chats located nearby.
    # 
    # @attr users_nearby [Array<TD::Types::ChatNearby>] List of users nearby.
    # @attr supergroups_nearby [Array<TD::Types::ChatNearby>] List of location-based supergroups nearby.
    class ChatsNearby < TD::Types::Base
      # List of users nearby.
      attr_accessor users_nearby: ::Array[TD::Types::ChatNearby]

      # List of location-based supergroups nearby.
      attr_accessor supergroups_nearby: ::Array[TD::Types::ChatNearby]
    end

    # Contains information about a country.
    # 
    # @attr country_code [TD::Types::String] A two-letter ISO 3166-1 alpha-2 country code.
    # @attr name [TD::Types::String] Native name of the country.
    # @attr english_name [TD::Types::String] English name of the country.
    # @attr is_hidden [Boolean] True, if the country must be hidden from the list of all countries.
    # @attr calling_codes [Array<TD::Types::String>] List of country calling codes.
    class CountryInfo < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # A two-letter ISO 3166-1 alpha-2 country code.
      attr_accessor country_code: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Native name of the country.
      attr_accessor name: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # English name of the country.
      attr_accessor english_name: TD::Types::String

      # True, if the country must be hidden from the list of all countries.
      attr_accessor is_hidden: bool

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # List of country calling codes.
      attr_accessor calling_codes: ::Array[TD::Types::String]
    end

    # Represents a data needed to subscribe for push notifications through registerDevice method.
    # To use specific push notification service, the correct application platform must be specified and a valid server
    #   authentication data must be uploaded at https://my.telegram.org.
    class DeviceToken < TD::Types::Base
      # A token for web Push API.
      # 
      # @attr endpoint [TD::Types::String, nil] Absolute URL exposed by the push service where the application server can
      #   send push messages; may be empty to deregister a device.
      # @attr p256dh_base64url [TD::Types::String] Base64url-encoded P-256 elliptic curve Diffie-Hellman public key.
      # @attr auth_base64url [TD::Types::String] Base64url-encoded authentication secret.
      class WebPush < TD::Types::DeviceToken
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Absolute URL exposed by the push service where the application server can
        # send push messages; may be empty to deregister a device.
        attr_accessor endpoint: TD::Types::String?

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Base64url-encoded P-256 elliptic curve Diffie-Hellman public key.
        attr_accessor p256dh_base64url: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Base64url-encoded authentication secret.
        attr_accessor auth_base64url: TD::Types::String
      end

      # A token for Apple Push Notification service.
      # 
      # @attr device_token [TD::Types::String, nil] Device token; may be empty to deregister a device.
      # @attr is_app_sandbox [Boolean] True, if App Sandbox is enabled.
      class ApplePush < TD::Types::DeviceToken
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Device token; may be empty to deregister a device.
        attr_accessor device_token: TD::Types::String?

        # True, if App Sandbox is enabled.
        attr_accessor is_app_sandbox: bool
      end

      # A token for Tizen Push Service.
      # 
      # @attr reg_id [TD::Types::String, nil] Push service registration identifier; may be empty to deregister a device.
      class TizenPush < TD::Types::DeviceToken
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Push service registration identifier; may be empty to deregister a device.
        attr_accessor reg_id: TD::Types::String?
      end

      # A token for Simple Push API for Firefox OS.
      # 
      # @attr endpoint [TD::Types::String, nil] Absolute URL exposed by the push service where the application server can
      #   send push messages; may be empty to deregister a device.
      class SimplePush < TD::Types::DeviceToken
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Absolute URL exposed by the push service where the application server can
        # send push messages; may be empty to deregister a device.
        attr_accessor endpoint: TD::Types::String?
      end

      # A token for Ubuntu Push Client service.
      # 
      # @attr token [TD::Types::String, nil] Token; may be empty to deregister a device.
      class UbuntuPush < TD::Types::DeviceToken
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Token; may be empty to deregister a device.
        attr_accessor token: TD::Types::String?
      end

      # A token for Windows Push Notification Services.
      # 
      # @attr access_token [TD::Types::String, nil] The access token that will be used to send notifications; may be empty
      #   to deregister a device.
      class WindowsPush < TD::Types::DeviceToken
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # The access token that will be used to send notifications; may be empty
        # to deregister a device.
        attr_accessor access_token: TD::Types::String?
      end

      # A token for Microsoft Push Notification Service.
      # 
      # @attr channel_uri [TD::Types::String, nil] Push notification channel URI; may be empty to deregister a device.
      class MicrosoftPush < TD::Types::DeviceToken
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Push notification channel URI; may be empty to deregister a device.
        attr_accessor channel_uri: TD::Types::String?
      end

      # A token for Apple Push Notification service VoIP notifications.
      # 
      # @attr device_token [TD::Types::String, nil] Device token; may be empty to deregister a device.
      # @attr is_app_sandbox [Boolean] True, if App Sandbox is enabled.
      # @attr encrypt [Boolean] True, if push notifications must be additionally encrypted.
      class ApplePushVoIP < TD::Types::DeviceToken
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Device token; may be empty to deregister a device.
        attr_accessor device_token: TD::Types::String?

        # True, if App Sandbox is enabled.
        attr_accessor is_app_sandbox: bool

        # True, if push notifications must be additionally encrypted.
        attr_accessor encrypt: bool
      end

      # A token for BlackBerry Push Service.
      # 
      # @attr token [TD::Types::String, nil] Token; may be empty to deregister a device.
      class BlackBerryPush < TD::Types::DeviceToken
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Token; may be empty to deregister a device.
        attr_accessor token: TD::Types::String?
      end

      # A token for Microsoft Push Notification Service VoIP channel.
      # 
      # @attr channel_uri [TD::Types::String, nil] Push notification channel URI; may be empty to deregister a device.
      class MicrosoftPushVoIP < TD::Types::DeviceToken
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Push notification channel URI; may be empty to deregister a device.
        attr_accessor channel_uri: TD::Types::String?
      end

      # A token for Firebase Cloud Messaging.
      # 
      # @attr token [TD::Types::String, nil] Device registration token; may be empty to deregister a device.
      # @attr encrypt [Boolean] True, if push notifications must be additionally encrypted.
      class FirebaseCloudMessaging < TD::Types::DeviceToken
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Device registration token; may be empty to deregister a device.
        attr_accessor token: TD::Types::String?

        # True, if push notifications must be additionally encrypted.
        attr_accessor encrypt: bool
      end
    end

    # Contains an HTTPS link to a message in a supergroup or channel.
    # 
    # @attr link [TD::Types::String] Message link.
    # @attr is_public [Boolean] True, if the link will work for non-members of the chat.
    class MessageLink < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Message link.
      attr_accessor link: TD::Types::String

      # True, if the link will work for non-members of the chat.
      attr_accessor is_public: bool
    end

    # Represents the type of a network.
    class NetworkType < TD::Types::Base
      # The network is not available.
      class None < TD::Types::NetworkType
      end

      # A different network type (e.g., Ethernet network).
      class Other < TD::Types::NetworkType
      end

      # A Wi-Fi network.
      class WiFi < TD::Types::NetworkType
      end

      # A mobile network.
      class Mobile < TD::Types::NetworkType
      end

      # A mobile roaming network.
      class MobileRoaming < TD::Types::NetworkType
      end
    end

    # Contains information about a notification.
    # 
    # @attr id [Integer] Unique persistent identifier of this notification.
    # @attr date [Integer] Notification date.
    # @attr is_silent [Boolean] True, if the notification was initially silent.
    # @attr type [TD::Types::NotificationType] Notification type.
    class Notification < TD::Types::Base
      # Unique persistent identifier of this notification.
      attr_accessor id: Integer

      # Notification date.
      attr_accessor date: Integer

      # True, if the notification was initially silent.
      attr_accessor is_silent: bool

      # Notification type.
      attr_accessor type: TD::Types::NotificationType
    end

    # Represents the value of an option.
    class OptionValue < TD::Types::Base
      # Represents an unknown option or an option which has a default value.
      class Empty < TD::Types::OptionValue
      end

      # Represents a string option.
      # 
      # @attr value [TD::Types::String] The value of the option.
      class String < TD::Types::OptionValue
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # The value of the option.
        attr_accessor value: TD::Types::String
      end

      # Represents a boolean option.
      # 
      # @attr value [Boolean] The value of the option.
      class Boolean < TD::Types::OptionValue
        # The value of the option.
        attr_accessor value: bool
      end

      # Represents an integer option.
      # 
      # @attr value [Integer] The value of the option.
      class Integer < TD::Types::OptionValue
        # The value of the option.
        attr_accessor value: Integer
      end
    end

    # Contains information about an invoice payment form.
    # 
    # @attr id [Integer] The payment form identifier.
    # @attr invoice [TD::Types::Invoice] Full information of the invoice.
    # @attr url [TD::Types::String] Payment form URL.
    # @attr seller_bot_user_id [Integer] User identifier of the seller bot.
    # @attr payments_provider_user_id [Integer] User identifier of the payment provider bot.
    # @attr payments_provider [TD::Types::PaymentsProviderStripe, nil] Information about the payment provider, if
    #   available, to support it natively without the need for opening the URL; may be null.
    # @attr saved_order_info [TD::Types::OrderInfo, nil] Saved server-side order information; may be null.
    # @attr saved_credentials [TD::Types::SavedCredentials, nil] Information about saved card credentials; may be null.
    # @attr can_save_credentials [Boolean] True, if the user can choose to save credentials.
    # @attr need_password [Boolean] True, if the user will be able to save credentials protected by a password they set
    #   up.
    class PaymentForm < TD::Types::Base
      # The payment form identifier.
      attr_accessor id: Integer

      # Full information of the invoice.
      attr_accessor invoice: TD::Types::Invoice

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Payment form URL.
      attr_accessor url: TD::Types::String

      # User identifier of the seller bot.
      attr_accessor seller_bot_user_id: Integer

      # User identifier of the payment provider bot.
      attr_accessor payments_provider_user_id: Integer

      # Information about the payment provider, if
      # available, to support it natively without the need for opening the URL; may be null.
      attr_accessor payments_provider: TD::Types::PaymentsProviderStripe?

      # Saved server-side order information; may be null.
      attr_accessor saved_order_info: TD::Types::OrderInfo?

      # Information about saved card credentials; may be null.
      attr_accessor saved_credentials: TD::Types::SavedCredentials?

      # True, if the user can choose to save credentials.
      attr_accessor can_save_credentials: bool

      # True, if the user will be able to save credentials protected by a password they set
      # up.
      attr_accessor need_password: bool
    end

    # Contains a description of a custom keyboard and actions that can be done with it to quickly reply to bots.
    class ReplyMarkup < TD::Types::Base
      # Instructs application to force a reply to this message.
      # 
      # @attr is_personal [Boolean] True, if a forced reply must automatically be shown to the current user.
      #   For outgoing messages, specify true to show the forced reply only for the mentioned users and for the target user
      #   of a reply.
      # @attr input_field_placeholder [TD::Types::String] If non-empty, the placeholder to be shown in the input field when
      #   the reply is active; 0-64 characters.
      class ForceReply < TD::Types::ReplyMarkup
        # True, if a forced reply must automatically be shown to the current user.
        # For outgoing messages, specify true to show the forced reply only for the mentioned users and for the target user
        # of a reply.
        attr_accessor is_personal: bool

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # If non-empty, the placeholder to be shown in the input field when
        # the reply is active; 0-64 characters.
        attr_accessor input_field_placeholder: TD::Types::String
      end

      # Contains a custom keyboard layout to quickly reply to bots.
      # 
      # @attr rows [Array<Array<TD::Types::KeyboardButton>>] A list of rows of bot keyboard buttons.
      # @attr resize_keyboard [Boolean] True, if the application needs to resize the keyboard vertically.
      # @attr one_time [Boolean] True, if the application needs to hide the keyboard after use.
      # @attr is_personal [Boolean] True, if the keyboard must automatically be shown to the current user.
      #   For outgoing messages, specify true to show the keyboard only for the mentioned users and for the target user of
      #   a reply.
      # @attr input_field_placeholder [TD::Types::String] If non-empty, the placeholder to be shown in the input field when
      #   the keyboard is active; 0-64 characters.
      class ShowKeyboard < TD::Types::ReplyMarkup
        # A list of rows of bot keyboard buttons.
        attr_accessor rows: ::Array[::Array[TD::Types::KeyboardButton]]

        # True, if the application needs to resize the keyboard vertically.
        attr_accessor resize_keyboard: bool

        # True, if the application needs to hide the keyboard after use.
        attr_accessor one_time: bool

        # True, if the keyboard must automatically be shown to the current user.
        # For outgoing messages, specify true to show the keyboard only for the mentioned users and for the target user of
        # a reply.
        attr_accessor is_personal: bool

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # If non-empty, the placeholder to be shown in the input field when
        # the keyboard is active; 0-64 characters.
        attr_accessor input_field_placeholder: TD::Types::String
      end

      # Contains an inline keyboard layout.
      # 
      # @attr rows [Array<Array<TD::Types::InlineKeyboardButton>>] A list of rows of inline keyboard buttons.
      class InlineKeyboard < TD::Types::ReplyMarkup
        # A list of rows of inline keyboard buttons.
        attr_accessor rows: ::Array[::Array[TD::Types::InlineKeyboardButton]]
      end

      # Instructs application to remove the keyboard once this message has been received.
      # This kind of keyboard can't be received in an incoming message; instead, UpdateChatReplyMarkup with message_id == 0
      #   will be sent.
      # 
      # @attr is_personal [Boolean] True, if the keyboard is removed only for the mentioned users or the target user of a
      #   reply.
      class RemoveKeyboard < TD::Types::ReplyMarkup
        # True, if the keyboard is removed only for the mentioned users or the target user of a
        # reply.
        attr_accessor is_personal: bool
      end
    end

    # Represents a list of sticker sets.
    # 
    # @attr total_count [Integer] Approximate total number of sticker sets found.
    # @attr sets [Array<TD::Types::StickerSetInfo>] List of sticker sets.
    class StickerSets < TD::Types::Base
      # Approximate total number of sticker sets found.
      attr_accessor total_count: Integer

      # List of sticker sets.
      attr_accessor sets: ::Array[TD::Types::StickerSetInfo]
    end

    # Describes type of a sticker.
    class StickerType < TD::Types::Base
      # The sticker is a mask in WEBP format to be placed on photos or videos.
      # 
      # @attr mask_position [TD::Types::MaskPosition, nil] Position where the mask is placed; may be null.
      class Mask < TD::Types::StickerType
        # Position where the mask is placed; may be null.
        attr_accessor mask_position: TD::Types::MaskPosition?
      end

      # The sticker is a video in WEBM format.
      class Video < TD::Types::StickerType
      end

      # The sticker is an image in WEBP format.
      class Static < TD::Types::StickerType
      end

      # The sticker is an animation in TGS format.
      class Animated < TD::Types::StickerType
      end
    end

    # Specifies the supported call protocols.
    # 
    # @attr udp_p2p [Boolean] True, if UDP peer-to-peer connections are supported.
    # @attr udp_reflector [Boolean] True, if connection through UDP reflectors is supported.
    # @attr min_layer [Integer] The minimum supported API layer; use 65.
    # @attr max_layer [Integer] The maximum supported API layer; use 65.
    # @attr library_versions [Array<TD::Types::String>] List of supported tgcalls versions.
    class CallProtocol < TD::Types::Base
      # True, if UDP peer-to-peer connections are supported.
      attr_accessor udp_p2p: bool

      # True, if connection through UDP reflectors is supported.
      attr_accessor udp_reflector: bool

      # The minimum supported API layer; use 65.
      attr_accessor min_layer: Integer

      # The maximum supported API layer; use 65.
      attr_accessor max_layer: Integer

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # List of supported tgcalls versions.
      attr_accessor library_versions: ::Array[TD::Types::String]
    end

    # Represents a location to which a chat is connected.
    # 
    # @attr location [TD::Types::Location] The location.
    # @attr address [TD::Types::String] Location address; 1-64 characters, as defined by the chat owner.
    class ChatLocation < TD::Types::Base
      # The location.
      attr_accessor location: TD::Types::Location

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Location address; 1-64 characters, as defined by the chat owner.
      attr_accessor address: TD::Types::String
    end

    # Describes a position of a chat in a chat list.
    # 
    # @attr list [TD::Types::ChatList] The chat list.
    # @attr order [Integer] A parameter used to determine order of the chat in the chat list.
    #   Chats must be sorted by the pair (order, chat.id) in descending order.
    # @attr is_pinned [Boolean] True, if the chat is pinned in the chat list.
    # @attr source [TD::Types::ChatSource, nil] Source of the chat in the chat list; may be null.
    class ChatPosition < TD::Types::Base
      # The chat list.
      attr_accessor list: TD::Types::ChatList

      # A parameter used to determine order of the chat in the chat list.
      # Chats must be sorted by the pair (order, chat.id) in descending order.
      attr_accessor order: Integer

      # True, if the chat is pinned in the chat list.
      attr_accessor is_pinned: bool

      # Source of the chat in the chat list; may be null.
      attr_accessor source: TD::Types::ChatSource?
    end

    # Contains animated stickers which must be used for dice animation rendering.
    class DiceStickers < TD::Types::Base
      # A regular animated sticker.
      # 
      # @attr sticker [TD::Types::Sticker] The animated sticker with the dice animation.
      class Regular < TD::Types::DiceStickers
        # The animated sticker with the dice animation.
        attr_accessor sticker: TD::Types::Sticker
      end

      # Animated stickers to be combined into a slot machine.
      # 
      # @attr background [TD::Types::Sticker] The animated sticker with the slot machine background.
      #   The background animation must start playing after all reel animations finish.
      # @attr lever [TD::Types::Sticker] The animated sticker with the lever animation.
      #   The lever animation must play once in the initial dice state.
      # @attr left_reel [TD::Types::Sticker] The animated sticker with the left reel.
      # @attr center_reel [TD::Types::Sticker] The animated sticker with the center reel.
      # @attr right_reel [TD::Types::Sticker] The animated sticker with the right reel.
      class SlotMachine < TD::Types::DiceStickers
        # The animated sticker with the slot machine background.
        # The background animation must start playing after all reel animations finish.
        attr_accessor background: TD::Types::Sticker

        # The animated sticker with the lever animation.
        # The lever animation must play once in the initial dice state.
        attr_accessor lever: TD::Types::Sticker

        # The animated sticker with the left reel.
        attr_accessor left_reel: TD::Types::Sticker

        # The animated sticker with the center reel.
        attr_accessor center_reel: TD::Types::Sticker

        # The animated sticker with the right reel.
        attr_accessor right_reel: TD::Types::Sticker
      end
    end

    # Contains information about a message draft.
    # 
    # @attr reply_to_message_id [Integer] Identifier of the message to reply to; 0 if none.
    # @attr date [Integer] Point in time (Unix timestamp) when the draft was created.
    # @attr input_message_text [TD::Types::InputMessageContent] Content of the message draft; must be of the type
    #   inputMessageText.
    class DraftMessage < TD::Types::Base
      # Identifier of the message to reply to; 0 if none.
      attr_accessor reply_to_message_id: Integer

      # Point in time (Unix timestamp) when the draft was created.
      attr_accessor date: Integer

      # Content of the message draft; must be of the type
      # inputMessageText.
      attr_accessor input_message_text: TD::Types::InputMessageContent
    end

    # Contains the group call identifier.
    # 
    # @attr id [Integer] Group call identifier.
    class GroupCallId < TD::Types::Base
      # Group call identifier.
      attr_accessor id: Integer
    end

    # A sticker to be added to a sticker set.
    # 
    # @attr sticker [TD::Types::InputFile] File with the sticker; must fit in a 512x512 square.
    #   For WEBP stickers and masks the file must be in PNG format, which will be converted to WEBP server-side.
    #   Otherwise, the file must be local or uploaded within a week.
    #   See https://core.telegram.org/animated_stickers#technical-requirements for technical requirements.
    # @attr emojis [TD::Types::String] Emojis corresponding to the sticker.
    # @attr type [TD::Types::StickerType] Sticker type.
    class InputSticker < TD::Types::Base
      # File with the sticker; must fit in a 512x512 square.
      # For WEBP stickers and masks the file must be in PNG format, which will be converted to WEBP server-side.
      # Otherwise, the file must be local or uploaded within a week.
      # See https://core.telegram.org/animated_stickers#technical-requirements for technical requirements.
      attr_accessor sticker: TD::Types::InputFile

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Emojis corresponding to the sticker.
      attr_accessor emojis: TD::Types::String

      # Sticker type.
      attr_accessor type: TD::Types::StickerType
    end

    # Position on a photo where a mask is placed.
    # 
    # @attr point [TD::Types::MaskPoint] Part of the face, relative to which the mask is placed.
    # @attr x_shift [Float] Shift by X-axis measured in widths of the mask scaled to the face size, from left to right.
    #   (For example, -1.0 will place the mask just to the left of the default mask position).
    # @attr y_shift [Float] Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom.
    #   (For example, 1.0 will place the mask just below the default mask position).
    # @attr scale [Float] Mask scaling coefficient.
    #   (For example, 2.0 means a doubled size).
    class MaskPosition < TD::Types::Base
      # Part of the face, relative to which the mask is placed.
      attr_accessor point: TD::Types::MaskPoint

      # Shift by X-axis measured in widths of the mask scaled to the face size, from left to right.
      # (For example, -1.0 will place the mask just to the left of the default mask position).
      attr_accessor x_shift: Float

      # Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom.
      # (For example, 1.0 will place the mask just below the default mask position).
      attr_accessor y_shift: Float

      # Mask scaling coefficient.
      # (For example, 2.0 means a doubled size).
      attr_accessor scale: Float
    end

    # Thumbnail image of a very poor quality and low resolution.
    # 
    # @attr width [Integer] Thumbnail width, usually doesn't exceed 40.
    # @attr height [Integer] Thumbnail height, usually doesn't exceed 40.
    # @attr data [String] The thumbnail in JPEG format.
    class Minithumbnail < TD::Types::Base
      # Thumbnail width, usually doesn't exceed 40.
      attr_accessor width: Integer

      # Thumbnail height, usually doesn't exceed 40.
      attr_accessor height: Integer

      # The thumbnail in JPEG format.
      attr_accessor data: String
    end

    # Describes a user profile photo.
    # 
    # @attr id [Integer] Photo identifier; 0 for an empty photo.
    #   Can be used to find a photo in a list of user profile photos.
    # @attr small [TD::Types::File] A small (160x160) user profile photo.
    #   The file can be downloaded only before the photo is changed.
    # @attr big [TD::Types::File] A big (640x640) user profile photo.
    #   The file can be downloaded only before the photo is changed.
    # @attr minithumbnail [TD::Types::Minithumbnail, nil] User profile photo minithumbnail; may be null.
    # @attr has_animation [Boolean] True, if the photo has animated variant.
    class ProfilePhoto < TD::Types::Base
      # Photo identifier; 0 for an empty photo.
      # Can be used to find a photo in a list of user profile photos.
      attr_accessor id: Integer

      # A small (160x160) user profile photo.
      # The file can be downloaded only before the photo is changed.
      attr_accessor small: TD::Types::File

      # A big (640x640) user profile photo.
      # The file can be downloaded only before the photo is changed.
      attr_accessor big: TD::Types::File

      # User profile photo minithumbnail; may be null.
      attr_accessor minithumbnail: TD::Types::Minithumbnail?

      # True, if the photo has animated variant.
      attr_accessor has_animation: bool
    end

    # Describes the type of a URL linking to an internal Telegram entity.
    class TMeUrlType < TD::Types::Base
      # A URL linking to a user.
      # 
      # @attr user_id [Integer] Identifier of the user.
      class User < TD::Types::TMeUrlType
        # Identifier of the user.
        attr_accessor user_id: Integer
      end

      # A URL linking to a public supergroup or channel.
      # 
      # @attr supergroup_id [Integer] Identifier of the supergroup or channel.
      class Supergroup < TD::Types::TMeUrlType
        # Identifier of the supergroup or channel.
        attr_accessor supergroup_id: Integer
      end

      # A chat invite link.
      # 
      # @attr info [TD::Types::ChatInviteLinkInfo] Chat invite link info.
      class ChatInvite < TD::Types::TMeUrlType
        # Chat invite link info.
        attr_accessor info: TD::Types::ChatInviteLinkInfo
      end

      # A URL linking to a sticker set.
      # 
      # @attr sticker_set_id [Integer] Identifier of the sticker set.
      class StickerSet < TD::Types::TMeUrlType
        # Identifier of the sticker set.
        attr_accessor sticker_set_id: Integer
      end
    end

    # Contains a list of text entities.
    # 
    # @attr entities [Array<TD::Types::TextEntity>] List of text entities.
    class TextEntities < TD::Types::Base
      # List of text entities.
      attr_accessor entities: ::Array[TD::Types::TextEntity]
    end

    # Represents a reaction applied to a message.
    # 
    # @attr reaction [TD::Types::String] Text representation of the reaction.
    # @attr sender_id [TD::Types::MessageSender] Identifier of the chat member, applied the reaction.
    class AddedReaction < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Text representation of the reaction.
      attr_accessor reaction: TD::Types::String

      # Identifier of the chat member, applied the reaction.
      attr_accessor sender_id: TD::Types::MessageSender
    end

    # Describes an animated representation of an emoji.
    # 
    # @attr sticker [TD::Types::Sticker] Animated sticker for the emoji.
    # @attr fitzpatrick_type [Integer] Emoji modifier fitzpatrick type; 0-6; 0 if none.
    # @attr sound [TD::Types::File, nil] File containing the sound to be played when the animated emoji is clicked if
    #   any; may be null.
    #   The sound is encoded with the Opus codec, and stored inside an OGG container.
    class AnimatedEmoji < TD::Types::Base
      # Animated sticker for the emoji.
      attr_accessor sticker: TD::Types::Sticker

      # Emoji modifier fitzpatrick type; 0-6; 0 if none.
      attr_accessor fitzpatrick_type: Integer

      # File containing the sound to be played when the animated emoji is clicked if
      # any; may be null.
      # The sound is encoded with the Opus codec, and stored inside an OGG container.
      attr_accessor sound: TD::Types::File?
    end

    # Information about a bank card.
    # 
    # @attr title [TD::Types::String] Title of the bank card description.
    # @attr actions [Array<TD::Types::BankCardActionOpenUrl>] Actions that can be done with the bank card number.
    class BankCardInfo < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Title of the bank card description.
      attr_accessor title: TD::Types::String

      # Actions that can be done with the bank card number.
      attr_accessor actions: ::Array[TD::Types::BankCardActionOpenUrl]
    end

    # Contains information about a tg: deep link.
    # 
    # @attr text [TD::Types::FormattedText] Text to be shown to the user.
    # @attr need_update_application [Boolean] True, if the user must be asked to update the application.
    class DeepLinkInfo < TD::Types::Base
      # Text to be shown to the user.
      attr_accessor text: TD::Types::FormattedText

      # True, if the user must be asked to update the application.
      attr_accessor need_update_application: bool
    end

    # A text with some entities.
    # 
    # @attr text [TD::Types::String] The text.
    # @attr entities [Array<TD::Types::TextEntity>] Entities contained in the text.
    #   Entities can be nested, but must not mutually intersect with each other.
    #   Pre, Code and PreCode entities can't contain other entities.
    #   Bold, Italic, Underline, Strikethrough, and Spoiler entities can contain and to be contained in all other
    #   entities.
    #   All other entities can't contain each other.
    class FormattedText < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # The text.
      attr_accessor text: TD::Types::String

      # Entities contained in the text.
      # Entities can be nested, but must not mutually intersect with each other.
      # Pre, Code and PreCode entities can't contain other entities.
      # Bold, Italic, Underline, Strikethrough, and Spoiler entities can contain and to be contained in all other
      # entities.
      # All other entities can't contain each other.
      attr_accessor entities: ::Array[TD::Types::TextEntity]
    end

    # Contains a list of messages found by a search.
    # 
    # @attr total_count [Integer] Approximate total count of messages found; -1 if unknown.
    # @attr messages [Array<TD::Types::Message>] List of messages.
    # @attr next_offset [TD::Types::String] The offset for the next request.
    #   If empty, there are no more results.
    class FoundMessages < TD::Types::Base
      # Approximate total count of messages found; -1 if unknown.
      attr_accessor total_count: Integer

      # List of messages.
      attr_accessor messages: ::Array[TD::Types::Message]

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # The offset for the next request.
      # If empty, there are no more results.
      attr_accessor next_offset: TD::Types::String
    end

    # Contains information about an inline button of type inlineKeyboardButtonTypeLoginUrl.
    class LoginUrlInfo < TD::Types::Base
      # An HTTP url needs to be open.
      # 
      # @attr url [TD::Types::String] The URL to open.
      # @attr skip_confirm [Boolean] True, if there is no need to show an ordinary open URL confirm.
      class Open < TD::Types::LoginUrlInfo
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # The URL to open.
        attr_accessor url: TD::Types::String

        # True, if there is no need to show an ordinary open URL confirm.
        attr_accessor skip_confirm: bool
      end

      # An authorization confirmation dialog needs to be shown to the user.
      # 
      # @attr url [TD::Types::String] An HTTP URL to be opened.
      # @attr domain [TD::Types::String] A domain of the URL.
      # @attr bot_user_id [Integer] User identifier of a bot linked with the website.
      # @attr request_write_access [Boolean] True, if the user needs to be requested to give the permission to the bot to
      #   send them messages.
      class RequestConfirmation < TD::Types::LoginUrlInfo
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # An HTTP URL to be opened.
        attr_accessor url: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # A domain of the URL.
        attr_accessor domain: TD::Types::String

        # User identifier of a bot linked with the website.
        attr_accessor bot_user_id: Integer

        # True, if the user needs to be requested to give the permission to the bot to
        # send them messages.
        attr_accessor request_write_access: bool
      end
    end

    # Contains information about the sender of a message.
    class MessageSender < TD::Types::Base
      # The message was sent on behalf of a chat.
      # 
      # @attr chat_id [Integer] Identifier of the chat that sent the message.
      class Chat < TD::Types::MessageSender
        # Identifier of the chat that sent the message.
        attr_accessor chat_id: Integer
      end

      # The message was sent by a known user.
      # 
      # @attr user_id [Integer] Identifier of the user that sent the message.
      class User < TD::Types::MessageSender
        # Identifier of the user that sent the message.
        attr_accessor user_id: Integer
      end
    end

    # Represents the current state of 2-step verification.
    # 
    # @attr has_password [Boolean] True, if a 2-step verification password is set.
    # @attr password_hint [TD::Types::String, nil] Hint for the password; may be empty.
    # @attr has_recovery_email_address [Boolean] True, if a recovery email is set.
    # @attr has_passport_data [Boolean] True, if some Telegram Passport elements were saved.
    # @attr recovery_email_address_code_info [TD::Types::EmailAddressAuthenticationCodeInfo, nil] Information about the
    #   recovery email address to which the confirmation email was sent; may be null.
    # @attr pending_reset_date [Integer] If not 0, point in time (Unix timestamp) after which the password can be reset
    #   immediately using resetPassword.
    class PasswordState < TD::Types::Base
      # True, if a 2-step verification password is set.
      attr_accessor has_password: bool

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Hint for the password; may be empty.
      attr_accessor password_hint: TD::Types::String?

      # True, if a recovery email is set.
      attr_accessor has_recovery_email_address: bool

      # True, if some Telegram Passport elements were saved.
      attr_accessor has_passport_data: bool

      # Information about the
      # recovery email address to which the confirmation email was sent; may be null.
      attr_accessor recovery_email_address_code_info: TD::Types::EmailAddressAuthenticationCodeInfo?

      # If not 0, point in time (Unix timestamp) after which the password can be reset
      # immediately using resetPassword.
      attr_accessor pending_reset_date: Integer
    end

    # Contains the result of a payment request.
    # 
    # @attr success [Boolean] True, if the payment request was successful; otherwise the verification_url will be
    #   non-empty.
    # @attr verification_url [TD::Types::String] URL for additional payment credentials verification.
    class PaymentResult < TD::Types::Base
      # True, if the payment request was successful; otherwise the verification_url will be
      # non-empty.
      attr_accessor success: bool

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # URL for additional payment credentials verification.
      attr_accessor verification_url: TD::Types::String
    end

    # Describes theme settings.
    # 
    # @attr accent_color [Integer] Theme accent color in ARGB format.
    # @attr background [TD::Types::Background, nil] The background to be used in chats; may be null.
    # @attr outgoing_message_fill [TD::Types::BackgroundFill] The fill to be used as a background for outgoing messages.
    # @attr animate_outgoing_message_fill [Boolean] If true, the freeform gradient fill needs to be animated on every
    #   sent message.
    # @attr outgoing_message_accent_color [Integer] Accent color of outgoing messages in ARGB format.
    class ThemeSettings < TD::Types::Base
      # Theme accent color in ARGB format.
      attr_accessor accent_color: Integer

      # The background to be used in chats; may be null.
      attr_accessor background: TD::Types::Background?

      # The fill to be used as a background for outgoing messages.
      attr_accessor outgoing_message_fill: TD::Types::BackgroundFill

      # If true, the freeform gradient fill needs to be animated on every
      # sent message.
      attr_accessor animate_outgoing_message_fill: bool

      # Accent color of outgoing messages in ARGB format.
      attr_accessor outgoing_message_accent_color: Integer
    end

    # Contains full information about a user.
    # 
    # @attr photo [TD::Types::ChatPhoto, nil] User profile photo; may be null.
    # @attr is_blocked [Boolean] True, if the user is blocked by the current user.
    # @attr can_be_called [Boolean] True, if the user can be called.
    # @attr supports_video_calls [Boolean] True, if a video call can be created with the user.
    # @attr has_private_calls [Boolean] True, if the user can't be called due to their privacy settings.
    # @attr has_private_forwards [Boolean] True, if the user can't be linked in forwarded messages due to their privacy
    #   settings.
    # @attr need_phone_number_privacy_exception [Boolean] True, if the current user needs to explicitly allow to share
    #   their phone number with the user when the method addContact is used.
    # @attr bio [TD::Types::String] A short user bio.
    # @attr share_text [TD::Types::String] For bots, the text that is shown on the bot's profile page and is sent
    #   together with the link when users share the bot.
    # @attr description [TD::Types::String] For bots, the text shown in the chat with the bot if the chat is empty.
    # @attr group_in_common_count [Integer] Number of group chats where both the other user and the current user are a
    #   member; 0 for the current user.
    # @attr commands [Array<TD::Types::BotCommand>] For bots, list of the bot commands.
    class UserFullInfo < TD::Types::Base
      # User profile photo; may be null.
      attr_accessor photo: TD::Types::ChatPhoto?

      # True, if the user is blocked by the current user.
      attr_accessor is_blocked: bool

      # True, if the user can be called.
      attr_accessor can_be_called: bool

      # True, if a video call can be created with the user.
      attr_accessor supports_video_calls: bool

      # True, if the user can't be called due to their privacy settings.
      attr_accessor has_private_calls: bool

      # True, if the user can't be linked in forwarded messages due to their privacy
      # settings.
      attr_accessor has_private_forwards: bool

      # True, if the current user needs to explicitly allow to share
      # their phone number with the user when the method addContact is used.
      attr_accessor need_phone_number_privacy_exception: bool

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # A short user bio.
      attr_accessor bio: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # For bots, the text that is shown on the bot's profile page and is sent
      # together with the link when users share the bot.
      attr_accessor share_text: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # For bots, the text shown in the chat with the bot if the chat is empty.
      attr_accessor description: TD::Types::String

      # Number of group chats where both the other user and the current user are a
      # member; 0 for the current user.
      attr_accessor group_in_common_count: Integer

      # For bots, list of the bot commands.
      attr_accessor commands: ::Array[TD::Types::BotCommand]
    end

    # Represents a list of reactions added to a message.
    # 
    # @attr total_count [Integer] The total count of found reactions.
    # @attr reactions [Array<TD::Types::AddedReaction>] The list of added reactions.
    # @attr next_offset [TD::Types::String] The offset for the next request.
    #   If empty, there are no more results.
    class AddedReactions < TD::Types::Base
      # The total count of found reactions.
      attr_accessor total_count: Integer

      # The list of added reactions.
      attr_accessor reactions: ::Array[TD::Types::AddedReaction]

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # The offset for the next request.
      # If empty, there are no more results.
      attr_accessor next_offset: TD::Types::String
    end

    # Describes a fill of a background.
    class BackgroundFill < TD::Types::Base
      # Describes a solid fill of a background.
      # 
      # @attr color [Integer] A color of the background in the RGB24 format.
      class Solid < TD::Types::BackgroundFill
        # A color of the background in the RGB24 format.
        attr_accessor color: Integer
      end

      # Describes a gradient fill of a background.
      # 
      # @attr top_color [Integer] A top color of the background in the RGB24 format.
      # @attr bottom_color [Integer] A bottom color of the background in the RGB24 format.
      # @attr rotation_angle [Integer] Clockwise rotation angle of the gradient, in degrees; 0-359.
      #   Must be always divisible by 45.
      class Gradient < TD::Types::BackgroundFill
        # A top color of the background in the RGB24 format.
        attr_accessor top_color: Integer

        # A bottom color of the background in the RGB24 format.
        attr_accessor bottom_color: Integer

        # Clockwise rotation angle of the gradient, in degrees; 0-359.
        # Must be always divisible by 45.
        attr_accessor rotation_angle: Integer
      end

      # Describes a freeform gradient fill of a background.
      # 
      # @attr colors [Array<Integer>] A list of 3 or 4 colors of the freeform gradients in the RGB24 format.
      class FreeformGradient < TD::Types::BackgroundFill
        # A list of 3 or 4 colors of the freeform gradients in the RGB24 format.
        attr_accessor colors: ::Array[Integer]
      end
    end

    # Describes the type of a background.
    class BackgroundType < TD::Types::Base
      # A filled background.
      # 
      # @attr fill [TD::Types::BackgroundFill] The background fill.
      class Fill < TD::Types::BackgroundType
        # The background fill.
        attr_accessor fill: TD::Types::BackgroundFill
      end

      # A PNG or TGV (gzipped subset of SVG with MIME type "application/x-tgwallpattern") pattern to be combined with the
      #   background fill chosen by the user.
      # 
      # @attr fill [TD::Types::BackgroundFill] Fill of the background.
      # @attr intensity [Integer] Intensity of the pattern when it is shown above the filled background; 0-100..
      # @attr is_inverted [Boolean] True, if the background fill must be applied only to the pattern itself.
      #   All other pixels are black in this case.
      #   For dark themes only.
      # @attr is_moving [Boolean] True, if the background needs to be slightly moved when device is tilted.
      class Pattern < TD::Types::BackgroundType
        # Fill of the background.
        attr_accessor fill: TD::Types::BackgroundFill

        # Intensity of the pattern when it is shown above the filled background; 0-100..
        attr_accessor intensity: Integer

        # True, if the background fill must be applied only to the pattern itself.
        # All other pixels are black in this case.
        # For dark themes only.
        attr_accessor is_inverted: bool

        # True, if the background needs to be slightly moved when device is tilted.
        attr_accessor is_moving: bool
      end

      # A wallpaper in JPEG format.
      # 
      # @attr is_blurred [Boolean] True, if the wallpaper must be downscaled to fit in 450x450 square and then box-blurred
      #   with radius 12.
      # @attr is_moving [Boolean] True, if the background needs to be slightly moved when device is tilted.
      class Wallpaper < TD::Types::BackgroundType
        # True, if the wallpaper must be downscaled to fit in 450x450 square and then box-blurred
        # with radius 12.
        attr_accessor is_blurred: bool

        # True, if the background needs to be slightly moved when device is tilted.
        attr_accessor is_moving: bool
      end
    end

    # Describes actions which must be possible to do through a chat action bar.
    class ChatActionBar < TD::Types::Base
      # The chat is a private or secret chat and the other user can be added to the contact list using the method
      #   addContact.
      class AddContact < TD::Types::ChatActionBar
      end

      # The chat can be reported as spam using the method reportChat with the reason chatReportReasonSpam.
      # 
      # @attr can_unarchive [Boolean] If true, the chat was automatically archived and can be moved back to the main chat
      #   list using addChatToList simultaneously with setting chat notification settings to default using
      #   setChatNotificationSettings.
      class ReportSpam < TD::Types::ChatActionBar
        # If true, the chat was automatically archived and can be moved back to the main chat
        # list using addChatToList simultaneously with setting chat notification settings to default using
        # setChatNotificationSettings.
        attr_accessor can_unarchive: bool
      end

      # The chat is a private chat with an administrator of a chat to which the user sent join request.
      # 
      # @attr title [TD::Types::String] Title of the chat to which the join request was sent.
      # @attr is_channel [Boolean] True, if the join request was sent to a channel chat.
      # @attr request_date [Integer] Point in time (Unix timestamp) when the join request was sent.
      class JoinRequest < TD::Types::ChatActionBar
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Title of the chat to which the join request was sent.
        attr_accessor title: TD::Types::String

        # True, if the join request was sent to a channel chat.
        attr_accessor is_channel: bool

        # Point in time (Unix timestamp) when the join request was sent.
        attr_accessor request_date: Integer
      end

      # The chat is a recently created group chat to which new members can be invited.
      class InviteMembers < TD::Types::ChatActionBar
      end

      # The chat is a private or secret chat, which can be reported using the method reportChat, or the other user can be
      #   blocked using the method toggleMessageSenderIsBlocked, or the other user can be added to the contact list using the
      #   method addContact.
      # 
      # @attr can_unarchive [Boolean] If true, the chat was automatically archived and can be moved back to the main chat
      #   list using addChatToList simultaneously with setting chat notification settings to default using
      #   setChatNotificationSettings.
      # @attr distance [Integer] If non-negative, the current user was found by the peer through searchChatsNearby and this
      #   is the distance between the users.
      class ReportAddBlock < TD::Types::ChatActionBar
        # If true, the chat was automatically archived and can be moved back to the main chat
        # list using addChatToList simultaneously with setting chat notification settings to default using
        # setChatNotificationSettings.
        attr_accessor can_unarchive: bool

        # If non-negative, the current user was found by the peer through searchChatsNearby and this
        # is the distance between the users.
        attr_accessor distance: Integer
      end

      # The chat is a private or secret chat with a mutual contact and the user's phone number can be shared with the other
      #   user using the method sharePhoneNumber.
      class SharePhoneNumber < TD::Types::ChatActionBar
      end

      # The chat is a location-based supergroup, which can be reported as having unrelated location using the method
      #   reportChat with the reason chatReportReasonUnrelatedLocation.
      class ReportUnrelatedLocation < TD::Types::ChatActionBar
      end
    end

    # Contains basic information about the photo of a chat.
    # 
    # @attr small [TD::Types::File] A small (160x160) chat photo variant in JPEG format.
    #   The file can be downloaded only before the photo is changed.
    # @attr big [TD::Types::File] A big (640x640) chat photo variant in JPEG format.
    #   The file can be downloaded only before the photo is changed.
    # @attr minithumbnail [TD::Types::Minithumbnail, nil] Chat photo minithumbnail; may be null.
    # @attr has_animation [Boolean] True, if the photo has animated variant.
    class ChatPhotoInfo < TD::Types::Base
      # A small (160x160) chat photo variant in JPEG format.
      # The file can be downloaded only before the photo is changed.
      attr_accessor small: TD::Types::File

      # A big (640x640) chat photo variant in JPEG format.
      # The file can be downloaded only before the photo is changed.
      attr_accessor big: TD::Types::File

      # Chat photo minithumbnail; may be null.
      attr_accessor minithumbnail: TD::Types::Minithumbnail?

      # True, if the photo has animated variant.
      attr_accessor has_animation: bool
    end

    # Contains a detailed statistics about a chat.
    class ChatStatistics < TD::Types::Base
      # A detailed statistics about a channel chat.
      # 
      # @attr period [TD::Types::DateRange] A period to which the statistics applies.
      # @attr member_count [TD::Types::StatisticalValue] Number of members in the chat.
      # @attr mean_view_count [TD::Types::StatisticalValue] Mean number of times the recently sent messages was viewed.
      # @attr mean_share_count [TD::Types::StatisticalValue] Mean number of times the recently sent messages was shared.
      # @attr enabled_notifications_percentage [Float] A percentage of users with enabled notifications for the chat.
      # @attr member_count_graph [TD::Types::StatisticalGraph] A graph containing number of members in the chat.
      # @attr join_graph [TD::Types::StatisticalGraph] A graph containing number of members joined and left the chat.
      # @attr mute_graph [TD::Types::StatisticalGraph] A graph containing number of members muted and unmuted the chat.
      # @attr view_count_by_hour_graph [TD::Types::StatisticalGraph] A graph containing number of message views in a given
      #   hour in the last two weeks.
      # @attr view_count_by_source_graph [TD::Types::StatisticalGraph] A graph containing number of message views per
      #   source.
      # @attr join_by_source_graph [TD::Types::StatisticalGraph] A graph containing number of new member joins per source.
      # @attr language_graph [TD::Types::StatisticalGraph] A graph containing number of users viewed chat messages per
      #   language.
      # @attr message_interaction_graph [TD::Types::StatisticalGraph] A graph containing number of chat message views and
      #   shares.
      # @attr instant_view_interaction_graph [TD::Types::StatisticalGraph] A graph containing number of views of associated
      #   with the chat instant views.
      # @attr recent_message_interactions [Array<TD::Types::ChatStatisticsMessageInteractionInfo>] Detailed statistics
      #   about number of views and shares of recently sent messages.
      class Channel < TD::Types::ChatStatistics
        # A period to which the statistics applies.
        attr_accessor period: TD::Types::DateRange

        # Number of members in the chat.
        attr_accessor member_count: TD::Types::StatisticalValue

        # Mean number of times the recently sent messages was viewed.
        attr_accessor mean_view_count: TD::Types::StatisticalValue

        # Mean number of times the recently sent messages was shared.
        attr_accessor mean_share_count: TD::Types::StatisticalValue

        # A percentage of users with enabled notifications for the chat.
        attr_accessor enabled_notifications_percentage: Float

        # A graph containing number of members in the chat.
        attr_accessor member_count_graph: TD::Types::StatisticalGraph

        # A graph containing number of members joined and left the chat.
        attr_accessor join_graph: TD::Types::StatisticalGraph

        # A graph containing number of members muted and unmuted the chat.
        attr_accessor mute_graph: TD::Types::StatisticalGraph

        # A graph containing number of message views in a given
        # hour in the last two weeks.
        attr_accessor view_count_by_hour_graph: TD::Types::StatisticalGraph

        # A graph containing number of message views per
        # source.
        attr_accessor view_count_by_source_graph: TD::Types::StatisticalGraph

        # A graph containing number of new member joins per source.
        attr_accessor join_by_source_graph: TD::Types::StatisticalGraph

        # A graph containing number of users viewed chat messages per
        # language.
        attr_accessor language_graph: TD::Types::StatisticalGraph

        # A graph containing number of chat message views and
        # shares.
        attr_accessor message_interaction_graph: TD::Types::StatisticalGraph

        # A graph containing number of views of associated
        # with the chat instant views.
        attr_accessor instant_view_interaction_graph: TD::Types::StatisticalGraph

        # Detailed statistics
        # about number of views and shares of recently sent messages.
        attr_accessor recent_message_interactions: ::Array[TD::Types::ChatStatisticsMessageInteractionInfo]
      end

      # A detailed statistics about a supergroup chat.
      # 
      # @attr period [TD::Types::DateRange] A period to which the statistics applies.
      # @attr member_count [TD::Types::StatisticalValue] Number of members in the chat.
      # @attr message_count [TD::Types::StatisticalValue] Number of messages sent to the chat.
      # @attr viewer_count [TD::Types::StatisticalValue] Number of users who viewed messages in the chat.
      # @attr sender_count [TD::Types::StatisticalValue] Number of users who sent messages to the chat.
      # @attr member_count_graph [TD::Types::StatisticalGraph] A graph containing number of members in the chat.
      # @attr join_graph [TD::Types::StatisticalGraph] A graph containing number of members joined and left the chat.
      # @attr join_by_source_graph [TD::Types::StatisticalGraph] A graph containing number of new member joins per source.
      # @attr language_graph [TD::Types::StatisticalGraph] A graph containing distribution of active users per language.
      # @attr message_content_graph [TD::Types::StatisticalGraph] A graph containing distribution of sent messages by
      #   content type.
      # @attr action_graph [TD::Types::StatisticalGraph] A graph containing number of different actions in the chat.
      # @attr day_graph [TD::Types::StatisticalGraph] A graph containing distribution of message views per hour.
      # @attr week_graph [TD::Types::StatisticalGraph] A graph containing distribution of message views per day of week.
      # @attr top_senders [Array<TD::Types::ChatStatisticsMessageSenderInfo>] List of users sent most messages in the last
      #   week.
      # @attr top_administrators [Array<TD::Types::ChatStatisticsAdministratorActionsInfo>] List of most active
      #   administrators in the last week.
      # @attr top_inviters [Array<TD::Types::ChatStatisticsInviterInfo>] List of most active inviters of new members in the
      #   last week.
      class Supergroup < TD::Types::ChatStatistics
        # A period to which the statistics applies.
        attr_accessor period: TD::Types::DateRange

        # Number of members in the chat.
        attr_accessor member_count: TD::Types::StatisticalValue

        # Number of messages sent to the chat.
        attr_accessor message_count: TD::Types::StatisticalValue

        # Number of users who viewed messages in the chat.
        attr_accessor viewer_count: TD::Types::StatisticalValue

        # Number of users who sent messages to the chat.
        attr_accessor sender_count: TD::Types::StatisticalValue

        # A graph containing number of members in the chat.
        attr_accessor member_count_graph: TD::Types::StatisticalGraph

        # A graph containing number of members joined and left the chat.
        attr_accessor join_graph: TD::Types::StatisticalGraph

        # A graph containing number of new member joins per source.
        attr_accessor join_by_source_graph: TD::Types::StatisticalGraph

        # A graph containing distribution of active users per language.
        attr_accessor language_graph: TD::Types::StatisticalGraph

        # A graph containing distribution of sent messages by
        # content type.
        attr_accessor message_content_graph: TD::Types::StatisticalGraph

        # A graph containing number of different actions in the chat.
        attr_accessor action_graph: TD::Types::StatisticalGraph

        # A graph containing distribution of message views per hour.
        attr_accessor day_graph: TD::Types::StatisticalGraph

        # A graph containing distribution of message views per day of week.
        attr_accessor week_graph: TD::Types::StatisticalGraph

        # List of users sent most messages in the last
        # week.
        attr_accessor top_senders: ::Array[TD::Types::ChatStatisticsMessageSenderInfo]

        # List of most active
        # administrators in the last week.
        attr_accessor top_administrators: ::Array[TD::Types::ChatStatisticsAdministratorActionsInfo]

        # List of most active inviters of new members in the
        # last week.
        attr_accessor top_inviters: ::Array[TD::Types::ChatStatisticsInviterInfo]
      end
    end

    # Contains one row of the game high score table.
    # 
    # @attr position [Integer] Position in the high score table.
    # @attr user_id [Integer] User identifier.
    # @attr score [Integer] User score.
    class GameHighScore < TD::Types::Base
      # Position in the high score table.
      attr_accessor position: Integer

      # User identifier.
      attr_accessor user_id: Integer

      # User score.
      attr_accessor score: Integer
    end

    # A thumbnail to be sent along with a file; must be in JPEG or WEBP format for stickers, and less than 200 KB in
    #   size.
    # 
    # @attr thumbnail [TD::Types::InputFile] Thumbnail file to send.
    #   Sending thumbnails by file_id is currently not supported.
    # @attr width [Integer] Thumbnail width, usually shouldn't exceed 320.
    #   Use 0 if unknown.
    # @attr height [Integer] Thumbnail height, usually shouldn't exceed 320.
    #   Use 0 if unknown.
    class InputThumbnail < TD::Types::Base
      # Thumbnail file to send.
      # Sending thumbnails by file_id is currently not supported.
      attr_accessor thumbnail: TD::Types::InputFile

      # Thumbnail width, usually shouldn't exceed 320.
      # Use 0 if unknown.
      attr_accessor width: Integer

      # Thumbnail height, usually shouldn't exceed 320.
      # Use 0 if unknown.
      attr_accessor height: Integer
    end

    # Represents a single button in a bot keyboard.
    # 
    # @attr text [TD::Types::String] Text of the button.
    # @attr type [TD::Types::KeyboardButtonType] Type of the button.
    class KeyboardButton < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Text of the button.
      attr_accessor text: TD::Types::String

      # Type of the button.
      attr_accessor type: TD::Types::KeyboardButtonType
    end

    # Contains the content of a message.
    class MessageContent < TD::Types::Base
      # A message with information about an ended call.
      # 
      # @attr is_video [Boolean] True, if the call was a video call.
      # @attr discard_reason [TD::Types::CallDiscardReason] Reason why the call was discarded.
      # @attr duration [Integer] Call duration, in seconds.
      class Call < TD::Types::MessageContent
        # True, if the call was a video call.
        attr_accessor is_video: bool

        # Reason why the call was discarded.
        attr_accessor discard_reason: TD::Types::CallDiscardReason

        # Call duration, in seconds.
        attr_accessor duration: Integer
      end

      # A dice message.
      # The dice value is randomly generated by the server.
      # 
      # @attr initial_state [TD::Types::DiceStickers, nil] The animated stickers with the initial dice animation; may be
      #   null if unknown.
      #   {TD::Types::Update::MessageContent} will be sent when the sticker became known.
      # @attr final_state [TD::Types::DiceStickers, nil] The animated stickers with the final dice animation; may be null
      #   if unknown.
      #   {TD::Types::Update::MessageContent} will be sent when the sticker became known.
      # @attr emoji [TD::Types::String] Emoji on which the dice throw animation is based.
      # @attr value [Integer] The dice value.
      #   If the value is 0, the dice don't have final state yet.
      # @attr success_animation_frame_number [Integer] Number of frame after which a success animation like a shower of
      #   confetti needs to be shown on updateMessageSendSucceeded.
      class Dice < TD::Types::MessageContent
        # The animated stickers with the initial dice animation; may be
        # null if unknown.
        # {TD::Types::Update::MessageContent} will be sent when the sticker became known.
        attr_accessor initial_state: TD::Types::DiceStickers?

        # The animated stickers with the final dice animation; may be null
        # if unknown.
        # {TD::Types::Update::MessageContent} will be sent when the sticker became known.
        attr_accessor final_state: TD::Types::DiceStickers?

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Emoji on which the dice throw animation is based.
        attr_accessor emoji: TD::Types::String

        # The dice value.
        # If the value is 0, the dice don't have final state yet.
        attr_accessor value: Integer

        # Number of frame after which a success animation like a shower of
        # confetti needs to be shown on updateMessageSendSucceeded.
        attr_accessor success_animation_frame_number: Integer
      end

      # A message with a game.
      # 
      # @attr game [TD::Types::Game] The game description.
      class Game < TD::Types::MessageContent
        # The game description.
        attr_accessor game: TD::Types::Game
      end

      # A message with a poll.
      # 
      # @attr poll [TD::Types::Poll] The poll description.
      class Poll < TD::Types::MessageContent
        # The poll description.
        attr_accessor poll: TD::Types::Poll
      end

      # A text message.
      # 
      # @attr text [TD::Types::FormattedText] Text of the message.
      # @attr web_page [TD::Types::WebPage, nil] A preview of the web page that's mentioned in the text; may be null.
      class Text < TD::Types::MessageContent
        # Text of the message.
        attr_accessor text: TD::Types::FormattedText

        # A preview of the web page that's mentioned in the text; may be null.
        attr_accessor web_page: TD::Types::WebPage?
      end

      # An audio message.
      # 
      # @attr audio [TD::Types::Audio] The audio description.
      # @attr caption [TD::Types::FormattedText] Audio caption.
      class Audio < TD::Types::MessageContent
        # The audio description.
        attr_accessor audio: TD::Types::Audio

        # Audio caption.
        attr_accessor caption: TD::Types::FormattedText
      end

      # A photo message.
      # 
      # @attr photo [TD::Types::Photo] The photo description.
      # @attr caption [TD::Types::FormattedText] Photo caption.
      # @attr is_secret [Boolean] True, if the photo must be blurred and must be shown only while tapped.
      class Photo < TD::Types::MessageContent
        # The photo description.
        attr_accessor photo: TD::Types::Photo

        # Photo caption.
        attr_accessor caption: TD::Types::FormattedText

        # True, if the photo must be blurred and must be shown only while tapped.
        attr_accessor is_secret: bool
      end

      # A message with information about a venue.
      # 
      # @attr venue [TD::Types::Venue] The venue description.
      class Venue < TD::Types::MessageContent
        # The venue description.
        attr_accessor venue: TD::Types::Venue
      end

      # A video message.
      # 
      # @attr video [TD::Types::Video] The video description.
      # @attr caption [TD::Types::FormattedText] Video caption.
      # @attr is_secret [Boolean] True, if the video thumbnail must be blurred and the video must be shown only while
      #   tapped.
      class Video < TD::Types::MessageContent
        # The video description.
        attr_accessor video: TD::Types::Video

        # Video caption.
        attr_accessor caption: TD::Types::FormattedText

        # True, if the video thumbnail must be blurred and the video must be shown only while
        # tapped.
        attr_accessor is_secret: bool
      end

      # A message with a user contact.
      # 
      # @attr contact [TD::Types::Contact] The contact description.
      class Contact < TD::Types::MessageContent
        # The contact description.
        attr_accessor contact: TD::Types::Contact
      end

      # A message with an invoice from a bot.
      # 
      # @attr title [TD::Types::String] Product title.
      # @attr description [TD::Types::String] Product description.
      # @attr photo [TD::Types::Photo, nil] Product photo; may be null.
      # @attr currency [TD::Types::String] Currency for the product price.
      # @attr total_amount [Integer] Product total price in the smallest units of the currency.
      # @attr start_parameter [TD::Types::String] Unique invoice bot start_parameter.
      #   To share an invoice use the URL https://t.me/{bot_username}?start={start_parameter}.
      # @attr is_test [Boolean] True, if the invoice is a test invoice.
      # @attr need_shipping_address [Boolean] True, if the shipping address must be specified.
      # @attr receipt_message_id [Integer] The identifier of the message with the receipt, after the product has been
      #   purchased.
      class Invoice < TD::Types::MessageContent
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Product title.
        attr_accessor title: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Product description.
        attr_accessor description: TD::Types::String

        # Product photo; may be null.
        attr_accessor photo: TD::Types::Photo?

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Currency for the product price.
        attr_accessor currency: TD::Types::String

        # Product total price in the smallest units of the currency.
        attr_accessor total_amount: Integer

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Unique invoice bot start_parameter.
        # To share an invoice use the URL https://t.me/{bot_username}?start={start_parameter}.
        attr_accessor start_parameter: TD::Types::String

        # True, if the invoice is a test invoice.
        attr_accessor is_test: bool

        # True, if the shipping address must be specified.
        attr_accessor need_shipping_address: bool

        # The identifier of the message with the receipt, after the product has been
        # purchased.
        attr_accessor receipt_message_id: Integer
      end

      # A sticker message.
      # 
      # @attr sticker [TD::Types::Sticker] The sticker description.
      class Sticker < TD::Types::MessageContent
        # The sticker description.
        attr_accessor sticker: TD::Types::Sticker
      end

      # A document message (general file).
      # 
      # @attr document [TD::Types::Document] The document description.
      # @attr caption [TD::Types::FormattedText] Document caption.
      class Document < TD::Types::MessageContent
        # The document description.
        attr_accessor document: TD::Types::Document

        # Document caption.
        attr_accessor caption: TD::Types::FormattedText
      end

      # A message with a location.
      # 
      # @attr location [TD::Types::Location] The location description.
      # @attr live_period [Integer] Time relative to the message send date, for which the location can be updated, in
      #   seconds.
      # @attr expires_in [Integer] Left time for which the location can be updated, in seconds.
      #   {TD::Types::Update::MessageContent} is not sent when this field changes.
      # @attr heading [Integer] For live locations, a direction in which the location moves, in degrees; 1-360.
      #   If 0 the direction is unknown.
      # @attr proximity_alert_radius [Integer] For live locations, a maximum distance to another chat member for proximity
      #   alerts, in meters (0-100000).
      #   0 if the notification is disabled.
      #   Available only for the message sender.
      class Location < TD::Types::MessageContent
        # The location description.
        attr_accessor location: TD::Types::Location

        # Time relative to the message send date, for which the location can be updated, in
        # seconds.
        attr_accessor live_period: Integer

        # Left time for which the location can be updated, in seconds.
        # {TD::Types::Update::MessageContent} is not sent when this field changes.
        attr_accessor expires_in: Integer

        # For live locations, a direction in which the location moves, in degrees; 1-360.
        # If 0 the direction is unknown.
        attr_accessor heading: Integer

        # For live locations, a maximum distance to another chat member for proximity
        # alerts, in meters (0-100000).
        # 0 if the notification is disabled.
        # Available only for the message sender.
        attr_accessor proximity_alert_radius: Integer
      end

      # An animation message (GIF-style)..
      # 
      # @attr animation [TD::Types::Animation] The animation description.
      # @attr caption [TD::Types::FormattedText] Animation caption.
      # @attr is_secret [Boolean] True, if the animation thumbnail must be blurred and the animation must be shown only
      #   while tapped.
      class Animation < TD::Types::MessageContent
        # The animation description.
        attr_accessor animation: TD::Types::Animation

        # Animation caption.
        attr_accessor caption: TD::Types::FormattedText

        # True, if the animation thumbnail must be blurred and the animation must be shown only
        # while tapped.
        attr_accessor is_secret: bool
      end

      # A new high score was achieved in a game.
      # 
      # @attr game_message_id [Integer] Identifier of the message with the game, can be an identifier of a deleted message.
      # @attr game_id [Integer] Identifier of the game; may be different from the games presented in the message with the
      #   game.
      # @attr score [Integer] New score.
      class GameScore < TD::Types::MessageContent
        # Identifier of the message with the game, can be an identifier of a deleted message.
        attr_accessor game_message_id: Integer

        # Identifier of the game; may be different from the games presented in the message with the
        # game.
        attr_accessor game_id: Integer

        # New score.
        attr_accessor score: Integer
      end

      # A video note message.
      # 
      # @attr video_note [TD::Types::VideoNote] The video note description.
      # @attr is_viewed [Boolean] True, if at least one of the recipients has viewed the video note.
      # @attr is_secret [Boolean] True, if the video note thumbnail must be blurred and the video note must be shown only
      #   while tapped.
      class VideoNote < TD::Types::MessageContent
        # The video note description.
        attr_accessor video_note: TD::Types::VideoNote

        # True, if at least one of the recipients has viewed the video note.
        attr_accessor is_viewed: bool

        # True, if the video note thumbnail must be blurred and the video note must be shown only
        # while tapped.
        attr_accessor is_secret: bool
      end

      # A voice note message.
      # 
      # @attr voice_note [TD::Types::VoiceNote] The voice note description.
      # @attr caption [TD::Types::FormattedText] Voice note caption.
      # @attr is_listened [Boolean] True, if at least one of the recipients has listened to the voice note.
      class VoiceNote < TD::Types::MessageContent
        # The voice note description.
        attr_accessor voice_note: TD::Types::VoiceNote

        # Voice note caption.
        attr_accessor caption: TD::Types::FormattedText

        # True, if at least one of the recipients has listened to the voice note.
        attr_accessor is_listened: bool
      end

      # A message has been pinned.
      # 
      # @attr message_id [Integer] Identifier of the pinned message, can be an identifier of a deleted message or 0.
      class PinMessage < TD::Types::MessageContent
        # Identifier of the pinned message, can be an identifier of a deleted message or 0.
        attr_accessor message_id: Integer
      end

      # Message content that is not supported in the current TDLib version.
      class Unsupported < TD::Types::MessageContent
      end

      # The TTL (Time To Live) setting for messages in the chat has been changed.
      # 
      # @attr ttl [Integer] New message TTL.
      class ChatSetTtl < TD::Types::MessageContent
        # New message TTL.
        attr_accessor ttl: Integer
      end

      # An expired photo message (self-destructed after TTL has elapsed).
      class ExpiredPhoto < TD::Types::MessageContent
      end

      # An expired video message (self-destructed after TTL has elapsed).
      class ExpiredVideo < TD::Types::MessageContent
      end

      # A message with an animated emoji.
      # 
      # @attr animated_emoji [TD::Types::AnimatedEmoji] The animated emoji.
      # @attr emoji [TD::Types::String] The corresponding emoji.
      class AnimatedEmoji < TD::Types::MessageContent
        # The animated emoji.
        attr_accessor animated_emoji: TD::Types::AnimatedEmoji

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # The corresponding emoji.
        attr_accessor emoji: TD::Types::String
      end

      # A theme in the chat has been changed.
      # 
      # @attr theme_name [TD::Types::String] If non-empty, name of a new theme, set for the chat.
      #   Otherwise chat theme was reset to the default one.
      class ChatSetTheme < TD::Types::MessageContent
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # If non-empty, name of a new theme, set for the chat.
        # Otherwise chat theme was reset to the default one.
        attr_accessor theme_name: TD::Types::String
      end

      # A basic group was upgraded to a supergroup and was deactivated as the result.
      # 
      # @attr supergroup_id [Integer] Identifier of the supergroup to which the basic group was upgraded.
      class ChatUpgradeTo < TD::Types::MessageContent
        # Identifier of the supergroup to which the basic group was upgraded.
        attr_accessor supergroup_id: Integer
      end

      # New chat members were added.
      # 
      # @attr member_user_ids [Array<Integer>] User identifiers of the new members.
      class ChatAddMembers < TD::Types::MessageContent
        # User identifiers of the new members.
        attr_accessor member_user_ids: ::Array[Integer]
      end

      # A screenshot of a message in the chat has been taken.
      class ScreenshotTaken < TD::Types::MessageContent
      end

      # A message with information about an ended video chat.
      # 
      # @attr duration [Integer] Call duration, in seconds.
      class VideoChatEnded < TD::Types::MessageContent
        # Call duration, in seconds.
        attr_accessor duration: Integer
      end

      # An updated chat photo.
      # 
      # @attr photo [TD::Types::ChatPhoto] New chat photo.
      class ChatChangePhoto < TD::Types::MessageContent
        # New chat photo.
        attr_accessor photo: TD::Types::ChatPhoto
      end

      # An updated chat title.
      # 
      # @attr title [TD::Types::String] New chat title.
      class ChatChangeTitle < TD::Types::MessageContent
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # New chat title.
        attr_accessor title: TD::Types::String
      end

      # A deleted chat photo.
      class ChatDeletePhoto < TD::Types::MessageContent
      end

      # A new member joined the chat via an invite link.
      class ChatJoinByLink < TD::Types::MessageContent
      end

      # A supergroup has been created from a basic group.
      # 
      # @attr title [TD::Types::String] Title of the newly created supergroup.
      # @attr basic_group_id [Integer] The identifier of the original basic group.
      class ChatUpgradeFrom < TD::Types::MessageContent
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Title of the newly created supergroup.
        attr_accessor title: TD::Types::String

        # The identifier of the original basic group.
        attr_accessor basic_group_id: Integer
      end

      # The current user has connected a website by logging in using Telegram Login Widget on it.
      # 
      # @attr domain_name [TD::Types::String] Domain name of the connected website.
      class WebsiteConnected < TD::Types::MessageContent
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Domain name of the connected website.
        attr_accessor domain_name: TD::Types::String
      end

      # A chat member was deleted.
      # 
      # @attr user_id [Integer] User identifier of the deleted chat member.
      class ChatDeleteMember < TD::Types::MessageContent
        # User identifier of the deleted chat member.
        attr_accessor user_id: Integer
      end

      # A contact has registered with Telegram.
      class ContactRegistered < TD::Types::MessageContent
      end

      # Telegram Passport data has been sent.
      # 
      # @attr types [Array<TD::Types::PassportElementType>] List of Telegram Passport element types sent.
      class PassportDataSent < TD::Types::MessageContent
        # List of Telegram Passport element types sent.
        attr_accessor types: ::Array[TD::Types::PassportElementType]
      end

      # A payment has been completed.
      # 
      # @attr invoice_chat_id [Integer] Identifier of the chat, containing the corresponding invoice message; 0 if unknown.
      # @attr invoice_message_id [Integer] Identifier of the message with the corresponding invoice; can be an identifier
      #   of a deleted message.
      # @attr currency [TD::Types::String] Currency for the price of the product.
      # @attr total_amount [Integer] Total price for the product, in the smallest units of the currency.
      class PaymentSuccessful < TD::Types::MessageContent
        # Identifier of the chat, containing the corresponding invoice message; 0 if unknown.
        attr_accessor invoice_chat_id: Integer

        # Identifier of the message with the corresponding invoice; can be an identifier
        # of a deleted message.
        attr_accessor invoice_message_id: Integer

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Currency for the price of the product.
        attr_accessor currency: TD::Types::String

        # Total price for the product, in the smallest units of the currency.
        attr_accessor total_amount: Integer
      end

      # A newly created video chat.
      # 
      # @attr group_call_id [Integer] Identifier of the video chat.
      #   The video chat can be received through the method getGroupCall.
      class VideoChatStarted < TD::Types::MessageContent
        # Identifier of the video chat.
        # The video chat can be received through the method getGroupCall.
        attr_accessor group_call_id: Integer
      end

      # A new member was accepted to the chat by an administrator.
      class ChatJoinByRequest < TD::Types::MessageContent
      end

      # A new video chat was scheduled.
      # 
      # @attr group_call_id [Integer] Identifier of the video chat.
      #   The video chat can be received through the method getGroupCall.
      # @attr start_date [Integer] Point in time (Unix timestamp) when the group call is supposed to be started by an
      #   administrator.
      class VideoChatScheduled < TD::Types::MessageContent
        # Identifier of the video chat.
        # The video chat can be received through the method getGroupCall.
        attr_accessor group_call_id: Integer

        # Point in time (Unix timestamp) when the group call is supposed to be started by an
        # administrator.
        attr_accessor start_date: Integer
      end

      # A non-standard action has happened in the chat.
      # 
      # @attr text [TD::Types::String] Message text to be shown in the chat.
      class CustomServiceAction < TD::Types::MessageContent
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Message text to be shown in the chat.
        attr_accessor text: TD::Types::String
      end

      # Telegram Passport data has been received; for bots only.
      # 
      # @attr elements [Array<TD::Types::EncryptedPassportElement>] List of received Telegram Passport elements.
      # @attr credentials [TD::Types::EncryptedCredentials] Encrypted data credentials.
      class PassportDataReceived < TD::Types::MessageContent
        # List of received Telegram Passport elements.
        attr_accessor elements: ::Array[TD::Types::EncryptedPassportElement]

        # Encrypted data credentials.
        attr_accessor credentials: TD::Types::EncryptedCredentials
      end

      # A payment has been completed; for bots only.
      # 
      # @attr currency [TD::Types::String] Currency for price of the product.
      # @attr total_amount [Integer] Total price for the product, in the smallest units of the currency.
      # @attr invoice_payload [String] Invoice payload.
      # @attr shipping_option_id [TD::Types::String, nil] Identifier of the shipping option chosen by the user; may be
      #   empty if not applicable.
      # @attr order_info [TD::Types::OrderInfo, nil] Information about the order; may be null.
      # @attr telegram_payment_charge_id [TD::Types::String] Telegram payment identifier.
      # @attr provider_payment_charge_id [TD::Types::String] Provider payment identifier.
      class PaymentSuccessfulBot < TD::Types::MessageContent
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Currency for price of the product.
        attr_accessor currency: TD::Types::String

        # Total price for the product, in the smallest units of the currency.
        attr_accessor total_amount: Integer

        # Invoice payload.
        attr_accessor invoice_payload: String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Identifier of the shipping option chosen by the user; may be
        # empty if not applicable.
        attr_accessor shipping_option_id: TD::Types::String?

        # Information about the order; may be null.
        attr_accessor order_info: TD::Types::OrderInfo?

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Telegram payment identifier.
        attr_accessor telegram_payment_charge_id: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Provider payment identifier.
        attr_accessor provider_payment_charge_id: TD::Types::String
      end

      # A newly created supergroup or channel.
      # 
      # @attr title [TD::Types::String] Title of the supergroup or channel.
      class SupergroupChatCreate < TD::Types::MessageContent
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Title of the supergroup or channel.
        attr_accessor title: TD::Types::String
      end

      # A newly created basic group.
      # 
      # @attr title [TD::Types::String] Title of the basic group.
      # @attr member_user_ids [Array<Integer>] User identifiers of members in the basic group.
      class BasicGroupChatCreate < TD::Types::MessageContent
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Title of the basic group.
        attr_accessor title: TD::Types::String

        # User identifiers of members in the basic group.
        attr_accessor member_user_ids: ::Array[Integer]
      end

      # A user in the chat came within proximity alert range.
      # 
      # @attr traveler_id [TD::Types::MessageSender] The identifier of a user or chat that triggered the proximity alert.
      # @attr watcher_id [TD::Types::MessageSender] The identifier of a user or chat that subscribed for the proximity
      #   alert.
      # @attr distance [Integer] The distance between the users.
      class ProximityAlertTriggered < TD::Types::MessageContent
        # The identifier of a user or chat that triggered the proximity alert.
        attr_accessor traveler_id: TD::Types::MessageSender

        # The identifier of a user or chat that subscribed for the proximity
        # alert.
        attr_accessor watcher_id: TD::Types::MessageSender

        # The distance between the users.
        attr_accessor distance: Integer
      end

      # A message with information about an invite to a video chat.
      # 
      # @attr group_call_id [Integer] Identifier of the video chat.
      #   The video chat can be received through the method getGroupCall.
      # @attr user_ids [Array<Integer>] Invited user identifiers.
      class InviteVideoChatParticipants < TD::Types::MessageContent
        # Identifier of the video chat.
        # The video chat can be received through the method getGroupCall.
        attr_accessor group_call_id: Integer

        # Invited user identifiers.
        attr_accessor user_ids: ::Array[Integer]
      end
    end

    # Represents a list of message senders.
    # 
    # @attr total_count [Integer] Approximate total count of messages senders found.
    # @attr senders [Array<TD::Types::MessageSender>] List of message senders.
    class MessageSenders < TD::Types::Base
      # Approximate total count of messages senders found.
      attr_accessor total_count: Integer

      # List of message senders.
      attr_accessor senders: ::Array[TD::Types::MessageSender]
    end

    # Contains information about a successful payment.
    # 
    # @attr title [TD::Types::String] Product title.
    # @attr description [TD::Types::String] Product description.
    # @attr photo [TD::Types::Photo, nil] Product photo; may be null.
    # @attr date [Integer] Point in time (Unix timestamp) when the payment was made.
    # @attr seller_bot_user_id [Integer] User identifier of the seller bot.
    # @attr payments_provider_user_id [Integer] User identifier of the payment provider bot.
    # @attr invoice [TD::Types::Invoice] Information about the invoice.
    # @attr order_info [TD::Types::OrderInfo, nil] Order information; may be null.
    # @attr shipping_option [TD::Types::ShippingOption, nil] Chosen shipping option; may be null.
    # @attr credentials_title [TD::Types::String] Title of the saved credentials chosen by the buyer.
    # @attr tip_amount [Integer] The amount of tip chosen by the buyer in the smallest units of the currency.
    class PaymentReceipt < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Product title.
      attr_accessor title: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Product description.
      attr_accessor description: TD::Types::String

      # Product photo; may be null.
      attr_accessor photo: TD::Types::Photo?

      # Point in time (Unix timestamp) when the payment was made.
      attr_accessor date: Integer

      # User identifier of the seller bot.
      attr_accessor seller_bot_user_id: Integer

      # User identifier of the payment provider bot.
      attr_accessor payments_provider_user_id: Integer

      # Information about the invoice.
      attr_accessor invoice: TD::Types::Invoice

      # Order information; may be null.
      attr_accessor order_info: TD::Types::OrderInfo?

      # Chosen shipping option; may be null.
      attr_accessor shipping_option: TD::Types::ShippingOption?

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Title of the saved credentials chosen by the buyer.
      attr_accessor credentials_title: TD::Types::String

      # The amount of tip chosen by the buyer in the smallest units of the currency.
      attr_accessor tip_amount: Integer
    end

    # One shipping option.
    # 
    # @attr id [TD::Types::String] Shipping option identifier.
    # @attr title [TD::Types::String] Option title.
    # @attr price_parts [Array<TD::Types::LabeledPricePart>] A list of objects used to calculate the total shipping
    #   costs.
    class ShippingOption < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Shipping option identifier.
      attr_accessor id: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Option title.
      attr_accessor title: TD::Types::String

      # A list of objects used to calculate the total shipping
      # costs.
      attr_accessor price_parts: ::Array[TD::Types::LabeledPricePart]
    end

    # Describes the way the text needs to be parsed for TextEntities.
    class TextParseMode < TD::Types::Base
      # The text uses HTML-style formatting.
      # The same as Telegram Bot API "HTML" parse mode.
      class HTML < TD::Types::TextParseMode
      end

      # The text uses Markdown-style formatting.
      # 
      # @attr version [Integer] Version of the parser: 0 or 1 - Telegram Bot API "Markdown" parse mode, 2 - Telegram Bot
      #   API "MarkdownV2" parse mode.
      class Markdown < TD::Types::TextParseMode
        # Version of the parser: 0 or 1 - Telegram Bot API "Markdown" parse mode, 2 - Telegram Bot
        # API "MarkdownV2" parse mode.
        attr_accessor version: Integer
      end
    end

    # Contains information about an unread reaction to a message.
    # 
    # @attr reaction [TD::Types::String] Text representation of the reaction.
    # @attr sender_id [TD::Types::MessageSender] Identifier of the sender, added the reaction.
    # @attr is_big [Boolean] True, if the reaction was added with a big animation.
    class UnreadReaction < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Text representation of the reaction.
      attr_accessor reaction: TD::Types::String

      # Identifier of the sender, added the reaction.
      attr_accessor sender_id: TD::Types::MessageSender

      # True, if the reaction was added with a big animation.
      attr_accessor is_big: bool
    end

    # Describes the type of a call server.
    class CallServerType < TD::Types::Base
      # A WebRTC server.
      # 
      # @attr username [TD::Types::String] Username to be used for authentication.
      # @attr password [TD::Types::String] Authentication password.
      # @attr supports_turn [Boolean] True, if the server supports TURN.
      # @attr supports_stun [Boolean] True, if the server supports STUN.
      class Webrtc < TD::Types::CallServerType
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Username to be used for authentication.
        attr_accessor username: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Authentication password.
        attr_accessor password: TD::Types::String

        # True, if the server supports TURN.
        attr_accessor supports_turn: bool

        # True, if the server supports STUN.
        attr_accessor supports_stun: bool
      end

      # A Telegram call reflector.
      # 
      # @attr peer_tag [String] A peer tag to be used with the reflector.
      class TelegramReflector < TD::Types::CallServerType
        # A peer tag to be used with the reflector.
        attr_accessor peer_tag: String
      end
    end

    # Contains basic information about a chat filter.
    # 
    # @attr id [Integer] Unique chat filter identifier.
    # @attr title [TD::Types::String] The title of the filter; 1-12 characters without line feeds.
    # @attr icon_name [TD::Types::String] The chosen or default icon name for short filter representation.
    #   One of "All", "Unread", "Unmuted", "Bots", "Channels", "Groups", "Private", "Custom", "Setup", "Cat", "Crown",
    #   "Favorite", "Flower", "Game", "Home", "Love", "Mask", "Party", "Sport", "Study", "Trade", "Travel", "Work".
    class ChatFilterInfo < TD::Types::Base
      # Unique chat filter identifier.
      attr_accessor id: Integer

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # The title of the filter; 1-12 characters without line feeds.
      attr_accessor title: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # The chosen or default icon name for short filter representation.
      # One of "All", "Unread", "Unmuted", "Bots", "Channels", "Groups", "Private", "Custom", "Setup", "Cat", "Crown",
      # "Favorite", "Flower", "Game", "Home", "Love", "Mask", "Party", "Sport", "Study", "Trade", "Travel", "Work".
      attr_accessor icon_name: TD::Types::String
    end

    # Contains a chat invite link.
    # 
    # @attr invite_link [TD::Types::String] Chat invite link.
    # @attr name [TD::Types::String] Name of the link.
    # @attr creator_user_id [Integer] User identifier of an administrator created the link.
    # @attr date [Integer] Point in time (Unix timestamp) when the link was created.
    # @attr edit_date [Integer] Point in time (Unix timestamp) when the link was last edited; 0 if never or unknown.
    # @attr expiration_date [Integer] Point in time (Unix timestamp) when the link will expire; 0 if never.
    # @attr member_limit [Integer] The maximum number of members, which can join the chat using the link simultaneously;
    #   0 if not limited.
    #   Always 0 if the link requires approval.
    # @attr member_count [Integer] Number of chat members, which joined the chat using the link.
    # @attr pending_join_request_count [Integer] Number of pending join requests created using this link.
    # @attr creates_join_request [Boolean] True, if the link only creates join request.
    #   If true, total number of joining members will be unlimited.
    # @attr is_primary [Boolean] True, if the link is primary.
    #   Primary invite link can't have name, expiration date, or usage limit.
    #   There is exactly one primary invite link for each administrator with can_invite_users right at a given time.
    # @attr is_revoked [Boolean] True, if the link was revoked.
    class ChatInviteLink < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Chat invite link.
      attr_accessor invite_link: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Name of the link.
      attr_accessor name: TD::Types::String

      # User identifier of an administrator created the link.
      attr_accessor creator_user_id: Integer

      # Point in time (Unix timestamp) when the link was created.
      attr_accessor date: Integer

      # Point in time (Unix timestamp) when the link was last edited; 0 if never or unknown.
      attr_accessor edit_date: Integer

      # Point in time (Unix timestamp) when the link will expire; 0 if never.
      attr_accessor expiration_date: Integer

      # The maximum number of members, which can join the chat using the link simultaneously;
      # 0 if not limited.
      # Always 0 if the link requires approval.
      attr_accessor member_limit: Integer

      # Number of chat members, which joined the chat using the link.
      attr_accessor member_count: Integer

      # Number of pending join requests created using this link.
      attr_accessor pending_join_request_count: Integer

      # True, if the link only creates join request.
      # If true, total number of joining members will be unlimited.
      attr_accessor creates_join_request: bool

      # True, if the link is primary.
      # Primary invite link can't have name, expiration date, or usage limit.
      # There is exactly one primary invite link for each administrator with can_invite_users right at a given time.
      attr_accessor is_primary: bool

      # True, if the link was revoked.
      attr_accessor is_revoked: bool
    end

    # Describes actions that a user is allowed to take in a chat.
    # 
    # @attr can_send_messages [Boolean] True, if the user can send text messages, contacts, locations, and venues.
    # @attr can_send_media_messages [Boolean] True, if the user can send audio files, documents, photos, videos, video
    #   notes, and voice notes.
    #   Implies can_send_messages permissions.
    # @attr can_send_polls [Boolean] True, if the user can send polls.
    #   Implies can_send_messages permissions.
    # @attr can_send_other_messages [Boolean] True, if the user can send animations, games, stickers, and dice and use
    #   inline bots.
    #   Implies can_send_messages permissions.
    # @attr can_add_web_page_previews [Boolean] True, if the user may add a web page preview to their messages.
    #   Implies can_send_messages permissions.
    # @attr can_change_info [Boolean] True, if the user can change the chat title, photo, and other settings.
    # @attr can_invite_users [Boolean] True, if the user can invite new users to the chat.
    # @attr can_pin_messages [Boolean] True, if the user can pin messages.
    class ChatPermissions < TD::Types::Base
      # True, if the user can send text messages, contacts, locations, and venues.
      attr_accessor can_send_messages: bool

      # True, if the user can send audio files, documents, photos, videos, video
      # notes, and voice notes.
      # Implies can_send_messages permissions.
      attr_accessor can_send_media_messages: bool

      # True, if the user can send polls.
      # Implies can_send_messages permissions.
      attr_accessor can_send_polls: bool

      # True, if the user can send animations, games, stickers, and dice and use
      # inline bots.
      # Implies can_send_messages permissions.
      attr_accessor can_send_other_messages: bool

      # True, if the user may add a web page preview to their messages.
      # Implies can_send_messages permissions.
      attr_accessor can_add_web_page_previews: bool

      # True, if the user can change the chat title, photo, and other settings.
      attr_accessor can_change_info: bool

      # True, if the user can invite new users to the chat.
      attr_accessor can_invite_users: bool

      # True, if the user can pin messages.
      attr_accessor can_pin_messages: bool
    end

    # Describes the current state of the connection to Telegram servers.
    class ConnectionState < TD::Types::Base
      # There is a working connection to the Telegram servers.
      class Ready < TD::Types::ConnectionState
      end

      # Downloading data received while the application was offline.
      class Updating < TD::Types::ConnectionState
      end

      # Currently establishing a connection to the Telegram servers.
      class Connecting < TD::Types::ConnectionState
      end

      # Currently establishing a connection with a proxy server.
      class ConnectingToProxy < TD::Types::ConnectionState
      end

      # Currently waiting for the network to become available.
      # Use setNetworkType to change the available network type.
      class WaitingForNetwork < TD::Types::ConnectionState
      end
    end

    # Contains a list of game high scores.
    # 
    # @attr scores [Array<TD::Types::GameHighScore>] A list of game high scores.
    class GameHighScores < TD::Types::Base
      # A list of game high scores.
      attr_accessor scores: ::Array[TD::Types::GameHighScore]
    end

    # Contains information about background to set.
    class InputBackground < TD::Types::Base
      # A background from a local file.
      # 
      # @attr background [TD::Types::InputFile] Background file to use.
      #   Only {TD::Types::InputFile::Local} and {TD::Types::InputFile::Generated} are supported.
      #   The file must be in JPEG format for wallpapers and in PNG format for patterns.
      class Local < TD::Types::InputBackground
        # Background file to use.
        # Only {TD::Types::InputFile::Local} and {TD::Types::InputFile::Generated} are supported.
        # The file must be in JPEG format for wallpapers and in PNG format for patterns.
        attr_accessor background: TD::Types::InputFile
      end

      # A background from the server.
      # 
      # @attr background_id [Integer] The background identifier.
      class Remote < TD::Types::InputBackground
        # The background identifier.
        attr_accessor background_id: Integer
      end
    end

    # Describes a photo to be set as a user profile or chat photo.
    class InputChatPhoto < TD::Types::Base
      # A static photo in JPEG format.
      # 
      # @attr photo [TD::Types::InputFile] Photo to be set as profile photo.
      #   Only {TD::Types::InputFile::Local} and {TD::Types::InputFile::Generated} are allowed.
      class Static < TD::Types::InputChatPhoto
        # Photo to be set as profile photo.
        # Only {TD::Types::InputFile::Local} and {TD::Types::InputFile::Generated} are allowed.
        attr_accessor photo: TD::Types::InputFile
      end

      # A previously used profile photo of the current user.
      # 
      # @attr chat_photo_id [Integer] Identifier of the current user's profile photo to reuse.
      class Previous < TD::Types::InputChatPhoto
        # Identifier of the current user's profile photo to reuse.
        attr_accessor chat_photo_id: Integer
      end

      # An animation in MPEG4 format; must be square, at most 10 seconds long, have width between 160 and 800 and be at
      #   most 2MB in size.
      # 
      # @attr animation [TD::Types::InputFile] Animation to be set as profile photo.
      #   Only {TD::Types::InputFile::Local} and {TD::Types::InputFile::Generated} are allowed.
      # @attr main_frame_timestamp [Float] Timestamp of the frame, which will be used as static chat photo.
      class Animation < TD::Types::InputChatPhoto
        # Animation to be set as profile photo.
        # Only {TD::Types::InputFile::Local} and {TD::Types::InputFile::Generated} are allowed.
        attr_accessor animation: TD::Types::InputFile

        # Timestamp of the frame, which will be used as static chat photo.
        attr_accessor main_frame_timestamp: Float
      end
    end

    # Contains information about found messages, split by days according to the option "utc_time_offset".
    # 
    # @attr total_count [Integer] Total number of found messages.
    # @attr days [Array<TD::Types::MessageCalendarDay>] Information about messages sent.
    class MessageCalendar < TD::Types::Base
      # Total number of found messages.
      attr_accessor total_count: Integer

      # Information about messages sent.
      attr_accessor days: ::Array[TD::Types::MessageCalendarDay]
    end

    # Contains information about a message in a specific position.
    # 
    # @attr position [Integer] 0-based message position in the full list of suitable messages.
    # @attr message_id [Integer] Message identifier.
    # @attr date [Integer] Point in time (Unix timestamp) when the message was sent.
    class MessagePosition < TD::Types::Base
      # 0-based message position in the full list of suitable messages.
      attr_accessor position: Integer

      # Message identifier.
      attr_accessor message_id: Integer

      # Point in time (Unix timestamp) when the message was sent.
      attr_accessor date: Integer
    end

    # Contains information about a reaction to a message.
    # 
    # @attr reaction [TD::Types::String] Text representation of the reaction.
    # @attr total_count [Integer] Number of times the reaction was added.
    # @attr is_chosen [Boolean] True, if the reaction is chosen by the current user.
    # @attr recent_sender_ids [Array<TD::Types::MessageSender>] Identifiers of at most 3 recent message senders, added
    #   the reaction; available in private chats, basic groups and supergroups.
    class MessageReaction < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Text representation of the reaction.
      attr_accessor reaction: TD::Types::String

      # Number of times the reaction was added.
      attr_accessor total_count: Integer

      # True, if the reaction is chosen by the current user.
      attr_accessor is_chosen: bool

      # Identifiers of at most 3 recent message senders, added
      # the reaction; available in private chats, basic groups and supergroups.
      attr_accessor recent_sender_ids: ::Array[TD::Types::MessageSender]
    end

    # Contains information about a Telegram Passport element.
    class PassportElement < TD::Types::Base
      # A Telegram Passport element containing the user's address.
      # 
      # @attr address [TD::Types::Address] Address.
      class Address < TD::Types::PassportElement
        # Address.
        attr_accessor address: TD::Types::Address
      end

      # A Telegram Passport element containing the user's passport.
      # 
      # @attr passport [TD::Types::IdentityDocument] Passport.
      class Passport < TD::Types::PassportElement
        # Passport.
        attr_accessor passport: TD::Types::IdentityDocument
      end

      # A Telegram Passport element containing the user's phone number.
      # 
      # @attr phone_number [TD::Types::String] Phone number.
      class PhoneNumber < TD::Types::PassportElement
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Phone number.
        attr_accessor phone_number: TD::Types::String
      end

      # A Telegram Passport element containing the user's utility bill.
      # 
      # @attr utility_bill [TD::Types::PersonalDocument] Utility bill.
      class UtilityBill < TD::Types::PassportElement
        # Utility bill.
        attr_accessor utility_bill: TD::Types::PersonalDocument
      end

      # A Telegram Passport element containing the user's email address.
      # 
      # @attr email_address [TD::Types::String] Email address.
      class EmailAddress < TD::Types::PassportElement
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Email address.
        attr_accessor email_address: TD::Types::String
      end

      # A Telegram Passport element containing the user's identity card.
      # 
      # @attr identity_card [TD::Types::IdentityDocument] Identity card.
      class IdentityCard < TD::Types::PassportElement
        # Identity card.
        attr_accessor identity_card: TD::Types::IdentityDocument
      end

      # A Telegram Passport element containing the user's bank statement.
      # 
      # @attr bank_statement [TD::Types::PersonalDocument] Bank statement.
      class BankStatement < TD::Types::PassportElement
        # Bank statement.
        attr_accessor bank_statement: TD::Types::PersonalDocument
      end

      # A Telegram Passport element containing the user's driver license.
      # 
      # @attr driver_license [TD::Types::IdentityDocument] Driver license.
      class DriverLicense < TD::Types::PassportElement
        # Driver license.
        attr_accessor driver_license: TD::Types::IdentityDocument
      end

      # A Telegram Passport element containing the user's personal details.
      # 
      # @attr personal_details [TD::Types::PersonalDetails] Personal details of the user.
      class PersonalDetails < TD::Types::PassportElement
        # Personal details of the user.
        attr_accessor personal_details: TD::Types::PersonalDetails
      end

      # A Telegram Passport element containing the user's rental agreement.
      # 
      # @attr rental_agreement [TD::Types::PersonalDocument] Rental agreement.
      class RentalAgreement < TD::Types::PassportElement
        # Rental agreement.
        attr_accessor rental_agreement: TD::Types::PersonalDocument
      end

      # A Telegram Passport element containing the user's internal passport.
      # 
      # @attr internal_passport [TD::Types::IdentityDocument] Internal passport.
      class InternalPassport < TD::Types::PassportElement
        # Internal passport.
        attr_accessor internal_passport: TD::Types::IdentityDocument
      end

      # A Telegram Passport element containing the user's passport registration pages.
      # 
      # @attr passport_registration [TD::Types::PersonalDocument] Passport registration pages.
      class PassportRegistration < TD::Types::PassportElement
        # Passport registration pages.
        attr_accessor passport_registration: TD::Types::PersonalDocument
      end

      # A Telegram Passport element containing the user's temporary registration.
      # 
      # @attr temporary_registration [TD::Types::PersonalDocument] Temporary registration.
      class TemporaryRegistration < TD::Types::PassportElement
        # Temporary registration.
        attr_accessor temporary_registration: TD::Types::PersonalDocument
      end
    end

    # Contains the user's personal details.
    # 
    # @attr first_name [TD::Types::String] First name of the user written in English; 1-255 characters.
    # @attr middle_name [TD::Types::String] Middle name of the user written in English; 0-255 characters.
    # @attr last_name [TD::Types::String] Last name of the user written in English; 1-255 characters.
    # @attr native_first_name [TD::Types::String] Native first name of the user; 1-255 characters.
    # @attr native_middle_name [TD::Types::String] Native middle name of the user; 0-255 characters.
    # @attr native_last_name [TD::Types::String] Native last name of the user; 1-255 characters.
    # @attr birthdate [TD::Types::Date] Birthdate of the user.
    # @attr gender [TD::Types::String] Gender of the user, "male" or "female".
    # @attr country_code [TD::Types::String] A two-letter ISO 3166-1 alpha-2 country code of the user's country.
    # @attr residence_country_code [TD::Types::String] A two-letter ISO 3166-1 alpha-2 country code of the user's
    #   residence country.
    class PersonalDetails < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # First name of the user written in English; 1-255 characters.
      attr_accessor first_name: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Middle name of the user written in English; 0-255 characters.
      attr_accessor middle_name: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Last name of the user written in English; 1-255 characters.
      attr_accessor last_name: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Native first name of the user; 1-255 characters.
      attr_accessor native_first_name: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Native middle name of the user; 0-255 characters.
      attr_accessor native_middle_name: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Native last name of the user; 1-255 characters.
      attr_accessor native_last_name: TD::Types::String

      # Birthdate of the user.
      attr_accessor birthdate: TD::Types::Date

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Gender of the user, "male" or "female".
      attr_accessor gender: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # A two-letter ISO 3166-1 alpha-2 country code of the user's country.
      attr_accessor country_code: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # A two-letter ISO 3166-1 alpha-2 country code of the user's
      # residence country.
      attr_accessor residence_country_code: TD::Types::String
    end

    # Describes a type of public chats.
    class PublicChatType < TD::Types::Base
      # The chat is public, because it has username.
      class HasUsername < TD::Types::PublicChatType
      end

      # The chat is public, because it is a location-based supergroup.
      class IsLocationBased < TD::Types::PublicChatType
      end
    end

    # Contains a globally unique push receiver identifier, which can be used to identify which account has received a
    #   push notification.
    # 
    # @attr id [Integer] The globally unique identifier of push notification subscription.
    class PushReceiverId < TD::Types::Base
      # The globally unique identifier of push notification subscription.
      attr_accessor id: Integer
    end

    # Represents short information about a sticker set.
    # 
    # @attr id [Integer] Identifier of the sticker set.
    # @attr title [TD::Types::String] Title of the sticker set.
    # @attr name [TD::Types::String] Name of the sticker set.
    # @attr thumbnail [TD::Types::Thumbnail, nil] Sticker set thumbnail in WEBP, TGS, or WEBM format with width and
    #   height 100; may be null.
    # @attr thumbnail_outline [Array<TD::Types::ClosedVectorPath>, nil] Sticker set thumbnail's outline represented as a
    #   list of closed vector paths; may be empty.
    #   The coordinate system origin is in the upper-left corner.
    # @attr is_installed [Boolean] True, if the sticker set has been installed by the current user.
    # @attr is_archived [Boolean] True, if the sticker set has been archived.
    #   A sticker set can't be installed and archived simultaneously.
    # @attr is_official [Boolean] True, if the sticker set is official.
    # @attr sticker_type [TD::Types::StickerType] Type of the stickers in the set.
    # @attr is_viewed [Boolean] True for already viewed trending sticker sets.
    # @attr size [Integer] Total number of stickers in the set.
    # @attr covers [Array<TD::Types::Sticker>] Up to the first 5 stickers from the set, depending on the context.
    #   If the application needs more stickers the full sticker set needs to be requested.
    class StickerSetInfo < TD::Types::Base
      # Identifier of the sticker set.
      attr_accessor id: Integer

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Title of the sticker set.
      attr_accessor title: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Name of the sticker set.
      attr_accessor name: TD::Types::String

      # Sticker set thumbnail in WEBP, TGS, or WEBM format with width and
      # height 100; may be null.
      attr_accessor thumbnail: TD::Types::Thumbnail?

      # Sticker set thumbnail's outline represented as a
      # list of closed vector paths; may be empty.
      # The coordinate system origin is in the upper-left corner.
      attr_accessor thumbnail_outline: ::Array[TD::Types::ClosedVectorPath]?

      # True, if the sticker set has been installed by the current user.
      attr_accessor is_installed: bool

      # True, if the sticker set has been archived.
      # A sticker set can't be installed and archived simultaneously.
      attr_accessor is_archived: bool

      # True, if the sticker set is official.
      attr_accessor is_official: bool

      # Type of the stickers in the set.
      attr_accessor sticker_type: TD::Types::StickerType

      # True for already viewed trending sticker sets.
      attr_accessor is_viewed: bool

      # Total number of stickers in the set.
      attr_accessor size: Integer

      # Up to the first 5 stickers from the set, depending on the context.
      # If the application needs more stickers the full sticker set needs to be requested.
      attr_accessor covers: ::Array[TD::Types::Sticker]
    end

    # Describes an action suggested to the current user.
    class SuggestedAction < TD::Types::Base
      # Suggests the user to set a 2-step verification password to be able to log in again.
      # 
      # @attr authorization_delay [Integer] The number of days to pass between consecutive authorizations if the user
      #   declines to set password.
      class SetPassword < TD::Types::SuggestedAction
        # The number of days to pass between consecutive authorizations if the user
        # declines to set password.
        attr_accessor authorization_delay: Integer
      end

      # Suggests the user to check whether they still remember their 2-step verification password.
      class CheckPassword < TD::Types::SuggestedAction
      end

      # Suggests the user to view a hint about the meaning of one and two check marks on sent messages.
      class ViewChecksHint < TD::Types::SuggestedAction
      end

      # Suggests the user to check whether authorization phone number is correct and change the phone number if it is
      #   inaccessible.
      class CheckPhoneNumber < TD::Types::SuggestedAction
      end

      # Suggests the user to convert specified supergroup to a broadcast group.
      # 
      # @attr supergroup_id [Integer] Supergroup identifier.
      class ConvertToBroadcastGroup < TD::Types::SuggestedAction
        # Supergroup identifier.
        attr_accessor supergroup_id: Integer
      end

      # Suggests the user to enable "archive_and_mute_new_chats_from_unknown_users" option.
      class EnableArchiveAndMuteNewChats < TD::Types::SuggestedAction
      end
    end

    # Contains parameters for TDLib initialization.
    # 
    # @attr use_test_dc [Boolean, nil] If set to true, the Telegram test environment will be used instead of the
    #   production environment.
    # @attr database_directory [TD::Types::String, nil] The path to the directory for the persistent database; if empty,
    #   the current working directory will be used.
    # @attr files_directory [TD::Types::String, nil] The path to the directory for storing files; if empty,
    #   database_directory will be used.
    # @attr use_file_database [Boolean, nil] If set to true, information about downloaded and uploaded files will be
    #   saved between application restarts.
    # @attr use_chat_info_database [Boolean, nil] If set to true, the library will maintain a cache of users, basic
    #   groups, supergroups, channels and secret chats.
    #   Implies use_file_database.
    # @attr use_message_database [Boolean, nil] If set to true, the library will maintain a cache of chats and messages.
    #   Implies use_chat_info_database.
    # @attr use_secret_chats [Boolean, nil] If set to true, support for secret chats will be enabled.
    # @attr api_id [Integer, nil] Application identifier for Telegram API access, which can be obtained at
    #   https://my.telegram.org.
    # @attr api_hash [TD::Types::String, nil] Application identifier hash for Telegram API access, which can be obtained
    #   at https://my.telegram.org.
    # @attr system_language_code [TD::Types::String] IETF language tag of the user's operating system language; must be
    #   non-empty.
    # @attr device_model [TD::Types::String] Model of the device the application is being run on; must be non-empty.
    # @attr system_version [TD::Types::String, nil] Version of the operating system the application is being run on.
    #   If empty, the version is automatically detected by TDLib.
    # @attr application_version [TD::Types::String] Application version; must be non-empty.
    # @attr enable_storage_optimizer [Boolean, nil] If set to true, old files will automatically be deleted.
    # @attr ignore_file_names [Boolean, nil] If set to true, original file names will be ignored.
    #   Otherwise, downloaded files will be saved under names as close as possible to the original name.
    class TdlibParameters < TD::Types::Base
      # If set to true, the Telegram test environment will be used instead of the
      # production environment.
      attr_accessor use_test_dc: bool?

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # The path to the directory for the persistent database; if empty,
      # the current working directory will be used.
      attr_accessor database_directory: TD::Types::String?

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # The path to the directory for storing files; if empty,
      # database_directory will be used.
      attr_accessor files_directory: TD::Types::String?

      # If set to true, information about downloaded and uploaded files will be
      # saved between application restarts.
      attr_accessor use_file_database: bool?

      # If set to true, the library will maintain a cache of users, basic
      # groups, supergroups, channels and secret chats.
      # Implies use_file_database.
      attr_accessor use_chat_info_database: bool?

      # If set to true, the library will maintain a cache of chats and messages.
      # Implies use_chat_info_database.
      attr_accessor use_message_database: bool?

      # If set to true, support for secret chats will be enabled.
      attr_accessor use_secret_chats: bool?

      # Application identifier for Telegram API access, which can be obtained at
      # https://my.telegram.org.
      attr_accessor api_id: Integer?

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Application identifier hash for Telegram API access, which can be obtained
      # at https://my.telegram.org.
      attr_accessor api_hash: TD::Types::String?

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # IETF language tag of the user's operating system language; must be
      # non-empty.
      attr_accessor system_language_code: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Model of the device the application is being run on; must be non-empty.
      attr_accessor device_model: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Version of the operating system the application is being run on.
      # If empty, the version is automatically detected by TDLib.
      attr_accessor system_version: TD::Types::String?

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Application version; must be non-empty.
      attr_accessor application_version: TD::Types::String

      # If set to true, old files will automatically be deleted.
      attr_accessor enable_storage_optimizer: bool?

      # If set to true, original file names will be ignored.
      # Otherwise, downloaded files will be saved under names as close as possible to the original name.
      attr_accessor ignore_file_names: bool?
    end

    # Contains Telegram terms of service.
    # 
    # @attr text [TD::Types::FormattedText] Text of the terms of service.
    # @attr min_user_age [Integer] The minimum age of a user to be able to accept the terms; 0 if any.
    # @attr show_popup [Boolean] True, if a blocking popup with terms of service must be shown to the user.
    class TermsOfService < TD::Types::Base
      # Text of the terms of service.
      attr_accessor text: TD::Types::FormattedText

      # The minimum age of a user to be able to accept the terms; 0 if any.
      attr_accessor min_user_age: Integer

      # True, if a blocking popup with terms of service must be shown to the user.
      attr_accessor show_popup: bool
    end

    # Represents a part of the text which must be formatted differently.
    class TextEntityType < TD::Types::Base
      # Text that must be formatted as if inside a pre HTML tag.
      class Pre < TD::Types::TextEntityType
      end

      # An HTTP URL.
      class Url < TD::Types::TextEntityType
      end

      # A bold text.
      class Bold < TD::Types::TextEntityType
      end

      # Text that must be formatted as if inside a code HTML tag.
      class Code < TD::Types::TextEntityType
      end

      # An italic text.
      class Italic < TD::Types::TextEntityType
      end

      # A cashtag text, beginning with "$" and consisting of capital English letters (e.g., "$USD").
      class Cashtag < TD::Types::TextEntityType
      end

      # A hashtag text, beginning with "#".
      class Hashtag < TD::Types::TextEntityType
      end

      # A mention of a user by their username.
      class Mention < TD::Types::TextEntityType
      end

      # A spoiler text.
      # Not supported in secret chats.
      class Spoiler < TD::Types::TextEntityType
      end

      # Text that must be formatted as if inside pre, and code HTML tags.
      # 
      # @attr language [TD::Types::String] Programming language of the code; as defined by the sender.
      class PreCode < TD::Types::TextEntityType
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Programming language of the code; as defined by the sender.
        attr_accessor language: TD::Types::String
      end

      # A text description shown instead of a raw URL.
      # 
      # @attr url [TD::Types::String] HTTP or tg:// URL to be opened when the link is clicked.
      class TextUrl < TD::Types::TextEntityType
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # HTTP or tg:// URL to be opened when the link is clicked.
        attr_accessor url: TD::Types::String
      end

      # An underlined text.
      class Underline < TD::Types::TextEntityType
      end

      # A bot command, beginning with "/".
      class BotCommand < TD::Types::TextEntityType
      end

      # A text shows instead of a raw mention of the user (e.g., when the user has no username).
      # 
      # @attr user_id [Integer] Identifier of the mentioned user.
      class MentionName < TD::Types::TextEntityType
        # Identifier of the mentioned user.
        attr_accessor user_id: Integer
      end

      # A phone number.
      class PhoneNumber < TD::Types::TextEntityType
      end

      # An email address.
      class EmailAddress < TD::Types::TextEntityType
      end

      # A strikethrough text.
      class Strikethrough < TD::Types::TextEntityType
      end

      # A media timestamp.
      # 
      # @attr media_timestamp [Integer] Timestamp from which a video/audio/video note/voice note playing must start, in
      #   seconds.
      #   The media can be in the content or the web page preview of the current message, or in the same places in the
      #   replied message.
      class MediaTimestamp < TD::Types::TextEntityType
        # Timestamp from which a video/audio/video note/voice note playing must start, in
        # seconds.
        # The media can be in the content or the web page preview of the current message, or in the same places in the
        # replied message.
        attr_accessor media_timestamp: Integer
      end

      # A bank card number.
      # The getBankCardInfo method can be used to get information about the bank card.
      class BankCardNumber < TD::Types::TextEntityType
      end
    end

    # Describes format of a thumbnail.
    class ThumbnailFormat < TD::Types::Base
      # The thumbnail is in static GIF format.
      # It will be used only for some bot inline results.
      class Gif < TD::Types::ThumbnailFormat
      end

      # The thumbnail is in PNG format.
      # It will be used only for background patterns.
      class Png < TD::Types::ThumbnailFormat
      end

      # The thumbnail is in TGS format.
      # It will be used only for TGS sticker sets.
      class Tgs < TD::Types::ThumbnailFormat
      end

      # The thumbnail is in JPEG format.
      class Jpeg < TD::Types::ThumbnailFormat
      end

      # The thumbnail is in WEBM format.
      # It will be used only for WEBM sticker sets.
      class Webm < TD::Types::ThumbnailFormat
      end

      # The thumbnail is in WEBP format.
      # It will be used only for some stickers.
      class Webp < TD::Types::ThumbnailFormat
      end

      # The thumbnail is in MPEG4 format.
      # It will be used only for some animations and videos.
      class Mpeg4 < TD::Types::ThumbnailFormat
      end
    end

    # Represents the scope to which bot commands are relevant.
    class BotCommandScope < TD::Types::Base
      # A scope covering all members of a chat.
      # 
      # @attr chat_id [Integer] Chat identifier.
      class Chat < TD::Types::BotCommandScope
        # Chat identifier.
        attr_accessor chat_id: Integer
      end

      # A scope covering all users.
      class Default < TD::Types::BotCommandScope
      end

      # A scope covering a member of a chat.
      # 
      # @attr chat_id [Integer] Chat identifier.
      # @attr user_id [Integer] User identifier.
      class ChatMember < TD::Types::BotCommandScope
        # Chat identifier.
        attr_accessor chat_id: Integer

        # User identifier.
        attr_accessor user_id: Integer
      end

      # A scope covering all group and supergroup chats.
      class AllGroupChats < TD::Types::BotCommandScope
      end

      # A scope covering all private chats.
      class AllPrivateChats < TD::Types::BotCommandScope
      end

      # A scope covering all administrators of a chat.
      # 
      # @attr chat_id [Integer] Chat identifier.
      class ChatAdministrators < TD::Types::BotCommandScope
        # Chat identifier.
        attr_accessor chat_id: Integer
      end

      # A scope covering all group and supergroup chat administrators.
      class AllChatAdministrators < TD::Types::BotCommandScope
      end
    end

    # Represents a chat event.
    class ChatEventAction < TD::Types::Base
      # A member left the chat.
      class MemberLeft < TD::Types::ChatEventAction
      end

      # A poll in a message was stopped.
      # 
      # @attr message [TD::Types::Message] The message with the poll.
      class PollStopped < TD::Types::ChatEventAction
        # The message with the poll.
        attr_accessor message: TD::Types::Message
      end

      # A new member joined the chat.
      class MemberJoined < TD::Types::ChatEventAction
      end

      # The chat photo was changed.
      # 
      # @attr old_photo [TD::Types::ChatPhoto, nil] Previous chat photo value; may be null.
      # @attr new_photo [TD::Types::ChatPhoto, nil] New chat photo value; may be null.
      class PhotoChanged < TD::Types::ChatEventAction
        # Previous chat photo value; may be null.
        attr_accessor old_photo: TD::Types::ChatPhoto?

        # New chat photo value; may be null.
        attr_accessor new_photo: TD::Types::ChatPhoto?
      end

      # The chat title was changed.
      # 
      # @attr old_title [TD::Types::String] Previous chat title.
      # @attr new_title [TD::Types::String] New chat title.
      class TitleChanged < TD::Types::ChatEventAction
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Previous chat title.
        attr_accessor old_title: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # New chat title.
        attr_accessor new_title: TD::Types::String
      end

      # A new chat member was invited.
      # 
      # @attr user_id [Integer] New member user identifier.
      # @attr status [TD::Types::ChatMemberStatus] New member status.
      class MemberInvited < TD::Types::ChatEventAction
        # New member user identifier.
        attr_accessor user_id: Integer

        # New member status.
        attr_accessor status: TD::Types::ChatMemberStatus
      end

      # A message was edited.
      # 
      # @attr old_message [TD::Types::Message] The original message before the edit.
      # @attr new_message [TD::Types::Message] The message after it was edited.
      class MessageEdited < TD::Types::ChatEventAction
        # The original message before the edit.
        attr_accessor old_message: TD::Types::Message

        # The message after it was edited.
        attr_accessor new_message: TD::Types::Message
      end

      # A message was pinned.
      # 
      # @attr message [TD::Types::Message] Pinned message.
      class MessagePinned < TD::Types::ChatEventAction
        # Pinned message.
        attr_accessor message: TD::Types::Message
      end

      # The can_invite_users permission of a supergroup chat was toggled.
      # 
      # @attr can_invite_users [Boolean] New value of can_invite_users permission.
      class InvitesToggled < TD::Types::ChatEventAction
        # New value of can_invite_users permission.
        attr_accessor can_invite_users: bool
      end

      # A chat member has gained/lost administrator status, or the list of their administrator privileges has changed.
      # 
      # @attr user_id [Integer] Affected chat member user identifier.
      # @attr old_status [TD::Types::ChatMemberStatus] Previous status of the chat member.
      # @attr new_status [TD::Types::ChatMemberStatus] New status of the chat member.
      class MemberPromoted < TD::Types::ChatEventAction
        # Affected chat member user identifier.
        attr_accessor user_id: Integer

        # Previous status of the chat member.
        attr_accessor old_status: TD::Types::ChatMemberStatus

        # New status of the chat member.
        attr_accessor new_status: TD::Types::ChatMemberStatus
      end

      # A message was deleted.
      # 
      # @attr message [TD::Types::Message] Deleted message.
      class MessageDeleted < TD::Types::ChatEventAction
        # Deleted message.
        attr_accessor message: TD::Types::Message
      end

      # The supergroup location was changed.
      # 
      # @attr old_location [TD::Types::ChatLocation, nil] Previous location; may be null.
      # @attr new_location [TD::Types::ChatLocation, nil] New location; may be null.
      class LocationChanged < TD::Types::ChatEventAction
        # Previous location; may be null.
        attr_accessor old_location: TD::Types::ChatLocation?

        # New location; may be null.
        attr_accessor new_location: TD::Types::ChatLocation?
      end

      # A message was unpinned.
      # 
      # @attr message [TD::Types::Message] Unpinned message.
      class MessageUnpinned < TD::Types::ChatEventAction
        # Unpinned message.
        attr_accessor message: TD::Types::Message
      end

      # The chat username was changed.
      # 
      # @attr old_username [TD::Types::String] Previous chat username.
      # @attr new_username [TD::Types::String] New chat username.
      class UsernameChanged < TD::Types::ChatEventAction
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Previous chat username.
        attr_accessor old_username: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # New chat username.
        attr_accessor new_username: TD::Types::String
      end

      # A video chat was ended.
      # 
      # @attr group_call_id [Integer] Identifier of the video chat.
      #   The video chat can be received through the method getGroupCall.
      class VideoChatEnded < TD::Types::ChatEventAction
        # Identifier of the video chat.
        # The video chat can be received through the method getGroupCall.
        attr_accessor group_call_id: Integer
      end

      # A chat member was restricted/unrestricted or banned/unbanned, or the list of their restrictions has changed.
      # 
      # @attr member_id [TD::Types::MessageSender] Affected chat member identifier.
      # @attr old_status [TD::Types::ChatMemberStatus] Previous status of the chat member.
      # @attr new_status [TD::Types::ChatMemberStatus] New status of the chat member.
      class MemberRestricted < TD::Types::ChatEventAction
        # Affected chat member identifier.
        attr_accessor member_id: TD::Types::MessageSender

        # Previous status of the chat member.
        attr_accessor old_status: TD::Types::ChatMemberStatus

        # New status of the chat member.
        attr_accessor new_status: TD::Types::ChatMemberStatus
      end

      # A chat invite link was edited.
      # 
      # @attr old_invite_link [TD::Types::ChatInviteLink] Previous information about the invite link.
      # @attr new_invite_link [TD::Types::ChatInviteLink] New information about the invite link.
      class InviteLinkEdited < TD::Types::ChatEventAction
        # Previous information about the invite link.
        attr_accessor old_invite_link: TD::Types::ChatInviteLink

        # New information about the invite link.
        attr_accessor new_invite_link: TD::Types::ChatInviteLink
      end

      # A video chat was created.
      # 
      # @attr group_call_id [Integer] Identifier of the video chat.
      #   The video chat can be received through the method getGroupCall.
      class VideoChatCreated < TD::Types::ChatEventAction
        # Identifier of the video chat.
        # The video chat can be received through the method getGroupCall.
        attr_accessor group_call_id: Integer
      end

      # The chat description was changed.
      # 
      # @attr old_description [TD::Types::String] Previous chat description.
      # @attr new_description [TD::Types::String] New chat description.
      class DescriptionChanged < TD::Types::ChatEventAction
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Previous chat description.
        attr_accessor old_description: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # New chat description.
        attr_accessor new_description: TD::Types::String
      end

      # A revoked chat invite link was deleted.
      # 
      # @attr invite_link [TD::Types::ChatInviteLink] The invite link.
      class InviteLinkDeleted < TD::Types::ChatEventAction
        # The invite link.
        attr_accessor invite_link: TD::Types::ChatInviteLink
      end

      # A chat invite link was revoked.
      # 
      # @attr invite_link [TD::Types::ChatInviteLink] The invite link.
      class InviteLinkRevoked < TD::Types::ChatEventAction
        # The invite link.
        attr_accessor invite_link: TD::Types::ChatInviteLink
      end

      # The linked chat of a supergroup was changed.
      # 
      # @attr old_linked_chat_id [Integer] Previous supergroup linked chat identifier.
      # @attr new_linked_chat_id [Integer] New supergroup linked chat identifier.
      class LinkedChatChanged < TD::Types::ChatEventAction
        # Previous supergroup linked chat identifier.
        attr_accessor old_linked_chat_id: Integer

        # New supergroup linked chat identifier.
        attr_accessor new_linked_chat_id: Integer
      end

      # The message TTL was changed.
      # 
      # @attr old_message_ttl [Integer] Previous value of message_ttl.
      # @attr new_message_ttl [Integer] New value of message_ttl.
      class MessageTtlChanged < TD::Types::ChatEventAction
        # Previous value of message_ttl.
        attr_accessor old_message_ttl: Integer

        # New value of message_ttl.
        attr_accessor new_message_ttl: Integer
      end

      # The chat permissions was changed.
      # 
      # @attr old_permissions [TD::Types::ChatPermissions] Previous chat permissions.
      # @attr new_permissions [TD::Types::ChatPermissions] New chat permissions.
      class PermissionsChanged < TD::Types::ChatEventAction
        # Previous chat permissions.
        attr_accessor old_permissions: TD::Types::ChatPermissions

        # New chat permissions.
        attr_accessor new_permissions: TD::Types::ChatPermissions
      end

      # The supergroup sticker set was changed.
      # 
      # @attr old_sticker_set_id [Integer] Previous identifier of the chat sticker set; 0 if none.
      # @attr new_sticker_set_id [Integer] New identifier of the chat sticker set; 0 if none.
      class StickerSetChanged < TD::Types::ChatEventAction
        # Previous identifier of the chat sticker set; 0 if none.
        attr_accessor old_sticker_set_id: Integer

        # New identifier of the chat sticker set; 0 if none.
        attr_accessor new_sticker_set_id: Integer
      end

      # The sign_messages setting of a channel was toggled.
      # 
      # @attr sign_messages [Boolean] New value of sign_messages.
      class SignMessagesToggled < TD::Types::ChatEventAction
        # New value of sign_messages.
        attr_accessor sign_messages: bool
      end

      # The slow_mode_delay setting of a supergroup was changed.
      # 
      # @attr old_slow_mode_delay [Integer] Previous value of slow_mode_delay, in seconds.
      # @attr new_slow_mode_delay [Integer] New value of slow_mode_delay, in seconds.
      class SlowModeDelayChanged < TD::Types::ChatEventAction
        # Previous value of slow_mode_delay, in seconds.
        attr_accessor old_slow_mode_delay: Integer

        # New value of slow_mode_delay, in seconds.
        attr_accessor new_slow_mode_delay: Integer
      end

      # A new member was accepted to the chat by an administrator.
      # 
      # @attr approver_user_id [Integer] User identifier of the chat administrator, approved user join request.
      # @attr invite_link [TD::Types::ChatInviteLink, nil] Invite link used to join the chat; may be null.
      class MemberJoinedByRequest < TD::Types::ChatEventAction
        # User identifier of the chat administrator, approved user join request.
        attr_accessor approver_user_id: Integer

        # Invite link used to join the chat; may be null.
        attr_accessor invite_link: TD::Types::ChatInviteLink?
      end

      # The chat available reactions were changed.
      # 
      # @attr old_available_reactions [Array<TD::Types::String>] Previous chat available reactions.
      # @attr new_available_reactions [Array<TD::Types::String>] New chat available reactions.
      class AvailableReactionsChanged < TD::Types::ChatEventAction
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Previous chat available reactions.
        attr_accessor old_available_reactions: ::Array[TD::Types::String]

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # New chat available reactions.
        attr_accessor new_available_reactions: ::Array[TD::Types::String]
      end

      # A new member joined the chat via an invite link.
      # 
      # @attr invite_link [TD::Types::ChatInviteLink] Invite link used to join the chat.
      class MemberJoinedByInviteLink < TD::Types::ChatEventAction
        # Invite link used to join the chat.
        attr_accessor invite_link: TD::Types::ChatInviteLink
      end

      # The has_protected_content setting of a channel was toggled.
      # 
      # @attr has_protected_content [Boolean] New value of has_protected_content.
      class HasProtectedContentToggled < TD::Types::ChatEventAction
        # New value of has_protected_content.
        attr_accessor has_protected_content: bool
      end

      # The is_all_history_available setting of a supergroup was toggled.
      # 
      # @attr is_all_history_available [Boolean] New value of is_all_history_available.
      class IsAllHistoryAvailableToggled < TD::Types::ChatEventAction
        # New value of is_all_history_available.
        attr_accessor is_all_history_available: bool
      end

      # A video chat participant was muted or unmuted.
      # 
      # @attr participant_id [TD::Types::MessageSender] Identifier of the affected group call participant.
      # @attr is_muted [Boolean] New value of is_muted.
      class VideoChatParticipantIsMutedToggled < TD::Types::ChatEventAction
        # Identifier of the affected group call participant.
        attr_accessor participant_id: TD::Types::MessageSender

        # New value of is_muted.
        attr_accessor is_muted: bool
      end

      # The mute_new_participants setting of a video chat was toggled.
      # 
      # @attr mute_new_participants [Boolean] New value of the mute_new_participants setting.
      class VideoChatMuteNewParticipantsToggled < TD::Types::ChatEventAction
        # New value of the mute_new_participants setting.
        attr_accessor mute_new_participants: bool
      end

      # A video chat participant volume level was changed.
      # 
      # @attr participant_id [TD::Types::MessageSender] Identifier of the affected group call participant.
      # @attr volume_level [Integer] New value of volume_level; 1-20000 in hundreds of percents.
      class VideoChatParticipantVolumeLevelChanged < TD::Types::ChatEventAction
        # Identifier of the affected group call participant.
        attr_accessor participant_id: TD::Types::MessageSender

        # New value of volume_level; 1-20000 in hundreds of percents.
        attr_accessor volume_level: Integer
      end
    end

    # Contains a list of chat invite links.
    # 
    # @attr total_count [Integer] Approximate total count of chat invite links found.
    # @attr invite_links [Array<TD::Types::ChatInviteLink>] List of invite links.
    class ChatInviteLinks < TD::Types::Base
      # Approximate total count of chat invite links found.
      attr_accessor total_count: Integer

      # List of invite links.
      attr_accessor invite_links: ::Array[TD::Types::ChatInviteLink]
    end

    # Describes a user that sent a join request and waits for administrator approval.
    # 
    # @attr user_id [Integer] User identifier.
    # @attr date [Integer] Point in time (Unix timestamp) when the user sent the join request.
    # @attr bio [TD::Types::String] A short bio of the user.
    class ChatJoinRequest < TD::Types::Base
      # User identifier.
      attr_accessor user_id: Integer

      # Point in time (Unix timestamp) when the user sent the join request.
      attr_accessor date: Integer

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # A short bio of the user.
      attr_accessor bio: TD::Types::String
    end

    # Contains information about one website the current user is logged in with Telegram.
    # 
    # @attr id [Integer] Website identifier.
    # @attr domain_name [TD::Types::String] The domain name of the website.
    # @attr bot_user_id [Integer] User identifier of a bot linked with the website.
    # @attr browser [TD::Types::String] The version of a browser used to log in.
    # @attr platform [TD::Types::String] Operating system the browser is running on.
    # @attr log_in_date [Integer] Point in time (Unix timestamp) when the user was logged in.
    # @attr last_active_date [Integer] Point in time (Unix timestamp) when obtained authorization was last used.
    # @attr ip [TD::Types::String] IP address from which the user was logged in, in human-readable format.
    # @attr location [TD::Types::String] Human-readable description of a country and a region, from which the user was
    #   logged in, based on the IP address.
    class ConnectedWebsite < TD::Types::Base
      # Website identifier.
      attr_accessor id: Integer

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # The domain name of the website.
      attr_accessor domain_name: TD::Types::String

      # User identifier of a bot linked with the website.
      attr_accessor bot_user_id: Integer

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # The version of a browser used to log in.
      attr_accessor browser: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Operating system the browser is running on.
      attr_accessor platform: TD::Types::String

      # Point in time (Unix timestamp) when the user was logged in.
      attr_accessor log_in_date: Integer

      # Point in time (Unix timestamp) when obtained authorization was last used.
      attr_accessor last_active_date: Integer

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # IP address from which the user was logged in, in human-readable format.
      attr_accessor ip: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Human-readable description of a country and a region, from which the user was
      # logged in, based on the IP address.
      attr_accessor location: TD::Types::String
    end

    # An identity document.
    # 
    # @attr number [TD::Types::String] Document number; 1-24 characters.
    # @attr expiry_date [TD::Types::Date, nil] Document expiry date; may be null if not applicable.
    # @attr front_side [TD::Types::DatedFile] Front side of the document.
    # @attr reverse_side [TD::Types::DatedFile, nil] Reverse side of the document; only for driver license and identity
    #   card; may be null.
    # @attr selfie [TD::Types::DatedFile, nil] Selfie with the document; may be null.
    # @attr translation [Array<TD::Types::DatedFile>] List of files containing a certified English translation of the
    #   document.
    class IdentityDocument < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Document number; 1-24 characters.
      attr_accessor number: TD::Types::String

      # Document expiry date; may be null if not applicable.
      attr_accessor expiry_date: TD::Types::Date?

      # Front side of the document.
      attr_accessor front_side: TD::Types::DatedFile

      # Reverse side of the document; only for driver license and identity
      # card; may be null.
      attr_accessor reverse_side: TD::Types::DatedFile?

      # Selfie with the document; may be null.
      attr_accessor selfie: TD::Types::DatedFile?

      # List of files containing a certified English translation of the
      # document.
      attr_accessor translation: ::Array[TD::Types::DatedFile]
    end

    # Represents the result of an ImportContacts request.
    # 
    # @attr user_ids [Array<Integer>] User identifiers of the imported contacts in the same order as they were specified
    #   in the request; 0 if the contact is not yet a registered user.
    # @attr importer_count [Array<Integer>] The number of users that imported the corresponding contact; 0 for already
    #   registered users or if unavailable.
    class ImportedContacts < TD::Types::Base
      # User identifiers of the imported contacts in the same order as they were specified
      # in the request; 0 if the contact is not yet a registered user.
      attr_accessor user_ids: ::Array[Integer]

      # The number of users that imported the corresponding contact; 0 for already
      # registered users or if unavailable.
      attr_accessor importer_count: ::Array[Integer]
    end

    # Contains information about the payment method chosen by the user.
    class InputCredentials < TD::Types::Base
      # Applies if a user enters new credentials on a payment provider website.
      # 
      # @attr data [TD::Types::String] JSON-encoded data with the credential identifier from the payment provider.
      # @attr allow_save [Boolean] True, if the credential identifier can be saved on the server side.
      class New < TD::Types::InputCredentials
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # JSON-encoded data with the credential identifier from the payment provider.
        attr_accessor data: TD::Types::String

        # True, if the credential identifier can be saved on the server side.
        attr_accessor allow_save: bool
      end

      # Applies if a user chooses some previously saved payment credentials.
      # To use their previously saved credentials, the user must have a valid temporary password.
      # 
      # @attr saved_credentials_id [TD::Types::String] Identifier of the saved credentials.
      class Saved < TD::Types::InputCredentials
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Identifier of the saved credentials.
        attr_accessor saved_credentials_id: TD::Types::String
      end

      # Applies if a user enters new credentials using Apple Pay.
      # 
      # @attr data [TD::Types::String] JSON-encoded data with the credential identifier.
      class ApplePay < TD::Types::InputCredentials
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # JSON-encoded data with the credential identifier.
        attr_accessor data: TD::Types::String
      end

      # Applies if a user enters new credentials using Google Pay.
      # 
      # @attr data [TD::Types::String] JSON-encoded data with the credential identifier.
      class GooglePay < TD::Types::InputCredentials
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # JSON-encoded data with the credential identifier.
        attr_accessor data: TD::Types::String
      end
    end

    # Contains information about a file with messages exported from another app.
    class MessageFileType < TD::Types::Base
      # The messages was exported from a group chat.
      # 
      # @attr title [TD::Types::String, nil] Title of the group chat; may be empty if unrecognized.
      class Group < TD::Types::MessageFileType
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Title of the group chat; may be empty if unrecognized.
        attr_accessor title: TD::Types::String?
      end

      # The messages was exported from a private chat.
      # 
      # @attr name [TD::Types::String, nil] Name of the other party; may be empty if unrecognized.
      class Private < TD::Types::MessageFileType
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Name of the other party; may be empty if unrecognized.
        attr_accessor name: TD::Types::String?
      end

      # The messages was exported from a chat of unknown type.
      class Unknown < TD::Types::MessageFileType
      end
    end

    # Contains information about a link to a message in a chat.
    # 
    # @attr is_public [Boolean] True, if the link is a public link for a message in a chat.
    # @attr chat_id [Integer] If found, identifier of the chat to which the message belongs, 0 otherwise.
    # @attr message [TD::Types::Message, nil] If found, the linked message; may be null.
    # @attr media_timestamp [Integer] Timestamp from which the video/audio/video note/voice note playing must start, in
    #   seconds; 0 if not specified.
    #   The media can be in the message content or in its web page preview.
    # @attr for_album [Boolean] True, if the whole media album to which the message belongs is linked.
    # @attr for_comment [Boolean] True, if the message is linked as a channel post comment or from a message thread.
    class MessageLinkInfo < TD::Types::Base
      # True, if the link is a public link for a message in a chat.
      attr_accessor is_public: bool

      # If found, identifier of the chat to which the message belongs, 0 otherwise.
      attr_accessor chat_id: Integer

      # If found, the linked message; may be null.
      attr_accessor message: TD::Types::Message?

      # Timestamp from which the video/audio/video note/voice note playing must start, in
      # seconds; 0 if not specified.
      # The media can be in the message content or in its web page preview.
      attr_accessor media_timestamp: Integer

      # True, if the whole media album to which the message belongs is linked.
      attr_accessor for_album: bool

      # True, if the message is linked as a channel post comment or from a message thread.
      attr_accessor for_comment: bool
    end

    # Contains a list of message positions.
    # 
    # @attr total_count [Integer] Total count of messages found.
    # @attr positions [Array<TD::Types::MessagePosition>] List of message positions.
    class MessagePositions < TD::Types::Base
      # Total count of messages found.
      attr_accessor total_count: Integer

      # List of message positions.
      attr_accessor positions: ::Array[TD::Types::MessagePosition]
    end

    # Contains detailed information about a notification.
    class NotificationType < TD::Types::Base
      # New call was received.
      # 
      # @attr call_id [Integer] Call identifier.
      class NewCall < TD::Types::NotificationType
        # Call identifier.
        attr_accessor call_id: Integer
      end

      # New message was received.
      # 
      # @attr message [TD::Types::Message] The message.
      class NewMessage < TD::Types::NotificationType
        # The message.
        attr_accessor message: TD::Types::Message
      end

      # New secret chat was created.
      class NewSecretChat < TD::Types::NotificationType
      end

      # New message was received through a push notification.
      # 
      # @attr message_id [Integer] The message identifier.
      #   The message will not be available in the chat history, but the ID can be used in viewMessages, or as
      #   reply_to_message_id.
      # @attr sender_id [TD::Types::MessageSender] Identifier of the sender of the message.
      #   Corresponding user or chat may be inaccessible.
      # @attr sender_name [TD::Types::String] Name of the sender.
      # @attr is_outgoing [Boolean] True, if the message is outgoing.
      # @attr content [TD::Types::PushMessageContent] Push message content.
      class NewPushMessage < TD::Types::NotificationType
        # The message identifier.
        # The message will not be available in the chat history, but the ID can be used in viewMessages, or as
        # reply_to_message_id.
        attr_accessor message_id: Integer

        # Identifier of the sender of the message.
        # Corresponding user or chat may be inaccessible.
        attr_accessor sender_id: TD::Types::MessageSender

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Name of the sender.
        attr_accessor sender_name: TD::Types::String

        # True, if the message is outgoing.
        attr_accessor is_outgoing: bool

        # Push message content.
        attr_accessor content: TD::Types::PushMessageContent
      end
    end

    # Contains information about saved Telegram Passport elements.
    # 
    # @attr elements [Array<TD::Types::PassportElement>] Telegram Passport elements.
    class PassportElements < TD::Types::Base
      # Telegram Passport elements.
      attr_accessor elements: ::Array[TD::Types::PassportElement]
    end

    # A personal document, containing some information about a user.
    # 
    # @attr files [Array<TD::Types::DatedFile>] List of files containing the pages of the document.
    # @attr translation [Array<TD::Types::DatedFile>] List of files containing a certified English translation of the
    #   document.
    class PersonalDocument < TD::Types::Base
      # List of files containing the pages of the document.
      attr_accessor files: ::Array[TD::Types::DatedFile]

      # List of files containing a certified English translation of the
      # document.
      attr_accessor translation: ::Array[TD::Types::DatedFile]
    end

    # Contains information about a phone number.
    # 
    # @attr country [TD::Types::CountryInfo, nil] Information about the country to which the phone number belongs; may be
    #   null.
    # @attr country_calling_code [TD::Types::String] The part of the phone number denoting country calling code or its
    #   part.
    # @attr formatted_phone_number [TD::Types::String] The phone number without country calling code formatted
    #   accordingly to local rules.
    #   Expected digits are returned as '-', but even more digits might be entered by the user.
    class PhoneNumberInfo < TD::Types::Base
      # Information about the country to which the phone number belongs; may be
      # null.
      attr_accessor country: TD::Types::CountryInfo?

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # The part of the phone number denoting country calling code or its
      # part.
      attr_accessor country_calling_code: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # The phone number without country calling code formatted
      # accordingly to local rules.
      # Expected digits are returned as '-', but even more digits might be entered by the user.
      attr_accessor formatted_phone_number: TD::Types::String
    end

    # Contains information about saved card credentials.
    # 
    # @attr id [TD::Types::String] Unique identifier of the saved credentials.
    # @attr title [TD::Types::String] Title of the saved credentials.
    class SavedCredentials < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Unique identifier of the saved credentials.
      attr_accessor id: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Title of the saved credentials.
      attr_accessor title: TD::Types::String
    end

    # Describes the current secret chat state.
    class SecretChatState < TD::Types::Base
      # The secret chat is ready to use.
      class Ready < TD::Types::SecretChatState
      end

      # The secret chat is closed.
      class Closed < TD::Types::SecretChatState
      end

      # The secret chat is not yet created; waiting for the other user to get online.
      class Pending < TD::Types::SecretChatState
      end
    end

    # Describes a sponsored message.
    # 
    # @attr message_id [Integer] Message identifier; unique for the chat to which the sponsored message belongs among
    #   both ordinary and sponsored messages.
    # @attr sponsor_chat_id [Integer] Sponsor chat identifier; 0 if the sponsor chat is accessible through an invite
    #   link.
    # @attr sponsor_chat_info [TD::Types::ChatInviteLinkInfo, nil] Information about the sponsor chat; may be null unless
    #   sponsor_chat_id == 0.
    # @attr link [TD::Types::InternalLinkType, nil] An internal link to be opened when the sponsored message is clicked;
    #   may be null.
    #   If null, the sponsor chat needs to be opened instead.
    # @attr content [TD::Types::MessageContent] Content of the message.
    #   Currently, can be only of the type messageText.
    class SponsoredMessage < TD::Types::Base
      # Message identifier; unique for the chat to which the sponsored message belongs among
      # both ordinary and sponsored messages.
      attr_accessor message_id: Integer

      # Sponsor chat identifier; 0 if the sponsor chat is accessible through an invite
      # link.
      attr_accessor sponsor_chat_id: Integer

      # Information about the sponsor chat; may be null unless
      # sponsor_chat_id == 0.
      attr_accessor sponsor_chat_info: TD::Types::ChatInviteLinkInfo?

      # An internal link to be opened when the sponsored message is clicked;
      # may be null.
      # If null, the sponsor chat needs to be opened instead.
      attr_accessor link: TD::Types::InternalLinkType?

      # Content of the message.
      # Currently, can be only of the type messageText.
      attr_accessor content: TD::Types::MessageContent
    end

    # Describes a statistical graph.
    class StatisticalGraph < TD::Types::Base
      # A graph data.
      # 
      # @attr json_data [TD::Types::String] Graph data in JSON format.
      # @attr zoom_token [TD::Types::String] If non-empty, a token which can be used to receive a zoomed in graph.
      class Data < TD::Types::StatisticalGraph
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Graph data in JSON format.
        attr_accessor json_data: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # If non-empty, a token which can be used to receive a zoomed in graph.
        attr_accessor zoom_token: TD::Types::String
      end

      # The graph data to be asynchronously loaded through getStatisticalGraph.
      # 
      # @attr token [TD::Types::String] The token to use for data loading.
      class Async < TD::Types::StatisticalGraph
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # The token to use for data loading.
        attr_accessor token: TD::Types::String
      end

      # An error message to be shown to the user instead of the graph.
      # 
      # @attr error_message [TD::Types::String] The error message.
      class Error < TD::Types::StatisticalGraph
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # The error message.
        attr_accessor error_message: TD::Types::String
      end
    end

    # A value with information about its recent changes.
    # 
    # @attr value [Float] The current value.
    # @attr previous_value [Float] The value for the previous day.
    # @attr growth_rate_percentage [Float] The growth rate of the value, as a percentage.
    class StatisticalValue < TD::Types::Base
      # The current value.
      attr_accessor value: Float

      # The value for the previous day.
      attr_accessor previous_value: Float

      # The growth rate of the value, as a percentage.
      attr_accessor growth_rate_percentage: Float
    end

    # Represents the categories of chats for which a list of frequently used chats can be retrieved.
    class TopChatCategory < TD::Types::Base
      # A category containing frequently used private chats with bot users.
      class Bots < TD::Types::TopChatCategory
      end

      # A category containing frequently used chats used for calls.
      class Calls < TD::Types::TopChatCategory
      end

      # A category containing frequently used private chats with non-bot users.
      class Users < TD::Types::TopChatCategory
      end

      # A category containing frequently used basic groups and supergroups.
      class Groups < TD::Types::TopChatCategory
      end

      # A category containing frequently used channels.
      class Channels < TD::Types::TopChatCategory
      end

      # A category containing frequently used chats with inline bots sorted by their usage in inline mode.
      class InlineBots < TD::Types::TopChatCategory
      end

      # A category containing frequently used chats used to forward messages.
      class ForwardChats < TD::Types::TopChatCategory
      end
    end

    # Contains information about a chat administrator.
    # 
    # @attr user_id [Integer] User identifier of the administrator.
    # @attr custom_title [TD::Types::String] Custom title of the administrator.
    # @attr is_owner [Boolean] True, if the user is the owner of the chat.
    class ChatAdministrator < TD::Types::Base
      # User identifier of the administrator.
      attr_accessor user_id: Integer

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Custom title of the administrator.
      attr_accessor custom_title: TD::Types::String

      # True, if the user is the owner of the chat.
      attr_accessor is_owner: bool
    end

    # Contains a list of requests to join a chat.
    # 
    # @attr total_count [Integer] Approximate total count of requests found.
    # @attr requests [Array<TD::Types::ChatJoinRequest>] List of the requests.
    class ChatJoinRequests < TD::Types::Base
      # Approximate total count of requests found.
      attr_accessor total_count: Integer

      # List of the requests.
      attr_accessor requests: ::Array[TD::Types::ChatJoinRequest]
    end

    # Provides information about the status of a member in a chat.
    class ChatMemberStatus < TD::Types::Base
      # The user or the chat is not a chat member.
      class Left < TD::Types::ChatMemberStatus
      end

      # The user or the chat was banned (and hence is not a member of the chat).
      # Implies the user can't return to the chat, view messages, or be used as a participant identifier to join a video
      #   chat of the chat.
      # 
      # @attr banned_until_date [Integer] Point in time (Unix timestamp) when the user will be unbanned; 0 if never.
      #   If the user is banned for more than 366 days or for less than 30 seconds from the current time, the user is
      #   considered to be banned forever.
      #   Always 0 in basic groups.
      class Banned < TD::Types::ChatMemberStatus
        # Point in time (Unix timestamp) when the user will be unbanned; 0 if never.
        # If the user is banned for more than 366 days or for less than 30 seconds from the current time, the user is
        # considered to be banned forever.
        # Always 0 in basic groups.
        attr_accessor banned_until_date: Integer
      end

      # The user is a member of the chat, without any additional privileges or restrictions.
      class Member < TD::Types::ChatMemberStatus
      end

      # The user is the owner of the chat and has all the administrator privileges.
      # 
      # @attr custom_title [TD::Types::String] A custom title of the owner; 0-16 characters without emojis; applicable to
      #   supergroups only.
      # @attr is_anonymous [Boolean] True, if the creator isn't shown in the chat member list and sends messages
      #   anonymously; applicable to supergroups only.
      # @attr is_member [Boolean] True, if the user is a member of the chat.
      class Creator < TD::Types::ChatMemberStatus
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # A custom title of the owner; 0-16 characters without emojis; applicable to
        # supergroups only.
        attr_accessor custom_title: TD::Types::String

        # True, if the creator isn't shown in the chat member list and sends messages
        # anonymously; applicable to supergroups only.
        attr_accessor is_anonymous: bool

        # True, if the user is a member of the chat.
        attr_accessor is_member: bool
      end

      # The user is under certain restrictions in the chat.
      # Not supported in basic groups and channels.
      # 
      # @attr is_member [Boolean] True, if the user is a member of the chat.
      # @attr restricted_until_date [Integer] Point in time (Unix timestamp) when restrictions will be lifted from the
      #   user; 0 if never.
      #   If the user is restricted for more than 366 days or for less than 30 seconds from the current time, the user is
      #   considered to be restricted forever.
      # @attr permissions [TD::Types::ChatPermissions] User permissions in the chat.
      class Restricted < TD::Types::ChatMemberStatus
        # True, if the user is a member of the chat.
        attr_accessor is_member: bool

        # Point in time (Unix timestamp) when restrictions will be lifted from the
        # user; 0 if never.
        # If the user is restricted for more than 366 days or for less than 30 seconds from the current time, the user is
        # considered to be restricted forever.
        attr_accessor restricted_until_date: Integer

        # User permissions in the chat.
        attr_accessor permissions: TD::Types::ChatPermissions
      end

      # The user is a member of the chat and has some additional privileges.
      # In basic groups, administrators can edit and delete messages sent by others, add new members, ban unprivileged
      #   members, and manage video chats.
      # In supergroups and channels, there are more detailed options for administrator privileges.
      # 
      # @attr custom_title [TD::Types::String] A custom title of the administrator; 0-16 characters without emojis;
      #   applicable to supergroups only.
      # @attr can_be_edited [Boolean] True, if the current user can edit the administrator privileges for the called user.
      # @attr can_manage_chat [Boolean] True, if the administrator can get chat event log, get chat statistics, get message
      #   statistics in channels, get channel members, see anonymous administrators in supergroups and ignore slow mode.
      #   Implied by any other privilege; applicable to supergroups and channels only.
      # @attr can_change_info [Boolean] True, if the administrator can change the chat title, photo, and other settings.
      # @attr can_post_messages [Boolean] True, if the administrator can create channel posts; applicable to channels only.
      # @attr can_edit_messages [Boolean] True, if the administrator can edit messages of other users and pin messages;
      #   applicable to channels only.
      # @attr can_delete_messages [Boolean] True, if the administrator can delete messages of other users.
      # @attr can_invite_users [Boolean] True, if the administrator can invite new users to the chat.
      # @attr can_restrict_members [Boolean] True, if the administrator can restrict, ban, or unban chat members; always
      #   true for channels.
      # @attr can_pin_messages [Boolean] True, if the administrator can pin messages; applicable to basic groups and
      #   supergroups only.
      # @attr can_promote_members [Boolean] True, if the administrator can add new administrators with a subset of their
      #   own privileges or demote administrators that were directly or indirectly promoted by them.
      # @attr can_manage_video_chats [Boolean] True, if the administrator can manage video chats.
      # @attr is_anonymous [Boolean] True, if the administrator isn't shown in the chat member list and sends messages
      #   anonymously; applicable to supergroups only.
      class Administrator < TD::Types::ChatMemberStatus
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # A custom title of the administrator; 0-16 characters without emojis;
        # applicable to supergroups only.
        attr_accessor custom_title: TD::Types::String

        # True, if the current user can edit the administrator privileges for the called user.
        attr_accessor can_be_edited: bool

        # True, if the administrator can get chat event log, get chat statistics, get message
        # statistics in channels, get channel members, see anonymous administrators in supergroups and ignore slow mode.
        # Implied by any other privilege; applicable to supergroups and channels only.
        attr_accessor can_manage_chat: bool

        # True, if the administrator can change the chat title, photo, and other settings.
        attr_accessor can_change_info: bool

        # True, if the administrator can create channel posts; applicable to channels only.
        attr_accessor can_post_messages: bool

        # True, if the administrator can edit messages of other users and pin messages;
        # applicable to channels only.
        attr_accessor can_edit_messages: bool

        # True, if the administrator can delete messages of other users.
        attr_accessor can_delete_messages: bool

        # True, if the administrator can invite new users to the chat.
        attr_accessor can_invite_users: bool

        # True, if the administrator can restrict, ban, or unban chat members; always
        # true for channels.
        attr_accessor can_restrict_members: bool

        # True, if the administrator can pin messages; applicable to basic groups and
        # supergroups only.
        attr_accessor can_pin_messages: bool

        # True, if the administrator can add new administrators with a subset of their
        # own privileges or demote administrators that were directly or indirectly promoted by them.
        attr_accessor can_promote_members: bool

        # True, if the administrator can manage video chats.
        attr_accessor can_manage_video_chats: bool

        # True, if the administrator isn't shown in the chat member list and sends messages
        # anonymously; applicable to supergroups only.
        attr_accessor is_anonymous: bool
      end
    end

    # Describes the reason why a chat is reported.
    class ChatReportReason < TD::Types::Base
      # The chat represents a fake account.
      class Fake < TD::Types::ChatReportReason
      end

      # The chat contains spam messages.
      class Spam < TD::Types::ChatReportReason
      end

      # A custom reason provided by the user.
      class Custom < TD::Types::ChatReportReason
      end

      # The chat promotes violence.
      class Violence < TD::Types::ChatReportReason
      end

      # The chat contains copyrighted content.
      class Copyright < TD::Types::ChatReportReason
      end

      # The chat has child abuse related content.
      class ChildAbuse < TD::Types::ChatReportReason
      end

      # The chat contains pornographic messages.
      class Pornography < TD::Types::ChatReportReason
      end

      # The location-based chat is unrelated to its stated location.
      class UnrelatedLocation < TD::Types::ChatReportReason
      end
    end

    # Represents a closed vector path.
    # The path begins at the end point of the last command.
    # 
    # @attr commands [Array<TD::Types::VectorPathCommand>] List of vector path commands.
    class ClosedVectorPath < TD::Types::Base
      # List of vector path commands.
      attr_accessor commands: ::Array[TD::Types::VectorPathCommand]
    end

    # Contains a list of websites the current user is logged in with Telegram.
    # 
    # @attr websites [Array<TD::Types::ConnectedWebsite>] List of connected websites.
    class ConnectedWebsites < TD::Types::Base
      # List of connected websites.
      attr_accessor websites: ::Array[TD::Types::ConnectedWebsite]
    end

    # Describes an internal https://t.me or tg: link, which must be processed by the app in a special way.
    class InternalLinkType < TD::Types::Base
      # The link is a link to a game.
      # Call searchPublicChat with the given bot username, check that the user is a bot, ask the current user to select a
      #   chat to send the game, and then call sendMessage with inputMessageGame.
      # 
      # @attr bot_username [TD::Types::String] Username of the bot that owns the game.
      # @attr game_short_name [TD::Types::String] Short name of the game.
      class Game < TD::Types::InternalLinkType
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Username of the bot that owns the game.
        attr_accessor bot_username: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Short name of the game.
        attr_accessor game_short_name: TD::Types::String
      end

      # The link is a link to a proxy.
      # Call addProxy with the given parameters to process the link and add the proxy.
      # 
      # @attr server [TD::Types::String] Proxy server IP address.
      # @attr port [Integer] Proxy server port.
      # @attr type [TD::Types::ProxyType] Type of the proxy.
      class Proxy < TD::Types::InternalLinkType
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Proxy server IP address.
        attr_accessor server: TD::Types::String

        # Proxy server port.
        attr_accessor port: Integer

        # Type of the proxy.
        attr_accessor type: TD::Types::ProxyType
      end

      # The link is a link to a theme.
      # TDLib has no theme support yet.
      # 
      # @attr theme_name [TD::Types::String] Name of the theme.
      class Theme < TD::Types::InternalLinkType
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Name of the theme.
        attr_accessor theme_name: TD::Types::String
      end

      # The link is a link to a Telegram message.
      # Call getMessageLinkInfo with the given URL to process the link.
      # 
      # @attr url [TD::Types::String] URL to be passed to getMessageLinkInfo.
      class Message < TD::Types::InternalLinkType
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # URL to be passed to getMessageLinkInfo.
        attr_accessor url: TD::Types::String
      end

      # The link is a link to app settings.
      class Settings < TD::Types::InternalLinkType
      end

      # The link is a link to a chat with a Telegram bot.
      # Call searchPublicChat with the given bot username, check that the user is a bot, show START button in the chat with
      #   the bot, and then call sendBotStartMessage with the given start parameter after the button is pressed.
      # 
      # @attr bot_username [TD::Types::String] Username of the bot.
      # @attr start_parameter [TD::Types::String] The parameter to be passed to sendBotStartMessage.
      class BotStart < TD::Types::InternalLinkType
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Username of the bot.
        attr_accessor bot_username: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # The parameter to be passed to sendBotStartMessage.
        attr_accessor start_parameter: TD::Types::String
      end

      # The link is a link to a background.
      # Call searchBackground with the given background name to process the link.
      # 
      # @attr background_name [TD::Types::String] Name of the background.
      class Background < TD::Types::InternalLinkType
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Name of the background.
        attr_accessor background_name: TD::Types::String
      end

      # The link is a link to a video chat.
      # Call searchPublicChat with the given chat username, and then joinGroupCall with the given invite hash to process
      #   the link.
      # 
      # @attr chat_username [TD::Types::String] Username of the chat with the video chat.
      # @attr invite_hash [TD::Types::String] If non-empty, invite hash to be used to join the video chat without being
      #   muted by administrators.
      # @attr is_live_stream [Boolean] True, if the video chat is expected to be a live stream in a channel or a broadcast
      #   group.
      class VideoChat < TD::Types::InternalLinkType
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Username of the chat with the video chat.
        attr_accessor chat_username: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # If non-empty, invite hash to be used to join the video chat without being
        # muted by administrators.
        attr_accessor invite_hash: TD::Types::String

        # True, if the video chat is expected to be a live stream in a channel or a broadcast
        # group.
        attr_accessor is_live_stream: bool
      end

      # The link is a chat invite link.
      # Call checkChatInviteLink with the given invite link to process the link.
      # 
      # @attr invite_link [TD::Types::String] Internal representation of the invite link.
      class ChatInvite < TD::Types::InternalLinkType
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Internal representation of the invite link.
        attr_accessor invite_link: TD::Types::String
      end

      # The link is a link to a chat by its username.
      # Call searchPublicChat with the given chat username to process the link.
      # 
      # @attr chat_username [TD::Types::String] Username of the chat.
      class PublicChat < TD::Types::InternalLinkType
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Username of the chat.
        attr_accessor chat_username: TD::Types::String
      end

      # The link is a link to a sticker set.
      # Call searchStickerSet with the given sticker set name to process the link and show the sticker set.
      # 
      # @attr sticker_set_name [TD::Types::String] Name of the sticker set.
      class StickerSet < TD::Types::InternalLinkType
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Name of the sticker set.
        attr_accessor sticker_set_name: TD::Types::String
      end

      # The link is a link to a language pack.
      # Call getLanguagePackInfo with the given language pack identifier to process the link.
      # 
      # @attr language_pack_id [TD::Types::String] Language pack identifier.
      class LanguagePack < TD::Types::InternalLinkType
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Language pack identifier.
        attr_accessor language_pack_id: TD::Types::String
      end

      # The link contains a message draft text.
      # A share screen needs to be shown to the user, then the chosen chat must be opened and the text is added to the
      #   input field.
      # 
      # @attr text [TD::Types::FormattedText] Message draft text.
      # @attr contains_link [Boolean] True, if the first line of the text contains a link.
      #   If true, the input field needs to be focused and the text after the link must be selected.
      class MessageDraft < TD::Types::InternalLinkType
        # Message draft text.
        attr_accessor text: TD::Types::FormattedText

        # True, if the first line of the text contains a link.
        # If true, the input field needs to be focused and the text after the link must be selected.
        attr_accessor contains_link: bool
      end

      # The link is a link to the theme settings section of the app.
      class ThemeSettings < TD::Types::InternalLinkType
      end

      # The link is a link to the active sessions section of the app.
      # Use getActiveSessions to handle the link.
      class ActiveSessions < TD::Types::InternalLinkType
      end

      # The link is a link to the filter settings section of the app.
      class FilterSettings < TD::Types::InternalLinkType
      end

      # The link is an unknown tg: link.
      # Call getDeepLinkInfo to process the link.
      # 
      # @attr link [TD::Types::String] Link to be passed to getDeepLinkInfo.
      class UnknownDeepLink < TD::Types::InternalLinkType
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Link to be passed to getDeepLinkInfo.
        attr_accessor link: TD::Types::String
      end

      # The link is a link to an unsupported proxy.
      # An alert can be shown to the user.
      class UnsupportedProxy < TD::Types::InternalLinkType
      end

      # The link is a link to a Telegram bot, which is supposed to be added to a group chat.
      # Call searchPublicChat with the given bot username, check that the user is a bot and can be added to groups, ask the
      #   current user to select a group to add the bot to, and then call sendBotStartMessage with the given start parameter and
      #   the chosen group chat.
      # Bots can be added to a public group only by administrators of the group.
      # 
      # @attr bot_username [TD::Types::String] Username of the bot.
      # @attr start_parameter [TD::Types::String] The parameter to be passed to sendBotStartMessage.
      class BotStartInGroup < TD::Types::InternalLinkType
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Username of the bot.
        attr_accessor bot_username: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # The parameter to be passed to sendBotStartMessage.
        attr_accessor start_parameter: TD::Types::String
      end

      # The link contains an authentication code.
      # Call checkAuthenticationCode with the code if the current authorization state is authorizationStateWaitCode.
      # 
      # @attr code [TD::Types::String] The authentication code.
      class AuthenticationCode < TD::Types::InternalLinkType
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # The authentication code.
        attr_accessor code: TD::Types::String
      end

      # The link is a link to the change phone number section of the app.
      class ChangePhoneNumber < TD::Types::InternalLinkType
      end

      # The link contains a request of Telegram passport data.
      # Call getPassportAuthorizationForm with the given parameters to process the link if the link was received from
      #   outside of the app, otherwise ignore it.
      # 
      # @attr bot_user_id [Integer] User identifier of the service's bot.
      # @attr scope [TD::Types::String] Telegram Passport element types requested by the service.
      # @attr public_key [TD::Types::String] Service's public key.
      # @attr nonce [TD::Types::String] Unique request identifier provided by the service.
      # @attr callback_url [TD::Types::String] An HTTP URL to open once the request is finished or canceled with the
      #   parameter tg_passport=success or tg_passport=cancel respectively.
      #   If empty, then the link tgbot{bot_user_id}://passport/success or tgbot{bot_user_id}://passport/cancel needs to be
      #   opened instead.
      class PassportDataRequest < TD::Types::InternalLinkType
        # User identifier of the service's bot.
        attr_accessor bot_user_id: Integer

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Telegram Passport element types requested by the service.
        attr_accessor scope: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Service's public key.
        attr_accessor public_key: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Unique request identifier provided by the service.
        attr_accessor nonce: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # An HTTP URL to open once the request is finished or canceled with the
        # parameter tg_passport=success or tg_passport=cancel respectively.
        # If empty, then the link tgbot{bot_user_id}://passport/success or tgbot{bot_user_id}://passport/cancel needs to be
        # opened instead.
        attr_accessor callback_url: TD::Types::String
      end

      # The link can be used to login the current user on another device, but it must be scanned from QR-code using in-app
      #   camera.
      # An alert similar to "This code can be used to allow someone to log in to your Telegram account.
      # To confirm Telegram login, please go to Settings > Devices > Scan QR and scan the code" needs to be shown.
      class QrCodeAuthentication < TD::Types::InternalLinkType
      end

      # The link can be used to confirm ownership of a phone number to prevent account deletion.
      # Call sendPhoneNumberConfirmationCode with the given hash and phone number to process the link.
      # 
      # @attr hash [TD::Types::String] Hash value from the link.
      # @attr phone_number [TD::Types::String] Phone number value from the link.
      class PhoneNumberConfirmation < TD::Types::InternalLinkType
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Hash value from the link.
        attr_accessor hash: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Phone number value from the link.
        attr_accessor phone_number: TD::Types::String
      end
    end

    # Represents one member of a JSON object.
    # 
    # @attr key [TD::Types::String] Member's key.
    # @attr value [TD::Types::JsonValue] Member's value.
    class JsonObjectMember < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Member's key.
      attr_accessor key: TD::Types::String

      # Member's value.
      attr_accessor value: TD::Types::JsonValue
    end

    # Portion of the price of a product (e.g., "delivery cost", "tax amount").
    # 
    # @attr label [TD::Types::String] Label for this portion of the product price.
    # @attr amount [Integer] Currency amount in the smallest units of the currency.
    class LabeledPricePart < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Label for this portion of the product price.
      attr_accessor label: TD::Types::String

      # Currency amount in the smallest units of the currency.
      attr_accessor amount: Integer
    end

    # Contains information about a language pack.
    # 
    # @attr id [TD::Types::String] Unique language pack identifier.
    # @attr base_language_pack_id [TD::Types::String, nil] Identifier of a base language pack; may be empty.
    #   If a string is missed in the language pack, then it must be fetched from base language pack.
    #   Unsupported in custom language packs.
    # @attr name [TD::Types::String] Language name.
    # @attr native_name [TD::Types::String] Name of the language in that language.
    # @attr plural_code [TD::Types::String] A language code to be used to apply plural forms.
    #   See https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html for more info.
    # @attr is_official [Boolean] True, if the language pack is official.
    # @attr is_rtl [Boolean] True, if the language pack strings are RTL.
    # @attr is_beta [Boolean] True, if the language pack is a beta language pack.
    # @attr is_installed [Boolean] True, if the language pack is installed by the current user.
    # @attr total_string_count [Integer] Total number of non-deleted strings from the language pack.
    # @attr translated_string_count [Integer] Total number of translated strings from the language pack.
    # @attr local_string_count [Integer] Total number of non-deleted strings from the language pack available locally.
    # @attr translation_url [TD::Types::String, nil] Link to language translation interface; empty for custom local
    #   language packs.
    class LanguagePackInfo < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Unique language pack identifier.
      attr_accessor id: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Identifier of a base language pack; may be empty.
      # If a string is missed in the language pack, then it must be fetched from base language pack.
      # Unsupported in custom language packs.
      attr_accessor base_language_pack_id: TD::Types::String?

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Language name.
      attr_accessor name: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Name of the language in that language.
      attr_accessor native_name: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # A language code to be used to apply plural forms.
      # See https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html for more info.
      attr_accessor plural_code: TD::Types::String

      # True, if the language pack is official.
      attr_accessor is_official: bool

      # True, if the language pack strings are RTL.
      attr_accessor is_rtl: bool

      # True, if the language pack is a beta language pack.
      attr_accessor is_beta: bool

      # True, if the language pack is installed by the current user.
      attr_accessor is_installed: bool

      # Total number of non-deleted strings from the language pack.
      attr_accessor total_string_count: Integer

      # Total number of translated strings from the language pack.
      attr_accessor translated_string_count: Integer

      # Total number of non-deleted strings from the language pack available locally.
      attr_accessor local_string_count: Integer

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Link to language translation interface; empty for custom local
      # language packs.
      attr_accessor translation_url: TD::Types::String?
    end

    # Contains information about replies to a message.
    # 
    # @attr reply_count [Integer] Number of times the message was directly or indirectly replied.
    # @attr recent_replier_ids [Array<TD::Types::MessageSender>] Identifiers of at most 3 recent repliers to the message;
    #   available in channels with a discussion supergroup.
    #   The users and chats are expected to be inaccessible: only their photo and name will be available.
    # @attr last_read_inbox_message_id [Integer] Identifier of the last read incoming reply to the message.
    # @attr last_read_outbox_message_id [Integer] Identifier of the last read outgoing reply to the message.
    # @attr last_message_id [Integer] Identifier of the last reply to the message.
    class MessageReplyInfo < TD::Types::Base
      # Number of times the message was directly or indirectly replied.
      attr_accessor reply_count: Integer

      # Identifiers of at most 3 recent repliers to the message;
      # available in channels with a discussion supergroup.
      # The users and chats are expected to be inaccessible: only their photo and name will be available.
      attr_accessor recent_replier_ids: ::Array[TD::Types::MessageSender]

      # Identifier of the last read incoming reply to the message.
      attr_accessor last_read_inbox_message_id: Integer

      # Identifier of the last read outgoing reply to the message.
      attr_accessor last_read_outbox_message_id: Integer

      # Identifier of the last reply to the message.
      attr_accessor last_message_id: Integer
    end

    # A detailed statistics about a message.
    # 
    # @attr message_interaction_graph [TD::Types::StatisticalGraph] A graph containing number of message views and
    #   shares.
    class MessageStatistics < TD::Types::Base
      # A graph containing number of message views and
      # shares.
      attr_accessor message_interaction_graph: TD::Types::StatisticalGraph
    end

    # A full list of available network statistic entries.
    # 
    # @attr since_date [Integer] Point in time (Unix timestamp) from which the statistics are collected.
    # @attr entries [Array<TD::Types::NetworkStatisticsEntry>] Network statistics entries.
    class NetworkStatistics < TD::Types::Base
      # Point in time (Unix timestamp) from which the statistics are collected.
      attr_accessor since_date: Integer

      # Network statistics entries.
      attr_accessor entries: ::Array[TD::Types::NetworkStatisticsEntry]
    end

    # Describes a group of notifications.
    # 
    # @attr id [Integer] Unique persistent auto-incremented from 1 identifier of the notification group.
    # @attr type [TD::Types::NotificationGroupType] Type of the group.
    # @attr chat_id [Integer] Identifier of a chat to which all notifications in the group belong.
    # @attr total_count [Integer] Total number of active notifications in the group.
    # @attr notifications [Array<TD::Types::Notification>] The list of active notifications.
    class NotificationGroup < TD::Types::Base
      # Unique persistent auto-incremented from 1 identifier of the notification group.
      attr_accessor id: Integer

      # Type of the group.
      attr_accessor type: TD::Types::NotificationGroupType

      # Identifier of a chat to which all notifications in the group belong.
      attr_accessor chat_id: Integer

      # Total number of active notifications in the group.
      attr_accessor total_count: Integer

      # The list of active notifications.
      attr_accessor notifications: ::Array[TD::Types::Notification]
    end

    # Contains a caption of an instant view web page block, consisting of a text and a trailing credit.
    # 
    # @attr text [TD::Types::RichText] Content of the caption.
    # @attr credit [TD::Types::RichText] Block credit (like HTML tag <cite>).
    class PageBlockCaption < TD::Types::Base
      # Content of the caption.
      attr_accessor text: TD::Types::RichText

      # Block credit (like HTML tag <cite>).
      attr_accessor credit: TD::Types::RichText
    end

    # Theme colors for a payment form.
    # 
    # @attr background_color [Integer] A color of the payment form background in the RGB24 format.
    # @attr text_color [Integer] A color of text in the RGB24 format.
    # @attr hint_color [Integer] A color of hints in the RGB24 format.
    # @attr link_color [Integer] A color of links in the RGB24 format.
    # @attr button_color [Integer] A color of the buttons in the RGB24 format.
    # @attr button_text_color [Integer] A color of text on the buttons in the RGB24 format.
    class PaymentFormTheme < TD::Types::Base
      # A color of the payment form background in the RGB24 format.
      attr_accessor background_color: Integer

      # A color of text in the RGB24 format.
      attr_accessor text_color: Integer

      # A color of hints in the RGB24 format.
      attr_accessor hint_color: Integer

      # A color of links in the RGB24 format.
      attr_accessor link_color: Integer

      # A color of the buttons in the RGB24 format.
      attr_accessor button_color: Integer

      # A color of text on the buttons in the RGB24 format.
      attr_accessor button_text_color: Integer
    end

    # Contains the exact storage usage statistics split by chats and file type.
    # 
    # @attr size [Integer] Total size of files, in bytes.
    # @attr count [Integer] Total number of files.
    # @attr by_chat [Array<TD::Types::StorageStatisticsByChat>] Statistics split by chats.
    class StorageStatistics < TD::Types::Base
      # Total size of files, in bytes.
      attr_accessor size: Integer

      # Total number of files.
      attr_accessor count: Integer

      # Statistics split by chats.
      attr_accessor by_chat: ::Array[TD::Types::StorageStatisticsByChat]
    end

    # Animated variant of a chat photo in MPEG4 format.
    # 
    # @attr length [Integer] Animation width and height.
    # @attr file [TD::Types::File] Information about the animation file.
    # @attr main_frame_timestamp [Float] Timestamp of the frame, used as a static chat photo.
    class AnimatedChatPhoto < TD::Types::Base
      # Animation width and height.
      attr_accessor length: Integer

      # Information about the animation file.
      attr_accessor file: TD::Types::File

      # Timestamp of the frame, used as a static chat photo.
      attr_accessor main_frame_timestamp: Float
    end

    # Represents the current authorization state of the TDLib client.
    class AuthorizationState < TD::Types::Base
      # The user has been successfully authorized.
      # TDLib is now ready to answer queries.
      class Ready < TD::Types::AuthorizationState
      end

      # TDLib client is in its final state.
      # All databases are closed and all resources are released.
      # No other updates will be received after this.
      # All queries will be responded to with error code 500.
      # To continue working, one must create a new instance of the TDLib client.
      class Closed < TD::Types::AuthorizationState
      end

      # TDLib is closing, all subsequent queries will be answered with the error 500.
      # Note that closing TDLib can take a while.
      # All resources will be freed only after authorizationStateClosed has been received.
      class Closing < TD::Types::AuthorizationState
      end

      # TDLib needs the user's authentication code to authorize.
      # 
      # @attr code_info [TD::Types::AuthenticationCodeInfo] Information about the authorization code that was sent.
      class WaitCode < TD::Types::AuthorizationState
        # Information about the authorization code that was sent.
        attr_accessor code_info: TD::Types::AuthenticationCodeInfo
      end

      # The user is currently logging out.
      class LoggingOut < TD::Types::AuthorizationState
      end

      # The user has been authorized, but needs to enter a password to start using the application.
      # 
      # @attr password_hint [TD::Types::String, nil] Hint for the password; may be empty.
      # @attr has_recovery_email_address [Boolean] True, if a recovery email address has been set up.
      # @attr recovery_email_address_pattern [TD::Types::String, nil] Pattern of the email address to which the recovery
      #   email was sent; empty until a recovery email has been sent.
      class WaitPassword < TD::Types::AuthorizationState
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Hint for the password; may be empty.
        attr_accessor password_hint: TD::Types::String?

        # True, if a recovery email address has been set up.
        attr_accessor has_recovery_email_address: bool

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Pattern of the email address to which the recovery
        # email was sent; empty until a recovery email has been sent.
        attr_accessor recovery_email_address_pattern: TD::Types::String?
      end

      # TDLib needs the user's phone number to authorize.
      # Call `setAuthenticationPhoneNumber` to provide the phone number, or use `requestQrCodeAuthentication`, or
      #   `checkAuthenticationBotToken` for other authentication options.
      class WaitPhoneNumber < TD::Types::AuthorizationState
      end

      # The user is unregistered and need to accept terms of service and enter their first name and last name to finish
      #   registration.
      # 
      # @attr terms_of_service [TD::Types::TermsOfService] Telegram terms of service.
      class WaitRegistration < TD::Types::AuthorizationState
        # Telegram terms of service.
        attr_accessor terms_of_service: TD::Types::TermsOfService
      end

      # TDLib needs an encryption key to decrypt the local database.
      # 
      # @attr is_encrypted [Boolean] True, if the database is currently encrypted.
      class WaitEncryptionKey < TD::Types::AuthorizationState
        # True, if the database is currently encrypted.
        attr_accessor is_encrypted: bool
      end

      # TDLib needs TdlibParameters for initialization.
      class WaitTdlibParameters < TD::Types::AuthorizationState
      end

      # The user needs to confirm authorization on another logged in device by scanning a QR code with the provided link.
      # 
      # @attr link [TD::Types::String] A tg:// URL for the QR code.
      #   The link will be updated frequently.
      class WaitOtherDeviceConfirmation < TD::Types::AuthorizationState
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # A tg:// URL for the QR code.
        # The link will be updated frequently.
        attr_accessor link: TD::Types::String
      end
    end

    # Represents a list of available reactions.
    # 
    # @attr reactions [Array<TD::Types::String>] List of reactions.
    class AvailableReactions < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # List of reactions.
      attr_accessor reactions: ::Array[TD::Types::String]
    end

    # Describes the reason why a call was discarded.
    class CallDiscardReason < TD::Types::Base
      # The call wasn't discarded, or the reason is unknown.
      class Empty < TD::Types::CallDiscardReason
      end

      # The call was ended before the conversation started.
      # It was canceled by the caller or missed by the other party.
      class Missed < TD::Types::CallDiscardReason
      end

      # The call was ended because one of the parties hung up.
      class HungUp < TD::Types::CallDiscardReason
      end

      # The call was ended before the conversation started.
      # It was declined by the other party.
      class Declined < TD::Types::CallDiscardReason
      end

      # The call was ended during the conversation because the users were disconnected.
      class Disconnected < TD::Types::CallDiscardReason
      end
    end

    # Represents a list of chat administrators.
    # 
    # @attr administrators [Array<TD::Types::ChatAdministrator>] A list of chat administrators.
    class ChatAdministrators < TD::Types::Base
      # A list of chat administrators.
      attr_accessor administrators: ::Array[TD::Types::ChatAdministrator]
    end

    # Specifies the kind of chat members to return in searchChatMembers.
    class ChatMembersFilter < TD::Types::Base
      # Returns bot members of the chat.
      class Bots < TD::Types::ChatMembersFilter
      end

      # Returns users banned from the chat; can be used only by administrators in a supergroup or in a channel.
      class Banned < TD::Types::ChatMembersFilter
      end

      # Returns all chat members, including restricted chat members.
      class Members < TD::Types::ChatMembersFilter
      end

      # Returns users which can be mentioned in the chat.
      # 
      # @attr message_thread_id [Integer] If non-zero, the identifier of the current message thread.
      class Mention < TD::Types::ChatMembersFilter
        # If non-zero, the identifier of the current message thread.
        attr_accessor message_thread_id: Integer
      end

      # Returns contacts of the user.
      class Contacts < TD::Types::ChatMembersFilter
      end

      # Returns users under certain restrictions in the chat; can be used only by administrators in a supergroup.
      class Restricted < TD::Types::ChatMembersFilter
      end

      # Returns the owner and administrators.
      class Administrators < TD::Types::ChatMembersFilter
      end
    end

    # Contains database statistics.
    # 
    # @attr statistics [TD::Types::String] Database statistics in an unspecified human-readable format.
    class DatabaseStatistics < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Database statistics in an unspecified human-readable format.
      attr_accessor statistics: TD::Types::String
    end

    # Represents a single result of an inline query.
    class InlineQueryResult < TD::Types::Base
      # Represents information about a game.
      # 
      # @attr id [TD::Types::String] Unique identifier of the query result.
      # @attr game [TD::Types::Game] Game result.
      class Game < TD::Types::InlineQueryResult
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Unique identifier of the query result.
        attr_accessor id: TD::Types::String

        # Game result.
        attr_accessor game: TD::Types::Game
      end

      # Represents an audio file.
      # 
      # @attr id [TD::Types::String] Unique identifier of the query result.
      # @attr audio [TD::Types::Audio] Audio file.
      class Audio < TD::Types::InlineQueryResult
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Unique identifier of the query result.
        attr_accessor id: TD::Types::String

        # Audio file.
        attr_accessor audio: TD::Types::Audio
      end

      # Represents a photo.
      # 
      # @attr id [TD::Types::String] Unique identifier of the query result.
      # @attr photo [TD::Types::Photo] Photo.
      # @attr title [TD::Types::String] Title of the result, if known.
      # @attr description [TD::Types::String] A short description of the result, if known.
      class Photo < TD::Types::InlineQueryResult
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Unique identifier of the query result.
        attr_accessor id: TD::Types::String

        # Photo.
        attr_accessor photo: TD::Types::Photo

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Title of the result, if known.
        attr_accessor title: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # A short description of the result, if known.
        attr_accessor description: TD::Types::String
      end

      # Represents information about a venue.
      # 
      # @attr id [TD::Types::String] Unique identifier of the query result.
      # @attr venue [TD::Types::Venue] Venue result.
      # @attr thumbnail [TD::Types::Thumbnail, nil] Result thumbnail in JPEG format; may be null.
      class Venue < TD::Types::InlineQueryResult
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Unique identifier of the query result.
        attr_accessor id: TD::Types::String

        # Venue result.
        attr_accessor venue: TD::Types::Venue

        # Result thumbnail in JPEG format; may be null.
        attr_accessor thumbnail: TD::Types::Thumbnail?
      end

      # Represents a video.
      # 
      # @attr id [TD::Types::String] Unique identifier of the query result.
      # @attr video [TD::Types::Video] Video.
      # @attr title [TD::Types::String] Title of the video.
      # @attr description [TD::Types::String] Description of the video.
      class Video < TD::Types::InlineQueryResult
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Unique identifier of the query result.
        attr_accessor id: TD::Types::String

        # Video.
        attr_accessor video: TD::Types::Video

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Title of the video.
        attr_accessor title: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Description of the video.
        attr_accessor description: TD::Types::String
      end

      # Represents a link to an article or web page.
      # 
      # @attr id [TD::Types::String] Unique identifier of the query result.
      # @attr url [TD::Types::String] URL of the result, if it exists.
      # @attr hide_url [Boolean] True, if the URL must be not shown.
      # @attr title [TD::Types::String] Title of the result.
      # @attr description [TD::Types::String] A short description of the result.
      # @attr thumbnail [TD::Types::Thumbnail, nil] Result thumbnail in JPEG format; may be null.
      class Article < TD::Types::InlineQueryResult
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Unique identifier of the query result.
        attr_accessor id: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # URL of the result, if it exists.
        attr_accessor url: TD::Types::String

        # True, if the URL must be not shown.
        attr_accessor hide_url: bool

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Title of the result.
        attr_accessor title: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # A short description of the result.
        attr_accessor description: TD::Types::String

        # Result thumbnail in JPEG format; may be null.
        attr_accessor thumbnail: TD::Types::Thumbnail?
      end

      # Represents a user contact.
      # 
      # @attr id [TD::Types::String] Unique identifier of the query result.
      # @attr contact [TD::Types::Contact] A user contact.
      # @attr thumbnail [TD::Types::Thumbnail, nil] Result thumbnail in JPEG format; may be null.
      class Contact < TD::Types::InlineQueryResult
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Unique identifier of the query result.
        attr_accessor id: TD::Types::String

        # A user contact.
        attr_accessor contact: TD::Types::Contact

        # Result thumbnail in JPEG format; may be null.
        attr_accessor thumbnail: TD::Types::Thumbnail?
      end

      # Represents a sticker.
      # 
      # @attr id [TD::Types::String] Unique identifier of the query result.
      # @attr sticker [TD::Types::Sticker] Sticker.
      class Sticker < TD::Types::InlineQueryResult
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Unique identifier of the query result.
        attr_accessor id: TD::Types::String

        # Sticker.
        attr_accessor sticker: TD::Types::Sticker
      end

      # Represents a document.
      # 
      # @attr id [TD::Types::String] Unique identifier of the query result.
      # @attr document [TD::Types::Document] Document.
      # @attr title [TD::Types::String] Document title.
      # @attr description [TD::Types::String] Document description.
      class Document < TD::Types::InlineQueryResult
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Unique identifier of the query result.
        attr_accessor id: TD::Types::String

        # Document.
        attr_accessor document: TD::Types::Document

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Document title.
        attr_accessor title: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Document description.
        attr_accessor description: TD::Types::String
      end

      # Represents a point on the map.
      # 
      # @attr id [TD::Types::String] Unique identifier of the query result.
      # @attr location [TD::Types::Location] Location result.
      # @attr title [TD::Types::String] Title of the result.
      # @attr thumbnail [TD::Types::Thumbnail, nil] Result thumbnail in JPEG format; may be null.
      class Location < TD::Types::InlineQueryResult
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Unique identifier of the query result.
        attr_accessor id: TD::Types::String

        # Location result.
        attr_accessor location: TD::Types::Location

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Title of the result.
        attr_accessor title: TD::Types::String

        # Result thumbnail in JPEG format; may be null.
        attr_accessor thumbnail: TD::Types::Thumbnail?
      end

      # Represents an animation file.
      # 
      # @attr id [TD::Types::String] Unique identifier of the query result.
      # @attr animation [TD::Types::Animation] Animation file.
      # @attr title [TD::Types::String] Animation title.
      class Animation < TD::Types::InlineQueryResult
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Unique identifier of the query result.
        attr_accessor id: TD::Types::String

        # Animation file.
        attr_accessor animation: TD::Types::Animation

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Animation title.
        attr_accessor title: TD::Types::String
      end

      # Represents a voice note.
      # 
      # @attr id [TD::Types::String] Unique identifier of the query result.
      # @attr voice_note [TD::Types::VoiceNote] Voice note.
      # @attr title [TD::Types::String] Title of the voice note.
      class VoiceNote < TD::Types::InlineQueryResult
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Unique identifier of the query result.
        attr_accessor id: TD::Types::String

        # Voice note.
        attr_accessor voice_note: TD::Types::VoiceNote

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Title of the voice note.
        attr_accessor title: TD::Types::String
      end
    end

    # Contains a TDLib internal log verbosity level.
    # 
    # @attr verbosity_level [Integer] Log verbosity level.
    class LogVerbosityLevel < TD::Types::Base
      # Log verbosity level.
      attr_accessor verbosity_level: Integer
    end

    # Contains information about a message thread.
    # 
    # @attr chat_id [Integer] Identifier of the chat to which the message thread belongs.
    # @attr message_thread_id [Integer] Message thread identifier, unique within the chat.
    # @attr reply_info [TD::Types::MessageReplyInfo] Information about the message thread.
    # @attr unread_message_count [Integer] Approximate number of unread messages in the message thread.
    # @attr messages [Array<TD::Types::Message>] The messages from which the thread starts.
    #   The messages are returned in a reverse chronological order (i.e., in order of decreasing message_id).
    # @attr draft_message [TD::Types::DraftMessage, nil] A draft of a message in the message thread; may be null.
    class MessageThreadInfo < TD::Types::Base
      # Identifier of the chat to which the message thread belongs.
      attr_accessor chat_id: Integer

      # Message thread identifier, unique within the chat.
      attr_accessor message_thread_id: Integer

      # Information about the message thread.
      attr_accessor reply_info: TD::Types::MessageReplyInfo

      # Approximate number of unread messages in the message thread.
      attr_accessor unread_message_count: Integer

      # The messages from which the thread starts.
      # The messages are returned in a reverse chronological order (i.e., in order of decreasing message_id).
      attr_accessor messages: ::Array[TD::Types::Message]

      # A draft of a message in the message thread; may be null.
      attr_accessor draft_message: TD::Types::DraftMessage?
    end

    # Represents a vector path command.
    class VectorPathCommand < TD::Types::Base
      # A straight line to a given point.
      # 
      # @attr end_point [TD::Types::Point] The end point of the straight line.
      class Line < TD::Types::VectorPathCommand
        # The end point of the straight line.
        attr_accessor end_point: TD::Types::Point
      end

      # A cubic Bézier curve to a given point.
      # 
      # @attr start_control_point [TD::Types::Point] The start control point of the curve.
      # @attr end_control_point [TD::Types::Point] The end control point of the curve.
      # @attr end_point [TD::Types::Point] The end point of the curve.
      class CubicBezierCurve < TD::Types::VectorPathCommand
        # The start control point of the curve.
        attr_accessor start_control_point: TD::Types::Point

        # The end control point of the curve.
        attr_accessor end_control_point: TD::Types::Point

        # The end point of the curve.
        attr_accessor end_point: TD::Types::Point
      end
    end

    # Represents the results of the inline query.
    # Use sendInlineQueryResultMessage to send the result of the query.
    # 
    # @attr inline_query_id [Integer] Unique identifier of the inline query.
    # @attr next_offset [TD::Types::String] The offset for the next request.
    #   If empty, there are no more results.
    # @attr results [Array<TD::Types::InlineQueryResult>] Results of the query.
    # @attr switch_pm_text [TD::Types::String] If non-empty, this text must be shown on the button, which opens a private
    #   chat with the bot and sends the bot a start message with the switch_pm_parameter.
    # @attr switch_pm_parameter [TD::Types::String] Parameter for the bot start message.
    class InlineQueryResults < TD::Types::Base
      # Unique identifier of the inline query.
      attr_accessor inline_query_id: Integer

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # The offset for the next request.
      # If empty, there are no more results.
      attr_accessor next_offset: TD::Types::String

      # Results of the query.
      attr_accessor results: ::Array[TD::Types::InlineQueryResult]

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # If non-empty, this text must be shown on the button, which opens a private
      # chat with the bot and sends the bot a start message with the switch_pm_parameter.
      attr_accessor switch_pm_text: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Parameter for the bot start message.
      attr_accessor switch_pm_parameter: TD::Types::String
    end

    # Describes a keyboard button type.
    class KeyboardButtonType < TD::Types::Base
      # A simple button, with text that must be sent when the button is pressed.
      class Text < TD::Types::KeyboardButtonType
      end

      # A button that allows the user to create and send a poll when pressed; available only in private chats.
      # 
      # @attr force_regular [Boolean] If true, only regular polls must be allowed to create.
      # @attr force_quiz [Boolean] If true, only polls in quiz mode must be allowed to create.
      class RequestPoll < TD::Types::KeyboardButtonType
        # If true, only regular polls must be allowed to create.
        attr_accessor force_regular: bool

        # If true, only polls in quiz mode must be allowed to create.
        attr_accessor force_quiz: bool
      end

      # A button that sends the user's location when pressed; available only in private chats.
      class RequestLocation < TD::Types::KeyboardButtonType
      end

      # A button that sends the user's phone number when pressed; available only in private chats.
      class RequestPhoneNumber < TD::Types::KeyboardButtonType
      end
    end

    # Represents one language pack string.
    # 
    # @attr key [TD::Types::String] String key.
    # @attr value [TD::Types::LanguagePackStringValue] String value; pass null if the string needs to be taken from the
    #   built-in English language pack.
    class LanguagePackString < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # String key.
      attr_accessor key: TD::Types::String

      # String value; pass null if the string needs to be taken from the
      # built-in English language pack.
      attr_accessor value: TD::Types::LanguagePackStringValue
    end

    # Contains information about found messages sent on a specific day.
    # 
    # @attr total_count [Integer] Total number of found messages sent on the day.
    # @attr message [TD::Types::Message] First message sent on the day.
    class MessageCalendarDay < TD::Types::Base
      # Total number of found messages sent on the day.
      attr_accessor total_count: Integer

      # First message sent on the day.
      attr_accessor message: TD::Types::Message
    end

    # Options to be used when a message content is copied without reference to the original sender.
    # Service messages and messageInvoice can't be copied.
    # 
    # @attr send_copy [Boolean] True, if content of the message needs to be copied without reference to the original
    #   sender.
    #   Always true if the message is forwarded to a secret chat or is local.
    # @attr replace_caption [Boolean] True, if media caption of the message copy needs to be replaced.
    #   Ignored if send_copy is false.
    # @attr new_caption [TD::Types::FormattedText] New message caption; pass null to copy message without caption.
    #   Ignored if replace_caption is false.
    class MessageCopyOptions < TD::Types::Base
      # True, if content of the message needs to be copied without reference to the original
      # sender.
      # Always true if the message is forwarded to a secret chat or is local.
      attr_accessor send_copy: bool

      # True, if media caption of the message copy needs to be replaced.
      # Ignored if send_copy is false.
      attr_accessor replace_caption: bool

      # New message caption; pass null to copy message without caption.
      # Ignored if replace_caption is false.
      attr_accessor new_caption: TD::Types::FormattedText
    end

    # Contains information about a forwarded message.
    # 
    # @attr origin [TD::Types::MessageForwardOrigin] Origin of a forwarded message.
    # @attr date [Integer] Point in time (Unix timestamp) when the message was originally sent.
    # @attr public_service_announcement_type [TD::Types::String] The type of a public service announcement for the
    #   forwarded message.
    # @attr from_chat_id [Integer] For messages forwarded to the chat with the current user (Saved Messages), to the
    #   Replies bot chat, or to the channel's discussion group, the identifier of the chat from which the message was forwarded
    #   last time; 0 if unknown.
    # @attr from_message_id [Integer] For messages forwarded to the chat with the current user (Saved Messages), to the
    #   Replies bot chat, or to the channel's discussion group, the identifier of the original message from which the new
    #   message was forwarded last time; 0 if unknown.
    class MessageForwardInfo < TD::Types::Base
      # Origin of a forwarded message.
      attr_accessor origin: TD::Types::MessageForwardOrigin

      # Point in time (Unix timestamp) when the message was originally sent.
      attr_accessor date: Integer

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # The type of a public service announcement for the
      # forwarded message.
      attr_accessor public_service_announcement_type: TD::Types::String

      # For messages forwarded to the chat with the current user (Saved Messages), to the
      # Replies bot chat, or to the channel's discussion group, the identifier of the chat from which the message was forwarded
      # last time; 0 if unknown.
      attr_accessor from_chat_id: Integer

      # For messages forwarded to the chat with the current user (Saved Messages), to the
      # Replies bot chat, or to the channel's discussion group, the identifier of the original message from which the new
      # message was forwarded last time; 0 if unknown.
      attr_accessor from_message_id: Integer
    end

    # Options to be used when a message is sent.
    # 
    # @attr disable_notification [Boolean] Pass true to disable notification for the message.
    # @attr from_background [Boolean] Pass true if the message is sent from the background.
    # @attr protect_content [Boolean] Pass true if the content of the message must be protected from forwarding and
    #   saving; for bots only.
    # @attr scheduling_state [TD::Types::MessageSchedulingState] Message scheduling state; pass null to send message
    #   immediately.
    #   Messages sent to a secret chat, live location messages and self-destructing messages can't be scheduled.
    class MessageSendOptions < TD::Types::Base
      # Pass true to disable notification for the message.
      attr_accessor disable_notification: bool

      # Pass true if the message is sent from the background.
      attr_accessor from_background: bool

      # Pass true if the content of the message must be protected from forwarding and
      # saving; for bots only.
      attr_accessor protect_content: bool

      # Message scheduling state; pass null to send message
      # immediately.
      # Messages sent to a secret chat, live location messages and self-destructing messages can't be scheduled.
      attr_accessor scheduling_state: TD::Types::MessageSchedulingState
    end

    # Describes an item of a list page block.
    # 
    # @attr label [TD::Types::String] Item label.
    # @attr page_blocks [Array<TD::Types::PageBlock>] Item blocks.
    class PageBlockListItem < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Item label.
      attr_accessor label: TD::Types::String

      # Item blocks.
      attr_accessor page_blocks: ::Array[TD::Types::PageBlock]
    end

    # Contains content of a push message notification.
    class PushMessageContent < TD::Types::Base
      # A message with a game.
      # 
      # @attr title [TD::Types::String, nil] Game title, empty for pinned game message.
      # @attr is_pinned [Boolean] True, if the message is a pinned message with the specified content.
      class Game < TD::Types::PushMessageContent
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Game title, empty for pinned game message.
        attr_accessor title: TD::Types::String?

        # True, if the message is a pinned message with the specified content.
        attr_accessor is_pinned: bool
      end

      # A message with a poll.
      # 
      # @attr question [TD::Types::String] Poll question.
      # @attr is_regular [Boolean] True, if the poll is regular and not in quiz mode.
      # @attr is_pinned [Boolean] True, if the message is a pinned message with the specified content.
      class Poll < TD::Types::PushMessageContent
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Poll question.
        attr_accessor question: TD::Types::String

        # True, if the poll is regular and not in quiz mode.
        attr_accessor is_regular: bool

        # True, if the message is a pinned message with the specified content.
        attr_accessor is_pinned: bool
      end

      # A text message.
      # 
      # @attr text [TD::Types::String] Message text.
      # @attr is_pinned [Boolean] True, if the message is a pinned message with the specified content.
      class Text < TD::Types::PushMessageContent
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Message text.
        attr_accessor text: TD::Types::String

        # True, if the message is a pinned message with the specified content.
        attr_accessor is_pinned: bool
      end

      # An audio message.
      # 
      # @attr audio [TD::Types::Audio, nil] Message content; may be null.
      # @attr is_pinned [Boolean] True, if the message is a pinned message with the specified content.
      class Audio < TD::Types::PushMessageContent
        # Message content; may be null.
        attr_accessor audio: TD::Types::Audio?

        # True, if the message is a pinned message with the specified content.
        attr_accessor is_pinned: bool
      end

      # A photo message.
      # 
      # @attr photo [TD::Types::Photo, nil] Message content; may be null.
      # @attr caption [TD::Types::String] Photo caption.
      # @attr is_secret [Boolean] True, if the photo is secret.
      # @attr is_pinned [Boolean] True, if the message is a pinned message with the specified content.
      class Photo < TD::Types::PushMessageContent
        # Message content; may be null.
        attr_accessor photo: TD::Types::Photo?

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Photo caption.
        attr_accessor caption: TD::Types::String

        # True, if the photo is secret.
        attr_accessor is_secret: bool

        # True, if the message is a pinned message with the specified content.
        attr_accessor is_pinned: bool
      end

      # A video message.
      # 
      # @attr video [TD::Types::Video, nil] Message content; may be null.
      # @attr caption [TD::Types::String] Video caption.
      # @attr is_secret [Boolean] True, if the video is secret.
      # @attr is_pinned [Boolean] True, if the message is a pinned message with the specified content.
      class Video < TD::Types::PushMessageContent
        # Message content; may be null.
        attr_accessor video: TD::Types::Video?

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Video caption.
        attr_accessor caption: TD::Types::String

        # True, if the video is secret.
        attr_accessor is_secret: bool

        # True, if the message is a pinned message with the specified content.
        attr_accessor is_pinned: bool
      end

      # A general message with hidden content.
      # 
      # @attr is_pinned [Boolean] True, if the message is a pinned message with the specified content.
      class Hidden < TD::Types::PushMessageContent
        # True, if the message is a pinned message with the specified content.
        attr_accessor is_pinned: bool
      end

      # A message with a user contact.
      # 
      # @attr name [TD::Types::String] Contact's name.
      # @attr is_pinned [Boolean] True, if the message is a pinned message with the specified content.
      class Contact < TD::Types::PushMessageContent
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Contact's name.
        attr_accessor name: TD::Types::String

        # True, if the message is a pinned message with the specified content.
        attr_accessor is_pinned: bool
      end

      # A message with an invoice from a bot.
      # 
      # @attr price [TD::Types::String] Product price.
      # @attr is_pinned [Boolean] True, if the message is a pinned message with the specified content.
      class Invoice < TD::Types::PushMessageContent
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Product price.
        attr_accessor price: TD::Types::String

        # True, if the message is a pinned message with the specified content.
        attr_accessor is_pinned: bool
      end

      # A message with a sticker.
      # 
      # @attr sticker [TD::Types::Sticker, nil] Message content; may be null.
      # @attr emoji [TD::Types::String, nil] Emoji corresponding to the sticker; may be empty.
      # @attr is_pinned [Boolean] True, if the message is a pinned message with the specified content.
      class Sticker < TD::Types::PushMessageContent
        # Message content; may be null.
        attr_accessor sticker: TD::Types::Sticker?

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Emoji corresponding to the sticker; may be empty.
        attr_accessor emoji: TD::Types::String?

        # True, if the message is a pinned message with the specified content.
        attr_accessor is_pinned: bool
      end

      # A document message (a general file).
      # 
      # @attr document [TD::Types::Document, nil] Message content; may be null.
      # @attr is_pinned [Boolean] True, if the message is a pinned message with the specified content.
      class Document < TD::Types::PushMessageContent
        # Message content; may be null.
        attr_accessor document: TD::Types::Document?

        # True, if the message is a pinned message with the specified content.
        attr_accessor is_pinned: bool
      end

      # A message with a location.
      # 
      # @attr is_live [Boolean] True, if the location is live.
      # @attr is_pinned [Boolean] True, if the message is a pinned message with the specified content.
      class Location < TD::Types::PushMessageContent
        # True, if the location is live.
        attr_accessor is_live: bool

        # True, if the message is a pinned message with the specified content.
        attr_accessor is_pinned: bool
      end

      # An animation message (GIF-style)..
      # 
      # @attr animation [TD::Types::Animation, nil] Message content; may be null.
      # @attr caption [TD::Types::String] Animation caption.
      # @attr is_pinned [Boolean] True, if the message is a pinned message with the specified content.
      class Animation < TD::Types::PushMessageContent
        # Message content; may be null.
        attr_accessor animation: TD::Types::Animation?

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Animation caption.
        attr_accessor caption: TD::Types::String

        # True, if the message is a pinned message with the specified content.
        attr_accessor is_pinned: bool
      end

      # A new high score was achieved in a game.
      # 
      # @attr title [TD::Types::String, nil] Game title, empty for pinned message.
      # @attr score [Integer] New score, 0 for pinned message.
      # @attr is_pinned [Boolean] True, if the message is a pinned message with the specified content.
      class GameScore < TD::Types::PushMessageContent
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Game title, empty for pinned message.
        attr_accessor title: TD::Types::String?

        # New score, 0 for pinned message.
        attr_accessor score: Integer

        # True, if the message is a pinned message with the specified content.
        attr_accessor is_pinned: bool
      end

      # A video note message.
      # 
      # @attr video_note [TD::Types::VideoNote, nil] Message content; may be null.
      # @attr is_pinned [Boolean] True, if the message is a pinned message with the specified content.
      class VideoNote < TD::Types::PushMessageContent
        # Message content; may be null.
        attr_accessor video_note: TD::Types::VideoNote?

        # True, if the message is a pinned message with the specified content.
        attr_accessor is_pinned: bool
      end

      # A voice note message.
      # 
      # @attr voice_note [TD::Types::VoiceNote, nil] Message content; may be null.
      # @attr is_pinned [Boolean] True, if the message is a pinned message with the specified content.
      class VoiceNote < TD::Types::PushMessageContent
        # Message content; may be null.
        attr_accessor voice_note: TD::Types::VoiceNote?

        # True, if the message is a pinned message with the specified content.
        attr_accessor is_pinned: bool
      end

      # A media album.
      # 
      # @attr total_count [Integer] Number of messages in the album.
      # @attr has_photos [Boolean] True, if the album has at least one photo.
      # @attr has_videos [Boolean] True, if the album has at least one video.
      # @attr has_audios [Boolean] True, if the album has at least one audio file.
      # @attr has_documents [Boolean] True, if the album has at least one document.
      class MediaAlbum < TD::Types::PushMessageContent
        # Number of messages in the album.
        attr_accessor total_count: Integer

        # True, if the album has at least one photo.
        attr_accessor has_photos: bool

        # True, if the album has at least one video.
        attr_accessor has_videos: bool

        # True, if the album has at least one audio file.
        attr_accessor has_audios: bool

        # True, if the album has at least one document.
        attr_accessor has_documents: bool
      end

      # A chat theme was edited.
      # 
      # @attr theme_name [TD::Types::String] If non-empty, name of a new theme, set for the chat.
      #   Otherwise chat theme was reset to the default one.
      class ChatSetTheme < TD::Types::PushMessageContent
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # If non-empty, name of a new theme, set for the chat.
        # Otherwise chat theme was reset to the default one.
        attr_accessor theme_name: TD::Types::String
      end

      # New chat members were invited to a group.
      # 
      # @attr member_name [TD::Types::String] Name of the added member.
      # @attr is_current_user [Boolean] True, if the current user was added to the group.
      # @attr is_returned [Boolean] True, if the user has returned to the group themselves.
      class ChatAddMembers < TD::Types::PushMessageContent
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Name of the added member.
        attr_accessor member_name: TD::Types::String

        # True, if the current user was added to the group.
        attr_accessor is_current_user: bool

        # True, if the user has returned to the group themselves.
        attr_accessor is_returned: bool
      end

      # A forwarded messages.
      # 
      # @attr total_count [Integer] Number of forwarded messages.
      class MessageForwards < TD::Types::PushMessageContent
        # Number of forwarded messages.
        attr_accessor total_count: Integer
      end

      # A screenshot of a message in the chat has been taken.
      class ScreenshotTaken < TD::Types::PushMessageContent
      end

      # A chat photo was edited.
      class ChatChangePhoto < TD::Types::PushMessageContent
      end

      # A chat title was edited.
      # 
      # @attr title [TD::Types::String] New chat title.
      class ChatChangeTitle < TD::Types::PushMessageContent
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # New chat title.
        attr_accessor title: TD::Types::String
      end

      # A new member joined the chat via an invite link.
      class ChatJoinByLink < TD::Types::PushMessageContent
      end

      # A chat member was deleted.
      # 
      # @attr member_name [TD::Types::String] Name of the deleted member.
      # @attr is_current_user [Boolean] True, if the current user was deleted from the group.
      # @attr is_left [Boolean] True, if the user has left the group themselves.
      class ChatDeleteMember < TD::Types::PushMessageContent
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Name of the deleted member.
        attr_accessor member_name: TD::Types::String

        # True, if the current user was deleted from the group.
        attr_accessor is_current_user: bool

        # True, if the user has left the group themselves.
        attr_accessor is_left: bool
      end

      # A contact has registered with Telegram.
      class ContactRegistered < TD::Types::PushMessageContent
      end

      # A new member was accepted to the chat by an administrator.
      class ChatJoinByRequest < TD::Types::PushMessageContent
      end

      # A newly created basic group.
      class BasicGroupChatCreate < TD::Types::PushMessageContent
      end
    end

    # Contains full information about a supergroup or channel.
    # 
    # @attr photo [TD::Types::ChatPhoto, nil] Chat photo; may be null.
    # @attr description [TD::Types::String] Supergroup or channel description.
    # @attr member_count [Integer] Number of members in the supergroup or channel; 0 if unknown.
    # @attr administrator_count [Integer] Number of privileged users in the supergroup or channel; 0 if unknown.
    # @attr restricted_count [Integer] Number of restricted users in the supergroup; 0 if unknown.
    # @attr banned_count [Integer] Number of users banned from chat; 0 if unknown.
    # @attr linked_chat_id [Integer] Chat identifier of a discussion group for the channel, or a channel, for which the
    #   supergroup is the designated discussion group; 0 if none or unknown.
    # @attr slow_mode_delay [Integer] Delay between consecutive sent messages for non-administrator supergroup members,
    #   in seconds.
    # @attr slow_mode_delay_expires_in [Float] Time left before next message can be sent in the supergroup, in seconds.
    #   An {TD::Types::Update::SupergroupFullInfo} update is not triggered when value of this field changes, but both new
    #   and old values are non-zero.
    # @attr can_get_members [Boolean] True, if members of the chat can be retrieved.
    # @attr can_set_username [Boolean] True, if the chat username can be changed.
    # @attr can_set_sticker_set [Boolean] True, if the supergroup sticker set can be changed.
    # @attr can_set_location [Boolean] True, if the supergroup location can be changed.
    # @attr can_get_statistics [Boolean] True, if the supergroup or channel statistics are available.
    # @attr is_all_history_available [Boolean] True, if new chat members will have access to old messages.
    #   In public or discussion groups and both public and private channels, old messages are always available, so this
    #   option affects only private supergroups without a linked chat.
    #   The value of this field is only available for chat administrators.
    # @attr sticker_set_id [Integer] Identifier of the supergroup sticker set; 0 if none.
    # @attr location [TD::Types::ChatLocation, nil] Location to which the supergroup is connected; may be null.
    # @attr invite_link [TD::Types::ChatInviteLink, nil] Primary invite link for the chat; may be null.
    #   For chat administrators with can_invite_users right only.
    # @attr bot_commands [Array<TD::Types::BotCommands>] List of commands of bots in the group.
    # @attr upgraded_from_basic_group_id [Integer] Identifier of the basic group from which supergroup was upgraded; 0 if
    #   none.
    # @attr upgraded_from_max_message_id [Integer] Identifier of the last message in the basic group from which
    #   supergroup was upgraded; 0 if none.
    class SupergroupFullInfo < TD::Types::Base
      # Chat photo; may be null.
      attr_accessor photo: TD::Types::ChatPhoto?

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Supergroup or channel description.
      attr_accessor description: TD::Types::String

      # Number of members in the supergroup or channel; 0 if unknown.
      attr_accessor member_count: Integer

      # Number of privileged users in the supergroup or channel; 0 if unknown.
      attr_accessor administrator_count: Integer

      # Number of restricted users in the supergroup; 0 if unknown.
      attr_accessor restricted_count: Integer

      # Number of users banned from chat; 0 if unknown.
      attr_accessor banned_count: Integer

      # Chat identifier of a discussion group for the channel, or a channel, for which the
      # supergroup is the designated discussion group; 0 if none or unknown.
      attr_accessor linked_chat_id: Integer

      # Delay between consecutive sent messages for non-administrator supergroup members,
      # in seconds.
      attr_accessor slow_mode_delay: Integer

      # Time left before next message can be sent in the supergroup, in seconds.
      # An {TD::Types::Update::SupergroupFullInfo} update is not triggered when value of this field changes, but both new
      # and old values are non-zero.
      attr_accessor slow_mode_delay_expires_in: Float

      # True, if members of the chat can be retrieved.
      attr_accessor can_get_members: bool

      # True, if the chat username can be changed.
      attr_accessor can_set_username: bool

      # True, if the supergroup sticker set can be changed.
      attr_accessor can_set_sticker_set: bool

      # True, if the supergroup location can be changed.
      attr_accessor can_set_location: bool

      # True, if the supergroup or channel statistics are available.
      attr_accessor can_get_statistics: bool

      # True, if new chat members will have access to old messages.
      # In public or discussion groups and both public and private channels, old messages are always available, so this
      # option affects only private supergroups without a linked chat.
      # The value of this field is only available for chat administrators.
      attr_accessor is_all_history_available: bool

      # Identifier of the supergroup sticker set; 0 if none.
      attr_accessor sticker_set_id: Integer

      # Location to which the supergroup is connected; may be null.
      attr_accessor location: TD::Types::ChatLocation?

      # Primary invite link for the chat; may be null.
      # For chat administrators with can_invite_users right only.
      attr_accessor invite_link: TD::Types::ChatInviteLink?

      # List of commands of bots in the group.
      attr_accessor bot_commands: ::Array[TD::Types::BotCommands]

      # Identifier of the basic group from which supergroup was upgraded; 0 if
      # none.
      attr_accessor upgraded_from_basic_group_id: Integer

      # Identifier of the last message in the basic group from which
      # supergroup was upgraded; 0 if none.
      attr_accessor upgraded_from_max_message_id: Integer
    end

    # Describes available user privacy settings.
    class UserPrivacySetting < TD::Types::Base
      # A privacy setting for managing whether the user can be called.
      class AllowCalls < TD::Types::UserPrivacySetting
      end

      # A privacy setting for managing whether the user's online status is visible.
      class ShowStatus < TD::Types::UserPrivacySetting
      end

      # A privacy setting for managing whether the user's phone number is visible.
      class ShowPhoneNumber < TD::Types::UserPrivacySetting
      end

      # A privacy setting for managing whether the user can be invited to chats.
      class AllowChatInvites < TD::Types::UserPrivacySetting
      end

      # A privacy setting for managing whether the user's profile photo is visible.
      class ShowProfilePhoto < TD::Types::UserPrivacySetting
      end

      # A privacy setting for managing whether peer-to-peer connections can be used for calls.
      class AllowPeerToPeerCalls < TD::Types::UserPrivacySetting
      end

      # A privacy setting for managing whether the user can be found by their phone number.
      # Checked only if the phone number is not known to the other user.
      # Can be set only to "Allow contacts" or "Allow all".
      class AllowFindingByPhoneNumber < TD::Types::UserPrivacySetting
      end

      # A privacy setting for managing whether a link to the user's account is included in forwarded messages.
      class ShowLinkInForwardedMessages < TD::Types::UserPrivacySetting
      end
    end

    # Contains a temporary identifier of validated order information, which is stored for one hour.
    # Also contains the available shipping options.
    # 
    # @attr order_info_id [TD::Types::String] Temporary identifier of the order information.
    # @attr shipping_options [Array<TD::Types::ShippingOption>] Available shipping options.
    class ValidatedOrderInfo < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Temporary identifier of the order information.
      attr_accessor order_info_id: TD::Types::String

      # Available shipping options.
      attr_accessor shipping_options: ::Array[TD::Types::ShippingOption]
    end

    # Contains full information about a basic group.
    # 
    # @attr photo [TD::Types::ChatPhoto, nil] Chat photo; may be null.
    # @attr description [TD::Types::String] Group description.
    #   Updated only after the basic group is opened.
    # @attr creator_user_id [Integer] User identifier of the creator of the group; 0 if unknown.
    # @attr members [Array<TD::Types::ChatMember>] Group members.
    # @attr invite_link [TD::Types::ChatInviteLink, nil] Primary invite link for this group; may be null.
    #   For chat administrators with can_invite_users right only.
    #   Updated only after the basic group is opened.
    # @attr bot_commands [Array<TD::Types::BotCommands>] List of commands of bots in the group.
    class BasicGroupFullInfo < TD::Types::Base
      # Chat photo; may be null.
      attr_accessor photo: TD::Types::ChatPhoto?

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Group description.
      # Updated only after the basic group is opened.
      attr_accessor description: TD::Types::String

      # User identifier of the creator of the group; 0 if unknown.
      attr_accessor creator_user_id: Integer

      # Group members.
      attr_accessor members: ::Array[TD::Types::ChatMember]

      # Primary invite link for this group; may be null.
      # For chat administrators with can_invite_users right only.
      # Updated only after the basic group is opened.
      attr_accessor invite_link: TD::Types::ChatInviteLink?

      # List of commands of bots in the group.
      attr_accessor bot_commands: ::Array[TD::Types::BotCommands]
    end

    # Contains a bot's answer to a callback query.
    # 
    # @attr text [TD::Types::String] Text of the answer.
    # @attr show_alert [Boolean] True, if an alert must be shown to the user instead of a toast notification.
    # @attr url [TD::Types::String] URL to be opened.
    class CallbackQueryAnswer < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Text of the answer.
      attr_accessor text: TD::Types::String

      # True, if an alert must be shown to the user instead of a toast notification.
      attr_accessor show_alert: bool

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # URL to be opened.
      attr_accessor url: TD::Types::String
    end

    # Contains information about a chat invite link.
    # 
    # @attr chat_id [Integer] Chat identifier of the invite link; 0 if the user has no access to the chat before joining.
    # @attr accessible_for [Integer] If non-zero, the amount of time for which read access to the chat will remain
    #   available, in seconds.
    # @attr type [TD::Types::ChatType] Type of the chat.
    # @attr title [TD::Types::String] Title of the chat.
    # @attr photo [TD::Types::ChatPhotoInfo, nil] Chat photo; may be null.
    # @attr description [TD::Types::String] Chat description.
    # @attr member_count [Integer] Number of members in the chat.
    # @attr member_user_ids [Array<Integer>] User identifiers of some chat members that may be known to the current user.
    # @attr creates_join_request [Boolean] True, if the link only creates join request.
    # @attr is_public [Boolean] True, if the chat is a public supergroup or channel, i.e.
    #   it has a username or it is a location-based supergroup.
    class ChatInviteLinkInfo < TD::Types::Base
      # Chat identifier of the invite link; 0 if the user has no access to the chat before joining.
      attr_accessor chat_id: Integer

      # If non-zero, the amount of time for which read access to the chat will remain
      # available, in seconds.
      attr_accessor accessible_for: Integer

      # Type of the chat.
      attr_accessor type: TD::Types::ChatType

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Title of the chat.
      attr_accessor title: TD::Types::String

      # Chat photo; may be null.
      attr_accessor photo: TD::Types::ChatPhotoInfo?

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Chat description.
      attr_accessor description: TD::Types::String

      # Number of members in the chat.
      attr_accessor member_count: Integer

      # User identifiers of some chat members that may be known to the current user.
      attr_accessor member_user_ids: ::Array[Integer]

      # True, if the link only creates join request.
      attr_accessor creates_join_request: bool

      # True, if the chat is a public supergroup or channel, i.e.
      # it has a username or it is a location-based supergroup.
      attr_accessor is_public: bool
    end

    # Contains the result of a custom request.
    # 
    # @attr result [TD::Types::String] A JSON-serialized result.
    class CustomRequestResult < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # A JSON-serialized result.
      attr_accessor result: TD::Types::String
    end

    # Contains encrypted Telegram Passport data credentials.
    # 
    # @attr data [String] The encrypted credentials.
    # @attr hash [String] The decrypted data hash.
    # @attr secret [String] Secret for data decryption, encrypted with the service's public key.
    class EncryptedCredentials < TD::Types::Base
      # The encrypted credentials.
      attr_accessor data: String

      # The decrypted data hash.
      attr_accessor hash: String

      # Secret for data decryption, encrypted with the service's public key.
      attr_accessor secret: String
    end

    # The content of a message to send.
    class InputMessageContent < TD::Types::Base
      # A dice message.
      # 
      # @attr emoji [TD::Types::String] Emoji on which the dice throw animation is based.
      # @attr clear_draft [Boolean] True, if the chat message draft must be deleted.
      class Dice < TD::Types::InputMessageContent
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Emoji on which the dice throw animation is based.
        attr_accessor emoji: TD::Types::String

        # True, if the chat message draft must be deleted.
        attr_accessor clear_draft: bool
      end

      # A message with a game; not supported for channels or secret chats.
      # 
      # @attr bot_user_id [Integer] User identifier of the bot that owns the game.
      # @attr game_short_name [TD::Types::String] Short name of the game.
      class Game < TD::Types::InputMessageContent
        # User identifier of the bot that owns the game.
        attr_accessor bot_user_id: Integer

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Short name of the game.
        attr_accessor game_short_name: TD::Types::String
      end

      # A message with a poll.
      # Polls can't be sent to secret chats.
      # Polls can be sent only to a private chat with a bot.
      # 
      # @attr question [TD::Types::String] Poll question; 1-255 characters (up to 300 characters for bots).
      # @attr options [Array<TD::Types::String>] List of poll answer options, 2-10 strings 1-100 characters each.
      # @attr is_anonymous [Boolean] True, if the poll voters are anonymous.
      #   Non-anonymous polls can't be sent or forwarded to channels.
      # @attr type [TD::Types::PollType] Type of the poll.
      # @attr open_period [Integer] Amount of time the poll will be active after creation, in seconds; for bots only.
      # @attr close_date [Integer] Point in time (Unix timestamp) when the poll will automatically be closed; for bots
      #   only.
      # @attr is_closed [Boolean] True, if the poll needs to be sent already closed; for bots only.
      class Poll < TD::Types::InputMessageContent
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Poll question; 1-255 characters (up to 300 characters for bots).
        attr_accessor question: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # List of poll answer options, 2-10 strings 1-100 characters each.
        attr_accessor options: ::Array[TD::Types::String]

        # True, if the poll voters are anonymous.
        # Non-anonymous polls can't be sent or forwarded to channels.
        attr_accessor is_anonymous: bool

        # Type of the poll.
        attr_accessor type: TD::Types::PollType

        # Amount of time the poll will be active after creation, in seconds; for bots only.
        attr_accessor open_period: Integer

        # Point in time (Unix timestamp) when the poll will automatically be closed; for bots
        # only.
        attr_accessor close_date: Integer

        # True, if the poll needs to be sent already closed; for bots only.
        attr_accessor is_closed: bool
      end

      # A text message.
      # 
      # @attr text [TD::Types::FormattedText] Formatted text to be sent; 1-GetOption("message_text_length_max") characters.
      #   Only Bold, Italic, Underline, Strikethrough, Spoiler, Code, Pre, PreCode, TextUrl and MentionName entities are
      #   allowed to be specified manually.
      # @attr disable_web_page_preview [Boolean] True, if rich web page previews for URLs in the message text must be
      #   disabled.
      # @attr clear_draft [Boolean] True, if a chat message draft must be deleted.
      class Text < TD::Types::InputMessageContent
        # Formatted text to be sent; 1-GetOption("message_text_length_max") characters.
        # Only Bold, Italic, Underline, Strikethrough, Spoiler, Code, Pre, PreCode, TextUrl and MentionName entities are
        # allowed to be specified manually.
        attr_accessor text: TD::Types::FormattedText

        # True, if rich web page previews for URLs in the message text must be
        # disabled.
        attr_accessor disable_web_page_preview: bool

        # True, if a chat message draft must be deleted.
        attr_accessor clear_draft: bool
      end

      # An audio message.
      # 
      # @attr audio [TD::Types::InputFile] Audio file to be sent.
      # @attr album_cover_thumbnail [TD::Types::InputThumbnail] Thumbnail of the cover for the album; pass null to skip
      #   thumbnail uploading.
      # @attr duration [Integer] Duration of the audio, in seconds; may be replaced by the server.
      # @attr title [TD::Types::String] Title of the audio; 0-64 characters; may be replaced by the server.
      # @attr performer [TD::Types::String] Performer of the audio; 0-64 characters, may be replaced by the server.
      # @attr caption [TD::Types::FormattedText] Audio caption; pass null to use an empty caption;
      #   0-GetOption("message_caption_length_max") characters.
      class Audio < TD::Types::InputMessageContent
        # Audio file to be sent.
        attr_accessor audio: TD::Types::InputFile

        # Thumbnail of the cover for the album; pass null to skip
        # thumbnail uploading.
        attr_accessor album_cover_thumbnail: TD::Types::InputThumbnail

        # Duration of the audio, in seconds; may be replaced by the server.
        attr_accessor duration: Integer

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Title of the audio; 0-64 characters; may be replaced by the server.
        attr_accessor title: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Performer of the audio; 0-64 characters, may be replaced by the server.
        attr_accessor performer: TD::Types::String

        # Audio caption; pass null to use an empty caption;
        # 0-GetOption("message_caption_length_max") characters.
        attr_accessor caption: TD::Types::FormattedText
      end

      # A photo message.
      # 
      # @attr photo [TD::Types::InputFile] Photo to send.
      # @attr thumbnail [TD::Types::InputThumbnail] Photo thumbnail to be sent; pass null to skip thumbnail uploading.
      #   The thumbnail is sent to the other party only in secret chats.
      # @attr added_sticker_file_ids [Array<Integer>] File identifiers of the stickers added to the photo, if applicable.
      # @attr width [Integer] Photo width.
      # @attr height [Integer] Photo height.
      # @attr caption [TD::Types::FormattedText] Photo caption; pass null to use an empty caption;
      #   0-GetOption("message_caption_length_max") characters.
      # @attr ttl [Integer] Photo TTL (Time To Live), in seconds (0-60).
      #   A non-zero TTL can be specified only in private chats.
      class Photo < TD::Types::InputMessageContent
        # Photo to send.
        attr_accessor photo: TD::Types::InputFile

        # Photo thumbnail to be sent; pass null to skip thumbnail uploading.
        # The thumbnail is sent to the other party only in secret chats.
        attr_accessor thumbnail: TD::Types::InputThumbnail

        # File identifiers of the stickers added to the photo, if applicable.
        attr_accessor added_sticker_file_ids: ::Array[Integer]

        # Photo width.
        attr_accessor width: Integer

        # Photo height.
        attr_accessor height: Integer

        # Photo caption; pass null to use an empty caption;
        # 0-GetOption("message_caption_length_max") characters.
        attr_accessor caption: TD::Types::FormattedText

        # Photo TTL (Time To Live), in seconds (0-60).
        # A non-zero TTL can be specified only in private chats.
        attr_accessor ttl: Integer
      end

      # A message with information about a venue.
      # 
      # @attr venue [TD::Types::Venue] Venue to send.
      class Venue < TD::Types::InputMessageContent
        # Venue to send.
        attr_accessor venue: TD::Types::Venue
      end

      # A video message.
      # 
      # @attr video [TD::Types::InputFile] Video to be sent.
      # @attr thumbnail [TD::Types::InputThumbnail] Video thumbnail; pass null to skip thumbnail uploading.
      # @attr added_sticker_file_ids [Array<Integer>] File identifiers of the stickers added to the video, if applicable.
      # @attr duration [Integer] Duration of the video, in seconds.
      # @attr width [Integer] Video width.
      # @attr height [Integer] Video height.
      # @attr supports_streaming [Boolean] True, if the video is supposed to be streamed.
      # @attr caption [TD::Types::FormattedText] Video caption; pass null to use an empty caption;
      #   0-GetOption("message_caption_length_max") characters.
      # @attr ttl [Integer] Video TTL (Time To Live), in seconds (0-60).
      #   A non-zero TTL can be specified only in private chats.
      class Video < TD::Types::InputMessageContent
        # Video to be sent.
        attr_accessor video: TD::Types::InputFile

        # Video thumbnail; pass null to skip thumbnail uploading.
        attr_accessor thumbnail: TD::Types::InputThumbnail

        # File identifiers of the stickers added to the video, if applicable.
        attr_accessor added_sticker_file_ids: ::Array[Integer]

        # Duration of the video, in seconds.
        attr_accessor duration: Integer

        # Video width.
        attr_accessor width: Integer

        # Video height.
        attr_accessor height: Integer

        # True, if the video is supposed to be streamed.
        attr_accessor supports_streaming: bool

        # Video caption; pass null to use an empty caption;
        # 0-GetOption("message_caption_length_max") characters.
        attr_accessor caption: TD::Types::FormattedText

        # Video TTL (Time To Live), in seconds (0-60).
        # A non-zero TTL can be specified only in private chats.
        attr_accessor ttl: Integer
      end

      # A message containing a user contact.
      # 
      # @attr contact [TD::Types::Contact] Contact to send.
      class Contact < TD::Types::InputMessageContent
        # Contact to send.
        attr_accessor contact: TD::Types::Contact
      end

      # A message with an invoice; can be used only by bots.
      # 
      # @attr invoice [TD::Types::Invoice] Invoice.
      # @attr title [TD::Types::String] Product title; 1-32 characters.
      # @attr description [TD::Types::String] Product description; 0-255 characters.
      # @attr photo_url [TD::Types::String, nil] Product photo URL; optional.
      # @attr photo_size [Integer] Product photo size.
      # @attr photo_width [Integer] Product photo width.
      # @attr photo_height [Integer] Product photo height.
      # @attr payload [String] The invoice payload.
      # @attr provider_token [TD::Types::String] Payment provider token.
      # @attr provider_data [TD::Types::String] JSON-encoded data about the invoice, which will be shared with the payment
      #   provider.
      # @attr start_parameter [TD::Types::String] Unique invoice bot deep link parameter for the generation of this
      #   invoice.
      #   If empty, it would be possible to pay directly from forwards of the invoice message.
      class Invoice < TD::Types::InputMessageContent
        # Invoice.
        attr_accessor invoice: TD::Types::Invoice

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Product title; 1-32 characters.
        attr_accessor title: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Product description; 0-255 characters.
        attr_accessor description: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Product photo URL; optional.
        attr_accessor photo_url: TD::Types::String?

        # Product photo size.
        attr_accessor photo_size: Integer

        # Product photo width.
        attr_accessor photo_width: Integer

        # Product photo height.
        attr_accessor photo_height: Integer

        # The invoice payload.
        attr_accessor payload: String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Payment provider token.
        attr_accessor provider_token: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # JSON-encoded data about the invoice, which will be shared with the payment
        # provider.
        attr_accessor provider_data: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Unique invoice bot deep link parameter for the generation of this
        # invoice.
        # If empty, it would be possible to pay directly from forwards of the invoice message.
        attr_accessor start_parameter: TD::Types::String
      end

      # A sticker message.
      # 
      # @attr sticker [TD::Types::InputFile] Sticker to be sent.
      # @attr thumbnail [TD::Types::InputThumbnail] Sticker thumbnail; pass null to skip thumbnail uploading.
      # @attr width [Integer] Sticker width.
      # @attr height [Integer] Sticker height.
      # @attr emoji [TD::Types::String] Emoji used to choose the sticker.
      class Sticker < TD::Types::InputMessageContent
        # Sticker to be sent.
        attr_accessor sticker: TD::Types::InputFile

        # Sticker thumbnail; pass null to skip thumbnail uploading.
        attr_accessor thumbnail: TD::Types::InputThumbnail

        # Sticker width.
        attr_accessor width: Integer

        # Sticker height.
        attr_accessor height: Integer

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Emoji used to choose the sticker.
        attr_accessor emoji: TD::Types::String
      end

      # A document message (general file).
      # 
      # @attr document [TD::Types::InputFile] Document to be sent.
      # @attr thumbnail [TD::Types::InputThumbnail] Document thumbnail; pass null to skip thumbnail uploading.
      # @attr disable_content_type_detection [Boolean] If true, automatic file type detection will be disabled and the
      #   document will be always sent as file.
      #   Always true for files sent to secret chats.
      # @attr caption [TD::Types::FormattedText] Document caption; pass null to use an empty caption;
      #   0-GetOption("message_caption_length_max") characters.
      class Document < TD::Types::InputMessageContent
        # Document to be sent.
        attr_accessor document: TD::Types::InputFile

        # Document thumbnail; pass null to skip thumbnail uploading.
        attr_accessor thumbnail: TD::Types::InputThumbnail

        # If true, automatic file type detection will be disabled and the
        # document will be always sent as file.
        # Always true for files sent to secret chats.
        attr_accessor disable_content_type_detection: bool

        # Document caption; pass null to use an empty caption;
        # 0-GetOption("message_caption_length_max") characters.
        attr_accessor caption: TD::Types::FormattedText
      end

      # A message with a location.
      # 
      # @attr location [TD::Types::Location] Location to be sent.
      # @attr live_period [Integer] Period for which the location can be updated, in seconds; must be between 60 and 86400
      #   for a live location and 0 otherwise.
      # @attr heading [Integer] For live locations, a direction in which the location moves, in degrees; 1-360.
      #   Pass 0 if unknown.
      # @attr proximity_alert_radius [Integer] For live locations, a maximum distance to another chat member for proximity
      #   alerts, in meters (0-100000).
      #   Pass 0 if the notification is disabled.
      #   Can't be enabled in channels and Saved Messages.
      class Location < TD::Types::InputMessageContent
        # Location to be sent.
        attr_accessor location: TD::Types::Location

        # Period for which the location can be updated, in seconds; must be between 60 and 86400
        # for a live location and 0 otherwise.
        attr_accessor live_period: Integer

        # For live locations, a direction in which the location moves, in degrees; 1-360.
        # Pass 0 if unknown.
        attr_accessor heading: Integer

        # For live locations, a maximum distance to another chat member for proximity
        # alerts, in meters (0-100000).
        # Pass 0 if the notification is disabled.
        # Can't be enabled in channels and Saved Messages.
        attr_accessor proximity_alert_radius: Integer
      end

      # An animation message (GIF-style)..
      # 
      # @attr animation [TD::Types::InputFile] Animation file to be sent.
      # @attr thumbnail [TD::Types::InputThumbnail] Animation thumbnail; pass null to skip thumbnail uploading.
      # @attr added_sticker_file_ids [Array<Integer>] File identifiers of the stickers added to the animation, if
      #   applicable.
      # @attr duration [Integer] Duration of the animation, in seconds.
      # @attr width [Integer] Width of the animation; may be replaced by the server.
      # @attr height [Integer] Height of the animation; may be replaced by the server.
      # @attr caption [TD::Types::FormattedText] Animation caption; pass null to use an empty caption;
      #   0-GetOption("message_caption_length_max") characters.
      class Animation < TD::Types::InputMessageContent
        # Animation file to be sent.
        attr_accessor animation: TD::Types::InputFile

        # Animation thumbnail; pass null to skip thumbnail uploading.
        attr_accessor thumbnail: TD::Types::InputThumbnail

        # File identifiers of the stickers added to the animation, if
        # applicable.
        attr_accessor added_sticker_file_ids: ::Array[Integer]

        # Duration of the animation, in seconds.
        attr_accessor duration: Integer

        # Width of the animation; may be replaced by the server.
        attr_accessor width: Integer

        # Height of the animation; may be replaced by the server.
        attr_accessor height: Integer

        # Animation caption; pass null to use an empty caption;
        # 0-GetOption("message_caption_length_max") characters.
        attr_accessor caption: TD::Types::FormattedText
      end

      # A forwarded message.
      # 
      # @attr from_chat_id [Integer] Identifier for the chat this forwarded message came from.
      # @attr message_id [Integer] Identifier of the message to forward.
      # @attr in_game_share [Boolean] True, if a game message is being shared from a launched game; applies only to game
      #   messages.
      # @attr copy_options [TD::Types::MessageCopyOptions] Options to be used to copy content of the message without
      #   reference to the original sender; pass null to forward the message as usual.
      class Forwarded < TD::Types::InputMessageContent
        # Identifier for the chat this forwarded message came from.
        attr_accessor from_chat_id: Integer

        # Identifier of the message to forward.
        attr_accessor message_id: Integer

        # True, if a game message is being shared from a launched game; applies only to game
        # messages.
        attr_accessor in_game_share: bool

        # Options to be used to copy content of the message without
        # reference to the original sender; pass null to forward the message as usual.
        attr_accessor copy_options: TD::Types::MessageCopyOptions
      end

      # A video note message.
      # 
      # @attr video_note [TD::Types::InputFile] Video note to be sent.
      # @attr thumbnail [TD::Types::InputThumbnail] Video thumbnail; pass null to skip thumbnail uploading.
      # @attr duration [Integer] Duration of the video, in seconds.
      # @attr length [Integer] Video width and height; must be positive and not greater than 640.
      class VideoNote < TD::Types::InputMessageContent
        # Video note to be sent.
        attr_accessor video_note: TD::Types::InputFile

        # Video thumbnail; pass null to skip thumbnail uploading.
        attr_accessor thumbnail: TD::Types::InputThumbnail

        # Duration of the video, in seconds.
        attr_accessor duration: Integer

        # Video width and height; must be positive and not greater than 640.
        attr_accessor length: Integer
      end

      # A voice note message.
      # 
      # @attr voice_note [TD::Types::InputFile] Voice note to be sent.
      # @attr duration [Integer] Duration of the voice note, in seconds.
      # @attr waveform [String] Waveform representation of the voice note, in 5-bit format.
      # @attr caption [TD::Types::FormattedText] Voice note caption; pass null to use an empty caption;
      #   0-GetOption("message_caption_length_max") characters.
      class VoiceNote < TD::Types::InputMessageContent
        # Voice note to be sent.
        attr_accessor voice_note: TD::Types::InputFile

        # Duration of the voice note, in seconds.
        attr_accessor duration: Integer

        # Waveform representation of the voice note, in 5-bit format.
        attr_accessor waveform: String

        # Voice note caption; pass null to use an empty caption;
        # 0-GetOption("message_caption_length_max") characters.
        attr_accessor caption: TD::Types::FormattedText
      end
    end

    # Contains a list of language pack strings.
    # 
    # @attr strings [Array<TD::Types::LanguagePackString>] A list of language pack strings.
    class LanguagePackStrings < TD::Types::Base
      # A list of language pack strings.
      attr_accessor strings: ::Array[TD::Types::LanguagePackString]
    end

    # Contains information about the sending state of the message.
    class MessageSendingState < TD::Types::Base
      # The message failed to be sent.
      # 
      # @attr error_code [Integer] An error code; 0 if unknown.
      # @attr error_message [TD::Types::String] Error message.
      # @attr can_retry [Boolean] True, if the message can be re-sent.
      # @attr need_another_sender [Boolean] True, if the message can be re-sent only on behalf of a different sender.
      # @attr retry_after [Float] Time left before the message can be re-sent, in seconds.
      #   No update is sent when this field changes.
      class Failed < TD::Types::MessageSendingState
        # An error code; 0 if unknown.
        attr_accessor error_code: Integer

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Error message.
        attr_accessor error_message: TD::Types::String

        # True, if the message can be re-sent.
        attr_accessor can_retry: bool

        # True, if the message can be re-sent only on behalf of a different sender.
        attr_accessor need_another_sender: bool

        # Time left before the message can be re-sent, in seconds.
        # No update is sent when this field changes.
        attr_accessor retry_after: Float
      end

      # The message is being sent now, but has not yet been delivered to the server.
      class Pending < TD::Types::MessageSendingState
      end
    end

    # Represents a cell of a table.
    # 
    # @attr text [TD::Types::RichText, nil] Cell text; may be null.
    #   If the text is null, then the cell must be invisible.
    # @attr is_header [Boolean] True, if it is a header cell.
    # @attr colspan [Integer] The number of columns the cell spans.
    # @attr rowspan [Integer] The number of rows the cell spans.
    # @attr align [TD::Types::PageBlockHorizontalAlignment] Horizontal cell content alignment.
    # @attr valign [TD::Types::PageBlockVerticalAlignment] Vertical cell content alignment.
    class PageBlockTableCell < TD::Types::Base
      # Cell text; may be null.
      # If the text is null, then the cell must be invisible.
      attr_accessor text: TD::Types::RichText?

      # True, if it is a header cell.
      attr_accessor is_header: bool

      # The number of columns the cell spans.
      attr_accessor colspan: Integer

      # The number of rows the cell spans.
      attr_accessor rowspan: Integer

      # Horizontal cell content alignment.
      attr_accessor align: TD::Types::PageBlockHorizontalAlignment

      # Vertical cell content alignment.
      attr_accessor valign: TD::Types::PageBlockVerticalAlignment
    end

    # Contains the type of a Telegram Passport element.
    class PassportElementType < TD::Types::Base
      # A Telegram Passport element containing the user's address.
      class Address < TD::Types::PassportElementType
      end

      # A Telegram Passport element containing the user's passport.
      class Passport < TD::Types::PassportElementType
      end

      # A Telegram Passport element containing the user's phone number.
      class PhoneNumber < TD::Types::PassportElementType
      end

      # A Telegram Passport element containing the user's utility bill.
      class UtilityBill < TD::Types::PassportElementType
      end

      # A Telegram Passport element containing the user's email address.
      class EmailAddress < TD::Types::PassportElementType
      end

      # A Telegram Passport element containing the user's identity card.
      class IdentityCard < TD::Types::PassportElementType
      end

      # A Telegram Passport element containing the user's bank statement.
      class BankStatement < TD::Types::PassportElementType
      end

      # A Telegram Passport element containing the user's driver license.
      class DriverLicense < TD::Types::PassportElementType
      end

      # A Telegram Passport element containing the user's personal details.
      class PersonalDetails < TD::Types::PassportElementType
      end

      # A Telegram Passport element containing the user's rental agreement.
      class RentalAgreement < TD::Types::PassportElementType
      end

      # A Telegram Passport element containing the user's internal passport.
      class InternalPassport < TD::Types::PassportElementType
      end

      # A Telegram Passport element containing the registration page of the user's passport.
      class PassportRegistration < TD::Types::PassportElementType
      end

      # A Telegram Passport element containing the user's temporary registration.
      class TemporaryRegistration < TD::Types::PassportElementType
      end
    end

    # Represents result of 2-step verification password reset.
    class ResetPasswordResult < TD::Types::Base
      # The password was reset.
      class Ok < TD::Types::ResetPasswordResult
      end

      # The password reset request is pending.
      # 
      # @attr pending_reset_date [Integer] Point in time (Unix timestamp) after which the password can be reset immediately
      #   using resetPassword.
      class Pending < TD::Types::ResetPasswordResult
        # Point in time (Unix timestamp) after which the password can be reset immediately
        # using resetPassword.
        attr_accessor pending_reset_date: Integer
      end

      # The password reset request was declined.
      # 
      # @attr retry_date [Integer] Point in time (Unix timestamp) when the password reset can be retried.
      class Declined < TD::Types::ResetPasswordResult
        # Point in time (Unix timestamp) when the password reset can be retried.
        attr_accessor retry_date: Integer
      end
    end

    # Describes an instant view page for a web page.
    # 
    # @attr page_blocks [Array<TD::Types::PageBlock>] Content of the web page.
    # @attr view_count [Integer] Number of the instant view views; 0 if unknown.
    # @attr version [Integer] Version of the instant view; currently, can be 1 or 2.
    # @attr is_rtl [Boolean] True, if the instant view must be shown from right to left.
    # @attr is_full [Boolean] True, if the instant view contains the full page.
    #   A network request might be needed to get the full web page instant view.
    # @attr feedback_link [TD::Types::InternalLinkType] An internal link to be opened to leave feedback about the instant
    #   view.
    class WebPageInstantView < TD::Types::Base
      # Content of the web page.
      attr_accessor page_blocks: ::Array[TD::Types::PageBlock]

      # Number of the instant view views; 0 if unknown.
      attr_accessor view_count: Integer

      # Version of the instant view; currently, can be 1 or 2.
      attr_accessor version: Integer

      # True, if the instant view must be shown from right to left.
      attr_accessor is_rtl: bool

      # True, if the instant view contains the full page.
      # A network request might be needed to get the full web page instant view.
      attr_accessor is_full: bool

      # An internal link to be opened to leave feedback about the instant
      # view.
      attr_accessor feedback_link: TD::Types::InternalLinkType
    end

    # Contains auto-download settings.
    # 
    # @attr is_auto_download_enabled [Boolean] True, if the auto-download is enabled.
    # @attr max_photo_file_size [Integer] The maximum size of a photo file to be auto-downloaded, in bytes.
    # @attr max_video_file_size [Integer] The maximum size of a video file to be auto-downloaded, in bytes.
    # @attr max_other_file_size [Integer] The maximum size of other file types to be auto-downloaded, in bytes.
    # @attr video_upload_bitrate [Integer] The maximum suggested bitrate for uploaded videos, in kbit/s.
    # @attr preload_large_videos [Boolean] True, if the beginning of video files needs to be preloaded for instant
    #   playback.
    # @attr preload_next_audio [Boolean] True, if the next audio track needs to be preloaded while the user is listening
    #   to an audio file.
    # @attr use_less_data_for_calls [Boolean] True, if "use less data for calls" option needs to be enabled.
    class AutoDownloadSettings < TD::Types::Base
      # True, if the auto-download is enabled.
      attr_accessor is_auto_download_enabled: bool

      # The maximum size of a photo file to be auto-downloaded, in bytes.
      attr_accessor max_photo_file_size: Integer

      # The maximum size of a video file to be auto-downloaded, in bytes.
      attr_accessor max_video_file_size: Integer

      # The maximum size of other file types to be auto-downloaded, in bytes.
      attr_accessor max_other_file_size: Integer

      # The maximum suggested bitrate for uploaded videos, in kbit/s.
      attr_accessor video_upload_bitrate: Integer

      # True, if the beginning of video files needs to be preloaded for instant
      # playback.
      attr_accessor preload_large_videos: bool

      # True, if the next audio track needs to be preloaded while the user is listening
      # to an audio file.
      attr_accessor preload_next_audio: bool

      # True, if "use less data for calls" option needs to be enabled.
      attr_accessor use_less_data_for_calls: bool
    end

    # Represents a payload of a callback query.
    class CallbackQueryPayload < TD::Types::Base
      # The payload for a general callback button.
      # 
      # @attr data [String] Data that was attached to the callback button.
      class Data < TD::Types::CallbackQueryPayload
        # Data that was attached to the callback button.
        attr_accessor data: String
      end

      # The payload for a game callback button.
      # 
      # @attr game_short_name [TD::Types::String] A short name of the game that was attached to the callback button.
      class Game < TD::Types::CallbackQueryPayload
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # A short name of the game that was attached to the callback button.
        attr_accessor game_short_name: TD::Types::String
      end

      # The payload for a callback button requiring password.
      # 
      # @attr password [TD::Types::String] The password for the current user.
      # @attr data [String] Data that was attached to the callback button.
      class DataWithPassword < TD::Types::CallbackQueryPayload
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # The password for the current user.
        attr_accessor password: TD::Types::String

        # Data that was attached to the callback button.
        attr_accessor data: String
      end
    end

    # Represents a set of filters used to obtain a chat event log.
    # 
    # @attr message_edits [Boolean] True, if message edits need to be returned.
    # @attr message_deletions [Boolean] True, if message deletions need to be returned.
    # @attr message_pins [Boolean] True, if pin/unpin events need to be returned.
    # @attr member_joins [Boolean] True, if members joining events need to be returned.
    # @attr member_leaves [Boolean] True, if members leaving events need to be returned.
    # @attr member_invites [Boolean] True, if invited member events need to be returned.
    # @attr member_promotions [Boolean] True, if member promotion/demotion events need to be returned.
    # @attr member_restrictions [Boolean] True, if member restricted/unrestricted/banned/unbanned events need to be
    #   returned.
    # @attr info_changes [Boolean] True, if changes in chat information need to be returned.
    # @attr setting_changes [Boolean] True, if changes in chat settings need to be returned.
    # @attr invite_link_changes [Boolean] True, if changes to invite links need to be returned.
    # @attr video_chat_changes [Boolean] True, if video chat actions need to be returned.
    class ChatEventLogFilters < TD::Types::Base
      # True, if message edits need to be returned.
      attr_accessor message_edits: bool

      # True, if message deletions need to be returned.
      attr_accessor message_deletions: bool

      # True, if pin/unpin events need to be returned.
      attr_accessor message_pins: bool

      # True, if members joining events need to be returned.
      attr_accessor member_joins: bool

      # True, if members leaving events need to be returned.
      attr_accessor member_leaves: bool

      # True, if invited member events need to be returned.
      attr_accessor member_invites: bool

      # True, if member promotion/demotion events need to be returned.
      attr_accessor member_promotions: bool

      # True, if member restricted/unrestricted/banned/unbanned events need to be
      # returned.
      attr_accessor member_restrictions: bool

      # True, if changes in chat information need to be returned.
      attr_accessor info_changes: bool

      # True, if changes in chat settings need to be returned.
      attr_accessor setting_changes: bool

      # True, if changes to invite links need to be returned.
      attr_accessor invite_link_changes: bool

      # True, if video chat actions need to be returned.
      attr_accessor video_chat_changes: bool
    end

    # Describes a chat administrator with a number of active and revoked chat invite links.
    # 
    # @attr user_id [Integer] Administrator's user identifier.
    # @attr invite_link_count [Integer] Number of active invite links.
    # @attr revoked_invite_link_count [Integer] Number of revoked invite links.
    class ChatInviteLinkCount < TD::Types::Base
      # Administrator's user identifier.
      attr_accessor user_id: Integer

      # Number of active invite links.
      attr_accessor invite_link_count: Integer

      # Number of revoked invite links.
      attr_accessor revoked_invite_link_count: Integer
    end

    # Represents a group call participant.
    # 
    # @attr participant_id [TD::Types::MessageSender] Identifier of the group call participant.
    # @attr audio_source_id [Integer] User's audio channel synchronization source identifier.
    # @attr screen_sharing_audio_source_id [Integer] User's screen sharing audio channel synchronization source
    #   identifier.
    # @attr video_info [TD::Types::GroupCallParticipantVideoInfo, nil] Information about user's video channel; may be
    #   null if there is no active video.
    # @attr screen_sharing_video_info [TD::Types::GroupCallParticipantVideoInfo, nil] Information about user's screen
    #   sharing video channel; may be null if there is no active screen sharing video.
    # @attr bio [TD::Types::String] The participant user's bio or the participant chat's description.
    # @attr is_current_user [Boolean] True, if the participant is the current user.
    # @attr is_speaking [Boolean] True, if the participant is speaking as set by setGroupCallParticipantIsSpeaking.
    # @attr is_hand_raised [Boolean] True, if the participant hand is raised.
    # @attr can_be_muted_for_all_users [Boolean] True, if the current user can mute the participant for all other group
    #   call participants.
    # @attr can_be_unmuted_for_all_users [Boolean] True, if the current user can allow the participant to unmute
    #   themselves or unmute the participant (if the participant is the current user).
    # @attr can_be_muted_for_current_user [Boolean] True, if the current user can mute the participant only for self.
    # @attr can_be_unmuted_for_current_user [Boolean] True, if the current user can unmute the participant for self.
    # @attr is_muted_for_all_users [Boolean] True, if the participant is muted for all users.
    # @attr is_muted_for_current_user [Boolean] True, if the participant is muted for the current user.
    # @attr can_unmute_self [Boolean] True, if the participant is muted for all users, but can unmute themselves.
    # @attr volume_level [Integer] Participant's volume level; 1-20000 in hundreds of percents.
    # @attr order [TD::Types::String] User's order in the group call participant list.
    #   Orders must be compared lexicographically.
    #   The bigger is order, the higher is user in the list.
    #   If order is empty, the user must be removed from the participant list.
    class GroupCallParticipant < TD::Types::Base
      # Identifier of the group call participant.
      attr_accessor participant_id: TD::Types::MessageSender

      # User's audio channel synchronization source identifier.
      attr_accessor audio_source_id: Integer

      # User's screen sharing audio channel synchronization source
      # identifier.
      attr_accessor screen_sharing_audio_source_id: Integer

      # Information about user's video channel; may be
      # null if there is no active video.
      attr_accessor video_info: TD::Types::GroupCallParticipantVideoInfo?

      # Information about user's screen
      # sharing video channel; may be null if there is no active screen sharing video.
      attr_accessor screen_sharing_video_info: TD::Types::GroupCallParticipantVideoInfo?

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # The participant user's bio or the participant chat's description.
      attr_accessor bio: TD::Types::String

      # True, if the participant is the current user.
      attr_accessor is_current_user: bool

      # True, if the participant is speaking as set by setGroupCallParticipantIsSpeaking.
      attr_accessor is_speaking: bool

      # True, if the participant hand is raised.
      attr_accessor is_hand_raised: bool

      # True, if the current user can mute the participant for all other group
      # call participants.
      attr_accessor can_be_muted_for_all_users: bool

      # True, if the current user can allow the participant to unmute
      # themselves or unmute the participant (if the participant is the current user).
      attr_accessor can_be_unmuted_for_all_users: bool

      # True, if the current user can mute the participant only for self.
      attr_accessor can_be_muted_for_current_user: bool

      # True, if the current user can unmute the participant for self.
      attr_accessor can_be_unmuted_for_current_user: bool

      # True, if the participant is muted for all users.
      attr_accessor is_muted_for_all_users: bool

      # True, if the participant is muted for the current user.
      attr_accessor is_muted_for_current_user: bool

      # True, if the participant is muted for all users, but can unmute themselves.
      attr_accessor can_unmute_self: bool

      # Participant's volume level; 1-20000 in hundreds of percents.
      attr_accessor volume_level: Integer

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # User's order in the group call participant list.
      # Orders must be compared lexicographically.
      # The bigger is order, the higher is user in the list.
      # If order is empty, the user must be removed from the participant list.
      attr_accessor order: TD::Types::String
    end

    # Represents a single button in an inline keyboard.
    # 
    # @attr text [TD::Types::String] Text of the button.
    # @attr type [TD::Types::InlineKeyboardButtonType] Type of the button.
    class InlineKeyboardButton < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Text of the button.
      attr_accessor text: TD::Types::String

      # Type of the button.
      attr_accessor type: TD::Types::InlineKeyboardButtonType
    end

    # Contains information about a Telegram Passport element to be saved.
    class InputPassportElement < TD::Types::Base
      # A Telegram Passport element to be saved containing the user's address.
      # 
      # @attr address [TD::Types::Address] The address to be saved.
      class Address < TD::Types::InputPassportElement
        # The address to be saved.
        attr_accessor address: TD::Types::Address
      end

      # A Telegram Passport element to be saved containing the user's passport.
      # 
      # @attr passport [TD::Types::InputIdentityDocument] The passport to be saved.
      class Passport < TD::Types::InputPassportElement
        # The passport to be saved.
        attr_accessor passport: TD::Types::InputIdentityDocument
      end

      # A Telegram Passport element to be saved containing the user's phone number.
      # 
      # @attr phone_number [TD::Types::String] The phone number to be saved.
      class PhoneNumber < TD::Types::InputPassportElement
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # The phone number to be saved.
        attr_accessor phone_number: TD::Types::String
      end

      # A Telegram Passport element to be saved containing the user's utility bill.
      # 
      # @attr utility_bill [TD::Types::InputPersonalDocument] The utility bill to be saved.
      class UtilityBill < TD::Types::InputPassportElement
        # The utility bill to be saved.
        attr_accessor utility_bill: TD::Types::InputPersonalDocument
      end

      # A Telegram Passport element to be saved containing the user's email address.
      # 
      # @attr email_address [TD::Types::String] The email address to be saved.
      class EmailAddress < TD::Types::InputPassportElement
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # The email address to be saved.
        attr_accessor email_address: TD::Types::String
      end

      # A Telegram Passport element to be saved containing the user's identity card.
      # 
      # @attr identity_card [TD::Types::InputIdentityDocument] The identity card to be saved.
      class IdentityCard < TD::Types::InputPassportElement
        # The identity card to be saved.
        attr_accessor identity_card: TD::Types::InputIdentityDocument
      end

      # A Telegram Passport element to be saved containing the user's bank statement.
      # 
      # @attr bank_statement [TD::Types::InputPersonalDocument] The bank statement to be saved.
      class BankStatement < TD::Types::InputPassportElement
        # The bank statement to be saved.
        attr_accessor bank_statement: TD::Types::InputPersonalDocument
      end

      # A Telegram Passport element to be saved containing the user's driver license.
      # 
      # @attr driver_license [TD::Types::InputIdentityDocument] The driver license to be saved.
      class DriverLicense < TD::Types::InputPassportElement
        # The driver license to be saved.
        attr_accessor driver_license: TD::Types::InputIdentityDocument
      end

      # A Telegram Passport element to be saved containing the user's personal details.
      # 
      # @attr personal_details [TD::Types::PersonalDetails] Personal details of the user.
      class PersonalDetails < TD::Types::InputPassportElement
        # Personal details of the user.
        attr_accessor personal_details: TD::Types::PersonalDetails
      end

      # A Telegram Passport element to be saved containing the user's rental agreement.
      # 
      # @attr rental_agreement [TD::Types::InputPersonalDocument] The rental agreement to be saved.
      class RentalAgreement < TD::Types::InputPassportElement
        # The rental agreement to be saved.
        attr_accessor rental_agreement: TD::Types::InputPersonalDocument
      end

      # A Telegram Passport element to be saved containing the user's internal passport.
      # 
      # @attr internal_passport [TD::Types::InputIdentityDocument] The internal passport to be saved.
      class InternalPassport < TD::Types::InputPassportElement
        # The internal passport to be saved.
        attr_accessor internal_passport: TD::Types::InputIdentityDocument
      end

      # A Telegram Passport element to be saved containing the user's passport registration.
      # 
      # @attr passport_registration [TD::Types::InputPersonalDocument] The passport registration page to be saved.
      class PassportRegistration < TD::Types::InputPassportElement
        # The passport registration page to be saved.
        attr_accessor passport_registration: TD::Types::InputPersonalDocument
      end

      # A Telegram Passport element to be saved containing the user's temporary registration.
      # 
      # @attr temporary_registration [TD::Types::InputPersonalDocument] The temporary registration document to be saved.
      class TemporaryRegistration < TD::Types::InputPassportElement
        # The temporary registration document to be saved.
        attr_accessor temporary_registration: TD::Types::InputPersonalDocument
      end
    end

    # Contains information about the origin of a forwarded message.
    class MessageForwardOrigin < TD::Types::Base
      # The message was originally sent on behalf of a chat.
      # 
      # @attr sender_chat_id [Integer] Identifier of the chat that originally sent the message.
      # @attr author_signature [TD::Types::String] For messages originally sent by an anonymous chat administrator,
      #   original message author signature.
      class Chat < TD::Types::MessageForwardOrigin
        # Identifier of the chat that originally sent the message.
        attr_accessor sender_chat_id: Integer

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # For messages originally sent by an anonymous chat administrator,
        # original message author signature.
        attr_accessor author_signature: TD::Types::String
      end

      # The message was originally sent by a known user.
      # 
      # @attr sender_user_id [Integer] Identifier of the user that originally sent the message.
      class User < TD::Types::MessageForwardOrigin
        # Identifier of the user that originally sent the message.
        attr_accessor sender_user_id: Integer
      end

      # The message was originally a post in a channel.
      # 
      # @attr chat_id [Integer] Identifier of the chat from which the message was originally forwarded.
      # @attr message_id [Integer] Message identifier of the original message.
      # @attr author_signature [TD::Types::String] Original post author signature.
      class Channel < TD::Types::MessageForwardOrigin
        # Identifier of the chat from which the message was originally forwarded.
        attr_accessor chat_id: Integer

        # Message identifier of the original message.
        attr_accessor message_id: Integer

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Original post author signature.
        attr_accessor author_signature: TD::Types::String
      end

      # The message was originally sent by a user, which is hidden by their privacy settings.
      # 
      # @attr sender_name [TD::Types::String] Name of the sender.
      class HiddenUser < TD::Types::MessageForwardOrigin
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Name of the sender.
        attr_accessor sender_name: TD::Types::String
      end

      # The message was imported from an exported message history.
      # 
      # @attr sender_name [TD::Types::String] Name of the sender.
      class MessageImport < TD::Types::MessageForwardOrigin
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Name of the sender.
        attr_accessor sender_name: TD::Types::String
      end
    end

    # Contains the description of an error in a Telegram Passport element.
    # 
    # @attr type [TD::Types::PassportElementType] Type of the Telegram Passport element which has the error.
    # @attr message [TD::Types::String] Error message.
    # @attr source [TD::Types::PassportElementErrorSource] Error source.
    class PassportElementError < TD::Types::Base
      # Type of the Telegram Passport element which has the error.
      attr_accessor type: TD::Types::PassportElementType

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Error message.
      attr_accessor message: TD::Types::String

      # Error source.
      attr_accessor source: TD::Types::PassportElementErrorSource
    end

    # Contains information about the current recovery email address.
    # 
    # @attr recovery_email_address [TD::Types::String] Recovery email address.
    class RecoveryEmailAddress < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Recovery email address.
      attr_accessor recovery_email_address: TD::Types::String
    end

    # Represents a filter for message search results.
    class SearchMessagesFilter < TD::Types::Base
      # Returns only messages containing URLs.
      class Url < TD::Types::SearchMessagesFilter
      end

      # Returns only audio messages.
      class Audio < TD::Types::SearchMessagesFilter
      end

      # Returns all found messages, no filter is applied.
      class Empty < TD::Types::SearchMessagesFilter
      end

      # Returns only photo messages.
      class Photo < TD::Types::SearchMessagesFilter
      end

      # Returns only video messages.
      class Video < TD::Types::SearchMessagesFilter
      end

      # Returns only pinned messages.
      class Pinned < TD::Types::SearchMessagesFilter
      end

      # Returns only messages with mentions of the current user, or messages that are replies to their messages.
      class Mention < TD::Types::SearchMessagesFilter
      end

      # Returns only document messages.
      class Document < TD::Types::SearchMessagesFilter
      end

      # Returns only animation messages.
      class Animation < TD::Types::SearchMessagesFilter
      end

      # Returns only messages containing chat photos.
      class ChatPhoto < TD::Types::SearchMessagesFilter
      end

      # Returns only video note messages.
      class VideoNote < TD::Types::SearchMessagesFilter
      end

      # Returns only voice note messages.
      class VoiceNote < TD::Types::SearchMessagesFilter
      end

      # Returns only failed to send messages.
      # This filter can be used only if the message database is used.
      class FailedToSend < TD::Types::SearchMessagesFilter
      end

      # Returns only messages with unread mentions of the current user, or messages that are replies to their messages.
      # When using this filter the results can't be additionally filtered by a query, a message thread or by the sending
      #   user.
      class UnreadMention < TD::Types::SearchMessagesFilter
      end

      # Returns only photo and video messages.
      class PhotoAndVideo < TD::Types::SearchMessagesFilter
      end

      # Returns only messages with unread reactions for the current user.
      # When using this filter the results can't be additionally filtered by a query, a message thread or by the sending
      #   user.
      class UnreadReaction < TD::Types::SearchMessagesFilter
      end

      # Returns only voice and video note messages.
      class VoiceAndVideoNote < TD::Types::SearchMessagesFilter
      end
    end

    # Contains a list of chat invite link counts.
    # 
    # @attr invite_link_counts [Array<TD::Types::ChatInviteLinkCount>] List of invite link counts.
    class ChatInviteLinkCounts < TD::Types::Base
      # List of invite link counts.
      attr_accessor invite_link_counts: ::Array[TD::Types::ChatInviteLinkCount]
    end

    # Describes a chat member joined a chat via an invite link.
    # 
    # @attr user_id [Integer] User identifier.
    # @attr joined_chat_date [Integer] Point in time (Unix timestamp) when the user joined the chat.
    # @attr approver_user_id [Integer] User identifier of the chat administrator, approved user join request.
    class ChatInviteLinkMember < TD::Types::Base
      # User identifier.
      attr_accessor user_id: Integer

      # Point in time (Unix timestamp) when the user joined the chat.
      attr_accessor joined_chat_date: Integer

      # User identifier of the chat administrator, approved user join request.
      attr_accessor approver_user_id: Integer
    end

    # Contains information about pending join requests for a chat.
    # 
    # @attr total_count [Integer] Total number of pending join requests.
    # @attr user_ids [Array<Integer>] Identifiers of at most 3 users sent the newest pending join requests.
    class ChatJoinRequestsInfo < TD::Types::Base
      # Total number of pending join requests.
      attr_accessor total_count: Integer

      # Identifiers of at most 3 users sent the newest pending join requests.
      attr_accessor user_ids: ::Array[Integer]
    end

    # An identity document to be saved to Telegram Passport.
    # 
    # @attr number [TD::Types::String] Document number; 1-24 characters.
    # @attr expiry_date [TD::Types::Date] Document expiry date; pass null if not applicable.
    # @attr front_side [TD::Types::InputFile] Front side of the document.
    # @attr reverse_side [TD::Types::InputFile] Reverse side of the document; only for driver license and identity card;
    #   pass null otherwise.
    # @attr selfie [TD::Types::InputFile] Selfie with the document; pass null if unavailable.
    # @attr translation [Array<TD::Types::InputFile>] List of files containing a certified English translation of the
    #   document.
    class InputIdentityDocument < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Document number; 1-24 characters.
      attr_accessor number: TD::Types::String

      # Document expiry date; pass null if not applicable.
      attr_accessor expiry_date: TD::Types::Date

      # Front side of the document.
      attr_accessor front_side: TD::Types::InputFile

      # Reverse side of the document; only for driver license and identity card;
      # pass null otherwise.
      attr_accessor reverse_side: TD::Types::InputFile

      # Selfie with the document; pass null if unavailable.
      attr_accessor selfie: TD::Types::InputFile

      # List of files containing a certified English translation of the
      # document.
      attr_accessor translation: ::Array[TD::Types::InputFile]
    end

    # A personal document to be saved to Telegram Passport.
    # 
    # @attr files [Array<TD::Types::InputFile>] List of files containing the pages of the document.
    # @attr translation [Array<TD::Types::InputFile>] List of files containing a certified English translation of the
    #   document.
    class InputPersonalDocument < TD::Types::Base
      # List of files containing the pages of the document.
      attr_accessor files: ::Array[TD::Types::InputFile]

      # List of files containing a certified English translation of the
      # document.
      attr_accessor translation: ::Array[TD::Types::InputFile]
    end

    # Describes the type of notifications in a notification group.
    class NotificationGroupType < TD::Types::Base
      # A group containing notifications of type notificationTypeNewCall.
      class Calls < TD::Types::NotificationGroupType
      end

      # A group containing notifications of type notificationTypeNewMessage and notificationTypeNewPushMessage with unread
      #   mentions of the current user, replies to their messages, or a pinned message.
      class Mentions < TD::Types::NotificationGroupType
      end

      # A group containing notifications of type notificationTypeNewMessage and notificationTypeNewPushMessage with
      #   ordinary unread messages.
      class Messages < TD::Types::NotificationGroupType
      end

      # A group containing a notification of type notificationTypeNewSecretChat.
      class SecretChat < TD::Types::NotificationGroupType
      end
    end

    # Describes a recommended chat filter.
    # 
    # @attr filter [TD::Types::ChatFilter] The chat filter.
    # @attr description [TD::Types::String] Chat filter description.
    class RecommendedChatFilter < TD::Types::Base
      # The chat filter.
      attr_accessor filter: TD::Types::ChatFilter

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Chat filter description.
      attr_accessor description: TD::Types::String
    end

    # Contains approximate storage usage statistics, excluding files of unknown file type.
    # 
    # @attr files_size [Integer] Approximate total size of files, in bytes.
    # @attr file_count [Integer] Approximate number of files.
    # @attr database_size [Integer] Size of the database.
    # @attr language_pack_database_size [Integer] Size of the language pack database.
    # @attr log_size [Integer] Size of the TDLib internal log.
    class StorageStatisticsFast < TD::Types::Base
      # Approximate total size of files, in bytes.
      attr_accessor files_size: Integer

      # Approximate number of files.
      attr_accessor file_count: Integer

      # Size of the database.
      attr_accessor database_size: Integer

      # Size of the language pack database.
      attr_accessor language_pack_database_size: Integer

      # Size of the TDLib internal log.
      attr_accessor log_size: Integer
    end

    # Information about the authentication code that was sent.
    # 
    # @attr phone_number [TD::Types::String] A phone number that is being authenticated.
    # @attr type [TD::Types::AuthenticationCodeType] The way the code was sent to the user.
    # @attr next_type [TD::Types::AuthenticationCodeType, nil] The way the next code will be sent to the user; may be
    #   null.
    # @attr timeout [Integer] Timeout before the code can be re-sent, in seconds.
    class AuthenticationCodeInfo < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # A phone number that is being authenticated.
      attr_accessor phone_number: TD::Types::String

      # The way the code was sent to the user.
      attr_accessor type: TD::Types::AuthenticationCodeType

      # The way the next code will be sent to the user; may be
      # null.
      attr_accessor next_type: TD::Types::AuthenticationCodeType?

      # Timeout before the code can be re-sent, in seconds.
      attr_accessor timeout: Integer
    end

    # Provides information about the method by which an authentication code is delivered to the user.
    class AuthenticationCodeType < TD::Types::Base
      # An authentication code is delivered via an SMS message to the specified phone number.
      # 
      # @attr length [Integer] Length of the code.
      class Sms < TD::Types::AuthenticationCodeType
        # Length of the code.
        attr_accessor length: Integer
      end

      # An authentication code is delivered via a phone call to the specified phone number.
      # 
      # @attr length [Integer] Length of the code.
      class Call < TD::Types::AuthenticationCodeType
        # Length of the code.
        attr_accessor length: Integer
      end

      # An authentication code is delivered by an immediately canceled call to the specified phone number.
      # The phone number that calls is the code that must be entered automatically.
      # 
      # @attr pattern [TD::Types::String] Pattern of the phone number from which the call will be made.
      class FlashCall < TD::Types::AuthenticationCodeType
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Pattern of the phone number from which the call will be made.
        attr_accessor pattern: TD::Types::String
      end

      # An authentication code is delivered by an immediately canceled call to the specified phone number.
      # The last digits of the phone number that calls are the code that must be entered manually by the user.
      # 
      # @attr phone_number_prefix [TD::Types::String] Prefix of the phone number from which the call will be made.
      # @attr length [Integer] Number of digits in the code, excluding the prefix.
      class MissedCall < TD::Types::AuthenticationCodeType
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Prefix of the phone number from which the call will be made.
        attr_accessor phone_number_prefix: TD::Types::String

        # Number of digits in the code, excluding the prefix.
        attr_accessor length: Integer
      end

      # An authentication code is delivered via a private Telegram message, which can be viewed from another active
      #   session.
      # 
      # @attr length [Integer] Length of the code.
      class TelegramMessage < TD::Types::AuthenticationCodeType
        # Length of the code.
        attr_accessor length: Integer
      end
    end

    # Contains a list of chat members joined a chat via an invite link.
    # 
    # @attr total_count [Integer] Approximate total count of chat members found.
    # @attr members [Array<TD::Types::ChatInviteLinkMember>] List of chat members, joined a chat via an invite link.
    class ChatInviteLinkMembers < TD::Types::Base
      # Approximate total count of chat members found.
      attr_accessor total_count: Integer

      # List of chat members, joined a chat via an invite link.
      attr_accessor members: ::Array[TD::Types::ChatInviteLinkMember]
    end

    # Describes the quality of a group call video.
    class GroupCallVideoQuality < TD::Types::Base
      # The best available video quality.
      class Full < TD::Types::GroupCallVideoQuality
      end

      # The medium video quality.
      class Medium < TD::Types::GroupCallVideoQuality
      end

      # The worst available video quality.
      class Thumbnail < TD::Types::GroupCallVideoQuality
      end
    end

    # Contains information about the current localization target.
    # 
    # @attr language_packs [Array<TD::Types::LanguagePackInfo>] List of available language packs for this application.
    class LocalizationTargetInfo < TD::Types::Base
      # List of available language packs for this application.
      attr_accessor language_packs: ::Array[TD::Types::LanguagePackInfo]
    end

    # Contains information about interactions with a message.
    # 
    # @attr view_count [Integer] Number of times the message was viewed.
    # @attr forward_count [Integer] Number of times the message was forwarded.
    # @attr reply_info [TD::Types::MessageReplyInfo, nil] Information about direct or indirect replies to the message;
    #   may be null.
    #   Currently, available only in channels with a discussion supergroup and discussion supergroups for messages, which
    #   are not replies itself.
    # @attr reactions [Array<TD::Types::MessageReaction>] The list of reactions added to the message.
    class MessageInteractionInfo < TD::Types::Base
      # Number of times the message was viewed.
      attr_accessor view_count: Integer

      # Number of times the message was forwarded.
      attr_accessor forward_count: Integer

      # Information about direct or indirect replies to the message;
      # may be null.
      # Currently, available only in channels with a discussion supergroup and discussion supergroups for messages, which
      # are not replies itself.
      attr_accessor reply_info: TD::Types::MessageReplyInfo?

      # The list of reactions added to the message.
      attr_accessor reactions: ::Array[TD::Types::MessageReaction]
    end

    # Contains information about the time when a scheduled message will be sent.
    class MessageSchedulingState < TD::Types::Base
      # The message will be sent at the specified date.
      # 
      # @attr send_date [Integer] Date the message will be sent.
      #   The date must be within 367 days in the future.
      class SendAtDate < TD::Types::MessageSchedulingState
        # Date the message will be sent.
        # The date must be within 367 days in the future.
        attr_accessor send_date: Integer
      end

      # The message will be sent when the peer will be online.
      # Applicable to private chats only and when the exact online status of the peer is known.
      class SendWhenOnline < TD::Types::MessageSchedulingState
      end
    end

    # Contains statistics about network usage.
    class NetworkStatisticsEntry < TD::Types::Base
      # Contains information about the total amount of data that was used for calls.
      # 
      # @attr network_type [TD::Types::NetworkType] Type of the network the data was sent through.
      #   Call setNetworkType to maintain the actual network type.
      # @attr sent_bytes [Integer] Total number of bytes sent.
      # @attr received_bytes [Integer] Total number of bytes received.
      # @attr duration [Float] Total call duration, in seconds.
      class Call < TD::Types::NetworkStatisticsEntry
        # Type of the network the data was sent through.
        # Call setNetworkType to maintain the actual network type.
        attr_accessor network_type: TD::Types::NetworkType

        # Total number of bytes sent.
        attr_accessor sent_bytes: Integer

        # Total number of bytes received.
        attr_accessor received_bytes: Integer

        # Total call duration, in seconds.
        attr_accessor duration: Float
      end

      # Contains information about the total amount of data that was used to send and receive files.
      # 
      # @attr file_type [TD::Types::FileType] Type of the file the data is part of; pass null if the data isn't related to
      #   files.
      # @attr network_type [TD::Types::NetworkType] Type of the network the data was sent through.
      #   Call setNetworkType to maintain the actual network type.
      # @attr sent_bytes [Integer] Total number of bytes sent.
      # @attr received_bytes [Integer] Total number of bytes received.
      class File < TD::Types::NetworkStatisticsEntry
        # Type of the file the data is part of; pass null if the data isn't related to
        # files.
        attr_accessor file_type: TD::Types::FileType

        # Type of the network the data was sent through.
        # Call setNetworkType to maintain the actual network type.
        attr_accessor network_type: TD::Types::NetworkType

        # Total number of bytes sent.
        attr_accessor sent_bytes: Integer

        # Total number of bytes received.
        attr_accessor received_bytes: Integer
      end
    end

    # Stripe payment provider.
    # 
    # @attr publishable_key [TD::Types::String] Stripe API publishable key.
    # @attr need_country [Boolean] True, if the user country must be provided.
    # @attr need_postal_code [Boolean] True, if the user ZIP/postal code must be provided.
    # @attr need_cardholder_name [Boolean] True, if the cardholder name must be provided.
    class PaymentsProviderStripe < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Stripe API publishable key.
      attr_accessor publishable_key: TD::Types::String

      # True, if the user country must be provided.
      attr_accessor need_country: bool

      # True, if the user ZIP/postal code must be provided.
      attr_accessor need_postal_code: bool

      # True, if the cardholder name must be provided.
      attr_accessor need_cardholder_name: bool
    end

    # Contains a list of recommended chat filters.
    # 
    # @attr chat_filters [Array<TD::Types::RecommendedChatFilter>] List of recommended chat filters.
    class RecommendedChatFilters < TD::Types::Base
      # List of recommended chat filters.
      attr_accessor chat_filters: ::Array[TD::Types::RecommendedChatFilter]
    end

    # Returns information about the availability of a temporary password, which can be used for payments.
    # 
    # @attr has_password [Boolean] True, if a temporary password is available.
    # @attr valid_for [Integer] Time left before the temporary password expires, in seconds.
    class TemporaryPasswordState < TD::Types::Base
      # True, if a temporary password is available.
      attr_accessor has_password: bool

      # Time left before the temporary password expires, in seconds.
      attr_accessor valid_for: Integer
    end

    # Describes an action associated with a bank card number.
    # 
    # @attr text [TD::Types::String] Action text.
    # @attr url [TD::Types::String] The URL to be opened.
    class BankCardActionOpenUrl < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Action text.
      attr_accessor text: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # The URL to be opened.
      attr_accessor url: TD::Types::String
    end

    # Describes a recently speaking participant in a group call.
    # 
    # @attr participant_id [TD::Types::MessageSender] Group call participant identifier.
    # @attr is_speaking [Boolean] True, is the user has spoken recently.
    class GroupCallRecentSpeaker < TD::Types::Base
      # Group call participant identifier.
      attr_accessor participant_id: TD::Types::MessageSender

      # True, is the user has spoken recently.
      attr_accessor is_speaking: bool
    end

    # Represents a single result of an inline query; for bots only.
    class InputInlineQueryResult < TD::Types::Base
      # Represents a game.
      # 
      # @attr id [TD::Types::String] Unique identifier of the query result.
      # @attr game_short_name [TD::Types::String] Short name of the game.
      # @attr reply_markup [TD::Types::ReplyMarkup] The message reply markup; pass null if none.
      #   Must be of type {TD::Types::ReplyMarkup::InlineKeyboard} or null.
      class Game < TD::Types::InputInlineQueryResult
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Unique identifier of the query result.
        attr_accessor id: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Short name of the game.
        attr_accessor game_short_name: TD::Types::String

        # The message reply markup; pass null if none.
        # Must be of type {TD::Types::ReplyMarkup::InlineKeyboard} or null.
        attr_accessor reply_markup: TD::Types::ReplyMarkup
      end

      # Represents a link to an MP3 audio file.
      # 
      # @attr id [TD::Types::String] Unique identifier of the query result.
      # @attr title [TD::Types::String] Title of the audio file.
      # @attr performer [TD::Types::String] Performer of the audio file.
      # @attr audio_url [TD::Types::String] The URL of the audio file.
      # @attr audio_duration [Integer] Audio file duration, in seconds.
      # @attr reply_markup [TD::Types::ReplyMarkup] The message reply markup; pass null if none.
      #   Must be of type {TD::Types::ReplyMarkup::InlineKeyboard} or null.
      # @attr input_message_content [TD::Types::InputMessageContent] The content of the message to be sent.
      #   Must be one of the following types: inputMessageText, inputMessageAudio, inputMessageInvoice,
      #   inputMessageLocation, {TD::Types::InputMessageContent::Venue} or inputMessageContact.
      class Audio < TD::Types::InputInlineQueryResult
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Unique identifier of the query result.
        attr_accessor id: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Title of the audio file.
        attr_accessor title: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Performer of the audio file.
        attr_accessor performer: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # The URL of the audio file.
        attr_accessor audio_url: TD::Types::String

        # Audio file duration, in seconds.
        attr_accessor audio_duration: Integer

        # The message reply markup; pass null if none.
        # Must be of type {TD::Types::ReplyMarkup::InlineKeyboard} or null.
        attr_accessor reply_markup: TD::Types::ReplyMarkup

        # The content of the message to be sent.
        # Must be one of the following types: inputMessageText, inputMessageAudio, inputMessageInvoice,
        # inputMessageLocation, {TD::Types::InputMessageContent::Venue} or inputMessageContact.
        attr_accessor input_message_content: TD::Types::InputMessageContent
      end

      # Represents link to a JPEG image.
      # 
      # @attr id [TD::Types::String] Unique identifier of the query result.
      # @attr title [TD::Types::String] Title of the result, if known.
      # @attr description [TD::Types::String] A short description of the result, if known.
      # @attr thumbnail_url [TD::Types::String] URL of the photo thumbnail, if it exists.
      # @attr photo_url [TD::Types::String] The URL of the JPEG photo (photo size must not exceed 5MB).
      # @attr photo_width [Integer] Width of the photo.
      # @attr photo_height [Integer] Height of the photo.
      # @attr reply_markup [TD::Types::ReplyMarkup] The message reply markup; pass null if none.
      #   Must be of type {TD::Types::ReplyMarkup::InlineKeyboard} or null.
      # @attr input_message_content [TD::Types::InputMessageContent] The content of the message to be sent.
      #   Must be one of the following types: inputMessageText, inputMessagePhoto, inputMessageInvoice,
      #   inputMessageLocation, {TD::Types::InputMessageContent::Venue} or inputMessageContact.
      class Photo < TD::Types::InputInlineQueryResult
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Unique identifier of the query result.
        attr_accessor id: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Title of the result, if known.
        attr_accessor title: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # A short description of the result, if known.
        attr_accessor description: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # URL of the photo thumbnail, if it exists.
        attr_accessor thumbnail_url: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # The URL of the JPEG photo (photo size must not exceed 5MB).
        attr_accessor photo_url: TD::Types::String

        # Width of the photo.
        attr_accessor photo_width: Integer

        # Height of the photo.
        attr_accessor photo_height: Integer

        # The message reply markup; pass null if none.
        # Must be of type {TD::Types::ReplyMarkup::InlineKeyboard} or null.
        attr_accessor reply_markup: TD::Types::ReplyMarkup

        # The content of the message to be sent.
        # Must be one of the following types: inputMessageText, inputMessagePhoto, inputMessageInvoice,
        # inputMessageLocation, {TD::Types::InputMessageContent::Venue} or inputMessageContact.
        attr_accessor input_message_content: TD::Types::InputMessageContent
      end

      # Represents information about a venue.
      # 
      # @attr id [TD::Types::String] Unique identifier of the query result.
      # @attr venue [TD::Types::Venue] Venue result.
      # @attr thumbnail_url [TD::Types::String] URL of the result thumbnail, if it exists.
      # @attr thumbnail_width [Integer] Thumbnail width, if known.
      # @attr thumbnail_height [Integer] Thumbnail height, if known.
      # @attr reply_markup [TD::Types::ReplyMarkup] The message reply markup; pass null if none.
      #   Must be of type {TD::Types::ReplyMarkup::InlineKeyboard} or null.
      # @attr input_message_content [TD::Types::InputMessageContent] The content of the message to be sent.
      #   Must be one of the following types: inputMessageText, inputMessageInvoice, inputMessageLocation,
      #   {TD::Types::InputMessageContent::Venue} or inputMessageContact.
      class Venue < TD::Types::InputInlineQueryResult
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Unique identifier of the query result.
        attr_accessor id: TD::Types::String

        # Venue result.
        attr_accessor venue: TD::Types::Venue

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # URL of the result thumbnail, if it exists.
        attr_accessor thumbnail_url: TD::Types::String

        # Thumbnail width, if known.
        attr_accessor thumbnail_width: Integer

        # Thumbnail height, if known.
        attr_accessor thumbnail_height: Integer

        # The message reply markup; pass null if none.
        # Must be of type {TD::Types::ReplyMarkup::InlineKeyboard} or null.
        attr_accessor reply_markup: TD::Types::ReplyMarkup

        # The content of the message to be sent.
        # Must be one of the following types: inputMessageText, inputMessageInvoice, inputMessageLocation,
        # {TD::Types::InputMessageContent::Venue} or inputMessageContact.
        attr_accessor input_message_content: TD::Types::InputMessageContent
      end

      # Represents a link to a page containing an embedded video player or a video file.
      # 
      # @attr id [TD::Types::String] Unique identifier of the query result.
      # @attr title [TD::Types::String] Title of the result.
      # @attr description [TD::Types::String] A short description of the result, if known.
      # @attr thumbnail_url [TD::Types::String] The URL of the video thumbnail (JPEG), if it exists.
      # @attr video_url [TD::Types::String] URL of the embedded video player or video file.
      # @attr mime_type [TD::Types::String] MIME type of the content of the video URL, only "text/html" or "video/mp4" are
      #   currently supported.
      # @attr video_width [Integer] Width of the video.
      # @attr video_height [Integer] Height of the video.
      # @attr video_duration [Integer] Video duration, in seconds.
      # @attr reply_markup [TD::Types::ReplyMarkup] The message reply markup; pass null if none.
      #   Must be of type {TD::Types::ReplyMarkup::InlineKeyboard} or null.
      # @attr input_message_content [TD::Types::InputMessageContent] The content of the message to be sent.
      #   Must be one of the following types: inputMessageText, inputMessageVideo, inputMessageInvoice,
      #   inputMessageLocation, {TD::Types::InputMessageContent::Venue} or inputMessageContact.
      class Video < TD::Types::InputInlineQueryResult
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Unique identifier of the query result.
        attr_accessor id: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Title of the result.
        attr_accessor title: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # A short description of the result, if known.
        attr_accessor description: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # The URL of the video thumbnail (JPEG), if it exists.
        attr_accessor thumbnail_url: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # URL of the embedded video player or video file.
        attr_accessor video_url: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # MIME type of the content of the video URL, only "text/html" or "video/mp4" are
        # currently supported.
        attr_accessor mime_type: TD::Types::String

        # Width of the video.
        attr_accessor video_width: Integer

        # Height of the video.
        attr_accessor video_height: Integer

        # Video duration, in seconds.
        attr_accessor video_duration: Integer

        # The message reply markup; pass null if none.
        # Must be of type {TD::Types::ReplyMarkup::InlineKeyboard} or null.
        attr_accessor reply_markup: TD::Types::ReplyMarkup

        # The content of the message to be sent.
        # Must be one of the following types: inputMessageText, inputMessageVideo, inputMessageInvoice,
        # inputMessageLocation, {TD::Types::InputMessageContent::Venue} or inputMessageContact.
        attr_accessor input_message_content: TD::Types::InputMessageContent
      end

      # Represents a link to an article or web page.
      # 
      # @attr id [TD::Types::String] Unique identifier of the query result.
      # @attr url [TD::Types::String] URL of the result, if it exists.
      # @attr hide_url [Boolean] True, if the URL must be not shown.
      # @attr title [TD::Types::String] Title of the result.
      # @attr description [TD::Types::String] A short description of the result.
      # @attr thumbnail_url [TD::Types::String] URL of the result thumbnail, if it exists.
      # @attr thumbnail_width [Integer] Thumbnail width, if known.
      # @attr thumbnail_height [Integer] Thumbnail height, if known.
      # @attr reply_markup [TD::Types::ReplyMarkup] The message reply markup; pass null if none.
      #   Must be of type {TD::Types::ReplyMarkup::InlineKeyboard} or null.
      # @attr input_message_content [TD::Types::InputMessageContent] The content of the message to be sent.
      #   Must be one of the following types: inputMessageText, inputMessageInvoice, inputMessageLocation,
      #   {TD::Types::InputMessageContent::Venue} or inputMessageContact.
      class Article < TD::Types::InputInlineQueryResult
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Unique identifier of the query result.
        attr_accessor id: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # URL of the result, if it exists.
        attr_accessor url: TD::Types::String

        # True, if the URL must be not shown.
        attr_accessor hide_url: bool

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Title of the result.
        attr_accessor title: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # A short description of the result.
        attr_accessor description: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # URL of the result thumbnail, if it exists.
        attr_accessor thumbnail_url: TD::Types::String

        # Thumbnail width, if known.
        attr_accessor thumbnail_width: Integer

        # Thumbnail height, if known.
        attr_accessor thumbnail_height: Integer

        # The message reply markup; pass null if none.
        # Must be of type {TD::Types::ReplyMarkup::InlineKeyboard} or null.
        attr_accessor reply_markup: TD::Types::ReplyMarkup

        # The content of the message to be sent.
        # Must be one of the following types: inputMessageText, inputMessageInvoice, inputMessageLocation,
        # {TD::Types::InputMessageContent::Venue} or inputMessageContact.
        attr_accessor input_message_content: TD::Types::InputMessageContent
      end

      # Represents a user contact.
      # 
      # @attr id [TD::Types::String] Unique identifier of the query result.
      # @attr contact [TD::Types::Contact] User contact.
      # @attr thumbnail_url [TD::Types::String] URL of the result thumbnail, if it exists.
      # @attr thumbnail_width [Integer] Thumbnail width, if known.
      # @attr thumbnail_height [Integer] Thumbnail height, if known.
      # @attr reply_markup [TD::Types::ReplyMarkup] The message reply markup; pass null if none.
      #   Must be of type {TD::Types::ReplyMarkup::InlineKeyboard} or null.
      # @attr input_message_content [TD::Types::InputMessageContent] The content of the message to be sent.
      #   Must be one of the following types: inputMessageText, inputMessageInvoice, inputMessageLocation,
      #   {TD::Types::InputMessageContent::Venue} or inputMessageContact.
      class Contact < TD::Types::InputInlineQueryResult
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Unique identifier of the query result.
        attr_accessor id: TD::Types::String

        # User contact.
        attr_accessor contact: TD::Types::Contact

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # URL of the result thumbnail, if it exists.
        attr_accessor thumbnail_url: TD::Types::String

        # Thumbnail width, if known.
        attr_accessor thumbnail_width: Integer

        # Thumbnail height, if known.
        attr_accessor thumbnail_height: Integer

        # The message reply markup; pass null if none.
        # Must be of type {TD::Types::ReplyMarkup::InlineKeyboard} or null.
        attr_accessor reply_markup: TD::Types::ReplyMarkup

        # The content of the message to be sent.
        # Must be one of the following types: inputMessageText, inputMessageInvoice, inputMessageLocation,
        # {TD::Types::InputMessageContent::Venue} or inputMessageContact.
        attr_accessor input_message_content: TD::Types::InputMessageContent
      end

      # Represents a link to a WEBP, TGS, or WEBM sticker.
      # 
      # @attr id [TD::Types::String] Unique identifier of the query result.
      # @attr thumbnail_url [TD::Types::String] URL of the sticker thumbnail, if it exists.
      # @attr sticker_url [TD::Types::String] The URL of the WEBP, TGS, or WEBM sticker (sticker file size must not exceed
      #   5MB).
      # @attr sticker_width [Integer] Width of the sticker.
      # @attr sticker_height [Integer] Height of the sticker.
      # @attr reply_markup [TD::Types::ReplyMarkup] The message reply markup; pass null if none.
      #   Must be of type {TD::Types::ReplyMarkup::InlineKeyboard} or null.
      # @attr input_message_content [TD::Types::InputMessageContent] The content of the message to be sent.
      #   Must be one of the following types: inputMessageText, inputMessageSticker, inputMessageInvoice,
      #   inputMessageLocation, {TD::Types::InputMessageContent::Venue} or inputMessageContact.
      class Sticker < TD::Types::InputInlineQueryResult
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Unique identifier of the query result.
        attr_accessor id: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # URL of the sticker thumbnail, if it exists.
        attr_accessor thumbnail_url: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # The URL of the WEBP, TGS, or WEBM sticker (sticker file size must not exceed
        # 5MB).
        attr_accessor sticker_url: TD::Types::String

        # Width of the sticker.
        attr_accessor sticker_width: Integer

        # Height of the sticker.
        attr_accessor sticker_height: Integer

        # The message reply markup; pass null if none.
        # Must be of type {TD::Types::ReplyMarkup::InlineKeyboard} or null.
        attr_accessor reply_markup: TD::Types::ReplyMarkup

        # The content of the message to be sent.
        # Must be one of the following types: inputMessageText, inputMessageSticker, inputMessageInvoice,
        # inputMessageLocation, {TD::Types::InputMessageContent::Venue} or inputMessageContact.
        attr_accessor input_message_content: TD::Types::InputMessageContent
      end

      # Represents a link to a file.
      # 
      # @attr id [TD::Types::String] Unique identifier of the query result.
      # @attr title [TD::Types::String] Title of the resulting file.
      # @attr description [TD::Types::String] Short description of the result, if known.
      # @attr document_url [TD::Types::String] URL of the file.
      # @attr mime_type [TD::Types::String] MIME type of the file content; only "application/pdf" and "application/zip" are
      #   currently allowed.
      # @attr thumbnail_url [TD::Types::String] The URL of the file thumbnail, if it exists.
      # @attr thumbnail_width [Integer] Width of the thumbnail.
      # @attr thumbnail_height [Integer] Height of the thumbnail.
      # @attr reply_markup [TD::Types::ReplyMarkup] The message reply markup; pass null if none.
      #   Must be of type {TD::Types::ReplyMarkup::InlineKeyboard} or null.
      # @attr input_message_content [TD::Types::InputMessageContent] The content of the message to be sent.
      #   Must be one of the following types: inputMessageText, inputMessageDocument, inputMessageInvoice,
      #   inputMessageLocation, {TD::Types::InputMessageContent::Venue} or inputMessageContact.
      class Document < TD::Types::InputInlineQueryResult
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Unique identifier of the query result.
        attr_accessor id: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Title of the resulting file.
        attr_accessor title: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Short description of the result, if known.
        attr_accessor description: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # URL of the file.
        attr_accessor document_url: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # MIME type of the file content; only "application/pdf" and "application/zip" are
        # currently allowed.
        attr_accessor mime_type: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # The URL of the file thumbnail, if it exists.
        attr_accessor thumbnail_url: TD::Types::String

        # Width of the thumbnail.
        attr_accessor thumbnail_width: Integer

        # Height of the thumbnail.
        attr_accessor thumbnail_height: Integer

        # The message reply markup; pass null if none.
        # Must be of type {TD::Types::ReplyMarkup::InlineKeyboard} or null.
        attr_accessor reply_markup: TD::Types::ReplyMarkup

        # The content of the message to be sent.
        # Must be one of the following types: inputMessageText, inputMessageDocument, inputMessageInvoice,
        # inputMessageLocation, {TD::Types::InputMessageContent::Venue} or inputMessageContact.
        attr_accessor input_message_content: TD::Types::InputMessageContent
      end

      # Represents a point on the map.
      # 
      # @attr id [TD::Types::String] Unique identifier of the query result.
      # @attr location [TD::Types::Location] Location result.
      # @attr live_period [Integer] Amount of time relative to the message sent time until the location can be updated, in
      #   seconds.
      # @attr title [TD::Types::String] Title of the result.
      # @attr thumbnail_url [TD::Types::String] URL of the result thumbnail, if it exists.
      # @attr thumbnail_width [Integer] Thumbnail width, if known.
      # @attr thumbnail_height [Integer] Thumbnail height, if known.
      # @attr reply_markup [TD::Types::ReplyMarkup] The message reply markup; pass null if none.
      #   Must be of type {TD::Types::ReplyMarkup::InlineKeyboard} or null.
      # @attr input_message_content [TD::Types::InputMessageContent] The content of the message to be sent.
      #   Must be one of the following types: inputMessageText, inputMessageInvoice, inputMessageLocation,
      #   {TD::Types::InputMessageContent::Venue} or inputMessageContact.
      class Location < TD::Types::InputInlineQueryResult
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Unique identifier of the query result.
        attr_accessor id: TD::Types::String

        # Location result.
        attr_accessor location: TD::Types::Location

        # Amount of time relative to the message sent time until the location can be updated, in
        # seconds.
        attr_accessor live_period: Integer

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Title of the result.
        attr_accessor title: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # URL of the result thumbnail, if it exists.
        attr_accessor thumbnail_url: TD::Types::String

        # Thumbnail width, if known.
        attr_accessor thumbnail_width: Integer

        # Thumbnail height, if known.
        attr_accessor thumbnail_height: Integer

        # The message reply markup; pass null if none.
        # Must be of type {TD::Types::ReplyMarkup::InlineKeyboard} or null.
        attr_accessor reply_markup: TD::Types::ReplyMarkup

        # The content of the message to be sent.
        # Must be one of the following types: inputMessageText, inputMessageInvoice, inputMessageLocation,
        # {TD::Types::InputMessageContent::Venue} or inputMessageContact.
        attr_accessor input_message_content: TD::Types::InputMessageContent
      end

      # Represents a link to an animated GIF or an animated (i.e., without sound) H.264/MPEG-4 AVC video.
      # 
      # @attr id [TD::Types::String] Unique identifier of the query result.
      # @attr title [TD::Types::String] Title of the query result.
      # @attr thumbnail_url [TD::Types::String] URL of the result thumbnail (JPEG, GIF, or MPEG4), if it exists.
      # @attr thumbnail_mime_type [TD::Types::String] MIME type of the video thumbnail.
      #   If non-empty, must be one of "image/jpeg", "image/gif" and "video/mp4".
      # @attr video_url [TD::Types::String] The URL of the video file (file size must not exceed 1MB).
      # @attr video_mime_type [TD::Types::String] MIME type of the video file.
      #   Must be one of "image/gif" and "video/mp4".
      # @attr video_duration [Integer] Duration of the video, in seconds.
      # @attr video_width [Integer] Width of the video.
      # @attr video_height [Integer] Height of the video.
      # @attr reply_markup [TD::Types::ReplyMarkup] The message reply markup; pass null if none.
      #   Must be of type {TD::Types::ReplyMarkup::InlineKeyboard} or null.
      # @attr input_message_content [TD::Types::InputMessageContent] The content of the message to be sent.
      #   Must be one of the following types: inputMessageText, inputMessageAnimation, inputMessageInvoice,
      #   inputMessageLocation, {TD::Types::InputMessageContent::Venue} or inputMessageContact.
      class Animation < TD::Types::InputInlineQueryResult
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Unique identifier of the query result.
        attr_accessor id: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Title of the query result.
        attr_accessor title: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # URL of the result thumbnail (JPEG, GIF, or MPEG4), if it exists.
        attr_accessor thumbnail_url: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # MIME type of the video thumbnail.
        # If non-empty, must be one of "image/jpeg", "image/gif" and "video/mp4".
        attr_accessor thumbnail_mime_type: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # The URL of the video file (file size must not exceed 1MB).
        attr_accessor video_url: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # MIME type of the video file.
        # Must be one of "image/gif" and "video/mp4".
        attr_accessor video_mime_type: TD::Types::String

        # Duration of the video, in seconds.
        attr_accessor video_duration: Integer

        # Width of the video.
        attr_accessor video_width: Integer

        # Height of the video.
        attr_accessor video_height: Integer

        # The message reply markup; pass null if none.
        # Must be of type {TD::Types::ReplyMarkup::InlineKeyboard} or null.
        attr_accessor reply_markup: TD::Types::ReplyMarkup

        # The content of the message to be sent.
        # Must be one of the following types: inputMessageText, inputMessageAnimation, inputMessageInvoice,
        # inputMessageLocation, {TD::Types::InputMessageContent::Venue} or inputMessageContact.
        attr_accessor input_message_content: TD::Types::InputMessageContent
      end

      # Represents a link to an opus-encoded audio file within an OGG container, single channel audio.
      # 
      # @attr id [TD::Types::String] Unique identifier of the query result.
      # @attr title [TD::Types::String] Title of the voice note.
      # @attr voice_note_url [TD::Types::String] The URL of the voice note file.
      # @attr voice_note_duration [Integer] Duration of the voice note, in seconds.
      # @attr reply_markup [TD::Types::ReplyMarkup] The message reply markup; pass null if none.
      #   Must be of type {TD::Types::ReplyMarkup::InlineKeyboard} or null.
      # @attr input_message_content [TD::Types::InputMessageContent] The content of the message to be sent.
      #   Must be one of the following types: inputMessageText, inputMessageVoiceNote, inputMessageInvoice,
      #   inputMessageLocation, {TD::Types::InputMessageContent::Venue} or inputMessageContact.
      class VoiceNote < TD::Types::InputInlineQueryResult
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Unique identifier of the query result.
        attr_accessor id: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Title of the voice note.
        attr_accessor title: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # The URL of the voice note file.
        attr_accessor voice_note_url: TD::Types::String

        # Duration of the voice note, in seconds.
        attr_accessor voice_note_duration: Integer

        # The message reply markup; pass null if none.
        # Must be of type {TD::Types::ReplyMarkup::InlineKeyboard} or null.
        attr_accessor reply_markup: TD::Types::ReplyMarkup

        # The content of the message to be sent.
        # Must be one of the following types: inputMessageText, inputMessageVoiceNote, inputMessageInvoice,
        # inputMessageLocation, {TD::Types::InputMessageContent::Venue} or inputMessageContact.
        attr_accessor input_message_content: TD::Types::InputMessageContent
      end
    end

    # Contains a description of the required Telegram Passport element that was requested by a service.
    # 
    # @attr suitable_elements [Array<TD::Types::PassportSuitableElement>] List of Telegram Passport elements any of which
    #   is enough to provide.
    class PassportRequiredElement < TD::Types::Base
      # List of Telegram Passport elements any of which
      # is enough to provide.
      attr_accessor suitable_elements: ::Array[TD::Types::PassportSuitableElement]
    end

    # Contains information about a Telegram Passport element that was requested by a service.
    # 
    # @attr type [TD::Types::PassportElementType] Type of the element.
    # @attr is_selfie_required [Boolean] True, if a selfie is required with the identity document.
    # @attr is_translation_required [Boolean] True, if a certified English translation is required with the document.
    # @attr is_native_name_required [Boolean] True, if personal details must include the user's name in the language of
    #   their country of residence.
    class PassportSuitableElement < TD::Types::Base
      # Type of the element.
      attr_accessor type: TD::Types::PassportElementType

      # True, if a selfie is required with the identity document.
      attr_accessor is_selfie_required: bool

      # True, if a certified English translation is required with the document.
      attr_accessor is_translation_required: bool

      # True, if personal details must include the user's name in the language of
      # their country of residence.
      attr_accessor is_native_name_required: bool
    end

    # Specifies the kind of chat members to return in getSupergroupMembers.
    class SupergroupMembersFilter < TD::Types::Base
      # Returns bot members of the supergroup or channel.
      class Bots < TD::Types::SupergroupMembersFilter
      end

      # Returns users banned from the supergroup or channel; can be used only by administrators.
      # 
      # @attr query [TD::Types::String] Query to search for.
      class Banned < TD::Types::SupergroupMembersFilter
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Query to search for.
        attr_accessor query: TD::Types::String
      end

      # Returns recently active users in reverse chronological order.
      class Recent < TD::Types::SupergroupMembersFilter
      end

      # Used to search for supergroup or channel members via a (string) query.
      # 
      # @attr query [TD::Types::String] Query to search for.
      class Search < TD::Types::SupergroupMembersFilter
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Query to search for.
        attr_accessor query: TD::Types::String
      end

      # Returns users which can be mentioned in the supergroup.
      # 
      # @attr query [TD::Types::String] Query to search for.
      # @attr message_thread_id [Integer] If non-zero, the identifier of the current message thread.
      class Mention < TD::Types::SupergroupMembersFilter
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Query to search for.
        attr_accessor query: TD::Types::String

        # If non-zero, the identifier of the current message thread.
        attr_accessor message_thread_id: Integer
      end

      # Returns contacts of the user, which are members of the supergroup or channel.
      # 
      # @attr query [TD::Types::String] Query to search for.
      class Contacts < TD::Types::SupergroupMembersFilter
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Query to search for.
        attr_accessor query: TD::Types::String
      end

      # Returns restricted supergroup members; can be used only by administrators.
      # 
      # @attr query [TD::Types::String] Query to search for.
      class Restricted < TD::Types::SupergroupMembersFilter
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Query to search for.
        attr_accessor query: TD::Types::String
      end

      # Returns the owner and administrators.
      class Administrators < TD::Types::SupergroupMembersFilter
      end
    end

    # Represents a single rule for managing privacy settings.
    class UserPrivacySettingRule < TD::Types::Base
      # A rule to allow all users to do something.
      class AllowAll < TD::Types::UserPrivacySettingRule
      end

      # A rule to allow certain specified users to do something.
      # 
      # @attr user_ids [Array<Integer>] The user identifiers, total number of users in all rules must not exceed 1000.
      class AllowUsers < TD::Types::UserPrivacySettingRule
        # The user identifiers, total number of users in all rules must not exceed 1000.
        attr_accessor user_ids: ::Array[Integer]
      end

      # A rule to restrict all users from doing something.
      class RestrictAll < TD::Types::UserPrivacySettingRule
      end

      # A rule to allow all of a user's contacts to do something.
      class AllowContacts < TD::Types::UserPrivacySettingRule
      end

      # A rule to restrict all specified users from doing something.
      # 
      # @attr user_ids [Array<Integer>] The user identifiers, total number of users in all rules must not exceed 1000.
      class RestrictUsers < TD::Types::UserPrivacySettingRule
        # The user identifiers, total number of users in all rules must not exceed 1000.
        attr_accessor user_ids: ::Array[Integer]
      end

      # A rule to restrict all contacts of a user from doing something.
      class RestrictContacts < TD::Types::UserPrivacySettingRule
      end

      # A rule to allow all members of certain specified basic groups and supergroups to doing something.
      # 
      # @attr chat_ids [Array<Integer>] The chat identifiers, total number of chats in all rules must not exceed 20.
      class AllowChatMembers < TD::Types::UserPrivacySettingRule
        # The chat identifiers, total number of chats in all rules must not exceed 20.
        attr_accessor chat_ids: ::Array[Integer]
      end

      # A rule to restrict all members of specified basic groups and supergroups from doing something.
      # 
      # @attr chat_ids [Array<Integer>] The chat identifiers, total number of chats in all rules must not exceed 20.
      class RestrictChatMembers < TD::Types::UserPrivacySettingRule
        # The chat identifiers, total number of chats in all rules must not exceed 20.
        attr_accessor chat_ids: ::Array[Integer]
      end
    end

    # Contains information about notification settings for a chat.
    # 
    # @attr use_default_mute_for [Boolean] If true, mute_for is ignored and the value for the relevant type of chat is
    #   used instead.
    # @attr mute_for [Integer] Time left before notifications will be unmuted, in seconds.
    # @attr use_default_sound [Boolean] If true, sound is ignored and the value for the relevant type of chat is used
    #   instead.
    # @attr sound [TD::Types::String] The name of an audio file to be used for notification sounds; only applies to iOS
    #   applications.
    # @attr use_default_show_preview [Boolean] If true, show_preview is ignored and the value for the relevant type of
    #   chat is used instead.
    # @attr show_preview [Boolean] True, if message content must be displayed in notifications.
    # @attr use_default_disable_pinned_message_notifications [Boolean] If true, disable_pinned_message_notifications is
    #   ignored and the value for the relevant type of chat is used instead.
    # @attr disable_pinned_message_notifications [Boolean] If true, notifications for incoming pinned messages will be
    #   created as for an ordinary unread message.
    # @attr use_default_disable_mention_notifications [Boolean] If true, disable_mention_notifications is ignored and the
    #   value for the relevant type of chat is used instead.
    # @attr disable_mention_notifications [Boolean] If true, notifications for messages with mentions will be created as
    #   for an ordinary unread message.
    class ChatNotificationSettings < TD::Types::Base
      # If true, mute_for is ignored and the value for the relevant type of chat is
      # used instead.
      attr_accessor use_default_mute_for: bool

      # Time left before notifications will be unmuted, in seconds.
      attr_accessor mute_for: Integer

      # If true, sound is ignored and the value for the relevant type of chat is used
      # instead.
      attr_accessor use_default_sound: bool

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # The name of an audio file to be used for notification sounds; only applies to iOS
      # applications.
      attr_accessor sound: TD::Types::String

      # If true, show_preview is ignored and the value for the relevant type of
      # chat is used instead.
      attr_accessor use_default_show_preview: bool

      # True, if message content must be displayed in notifications.
      attr_accessor show_preview: bool

      # If true, disable_pinned_message_notifications is
      # ignored and the value for the relevant type of chat is used instead.
      attr_accessor use_default_disable_pinned_message_notifications: bool

      # If true, notifications for incoming pinned messages will be
      # created as for an ordinary unread message.
      attr_accessor disable_pinned_message_notifications: bool

      # If true, disable_mention_notifications is ignored and the
      # value for the relevant type of chat is used instead.
      attr_accessor use_default_disable_mention_notifications: bool

      # If true, notifications for messages with mentions will be created as
      # for an ordinary unread message.
      attr_accessor disable_mention_notifications: bool
    end

    # Represents result of checking whether a username can be set for a chat.
    class CheckChatUsernameResult < TD::Types::Base
      # The username can be set.
      class Ok < TD::Types::CheckChatUsernameResult
      end

      # The username is invalid.
      class UsernameInvalid < TD::Types::CheckChatUsernameResult
      end

      # The username is occupied.
      class UsernameOccupied < TD::Types::CheckChatUsernameResult
      end

      # The user has too many chats with username, one of them must be made private first.
      class PublicChatsTooMuch < TD::Types::CheckChatUsernameResult
      end

      # The user can't be a member of a public supergroup.
      class PublicGroupsUnavailable < TD::Types::CheckChatUsernameResult
      end
    end

    # Contains information about an encrypted Telegram Passport element; for bots only.
    # 
    # @attr type [TD::Types::PassportElementType] Type of Telegram Passport element.
    # @attr data [String] Encrypted JSON-encoded data about the user.
    # @attr front_side [TD::Types::DatedFile] The front side of an identity document.
    # @attr reverse_side [TD::Types::DatedFile, nil] The reverse side of an identity document; may be null.
    # @attr selfie [TD::Types::DatedFile, nil] Selfie with the document; may be null.
    # @attr translation [Array<TD::Types::DatedFile>] List of files containing a certified English translation of the
    #   document.
    # @attr files [Array<TD::Types::DatedFile>] List of attached files.
    # @attr value [TD::Types::String] Unencrypted data, phone number or email address.
    # @attr hash [TD::Types::String] Hash of the entire element.
    class EncryptedPassportElement < TD::Types::Base
      # Type of Telegram Passport element.
      attr_accessor type: TD::Types::PassportElementType

      # Encrypted JSON-encoded data about the user.
      attr_accessor data: String

      # The front side of an identity document.
      attr_accessor front_side: TD::Types::DatedFile

      # The reverse side of an identity document; may be null.
      attr_accessor reverse_side: TD::Types::DatedFile?

      # Selfie with the document; may be null.
      attr_accessor selfie: TD::Types::DatedFile?

      # List of files containing a certified English translation of the
      # document.
      attr_accessor translation: ::Array[TD::Types::DatedFile]

      # List of attached files.
      attr_accessor files: ::Array[TD::Types::DatedFile]

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Unencrypted data, phone number or email address.
      attr_accessor value: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Hash of the entire element.
      attr_accessor hash: TD::Types::String
    end

    # Represents the value of a string in a language pack.
    class LanguagePackStringValue < TD::Types::Base
      # A deleted language pack string, the value must be taken from the built-in English language pack.
      class Deleted < TD::Types::LanguagePackStringValue
      end

      # An ordinary language pack string.
      # 
      # @attr value [TD::Types::String] String value.
      class Ordinary < TD::Types::LanguagePackStringValue
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # String value.
        attr_accessor value: TD::Types::String
      end

      # A language pack string which has different forms based on the number of some object it mentions.
      # See https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html for more info.
      # 
      # @attr zero_value [TD::Types::String] Value for zero objects.
      # @attr one_value [TD::Types::String] Value for one object.
      # @attr two_value [TD::Types::String] Value for two objects.
      # @attr few_value [TD::Types::String] Value for few objects.
      # @attr many_value [TD::Types::String] Value for many objects.
      # @attr other_value [TD::Types::String] Default value.
      class Pluralized < TD::Types::LanguagePackStringValue
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Value for zero objects.
        attr_accessor zero_value: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Value for one object.
        attr_accessor one_value: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Value for two objects.
        attr_accessor two_value: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Value for few objects.
        attr_accessor few_value: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Value for many objects.
        attr_accessor many_value: TD::Types::String

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Default value.
        attr_accessor other_value: TD::Types::String
      end
    end

    # Contains information about a related article.
    # 
    # @attr url [TD::Types::String] Related article URL.
    # @attr title [TD::Types::String, nil] Article title; may be empty.
    # @attr description [TD::Types::String, nil] Article description; may be empty.
    # @attr photo [TD::Types::Photo, nil] Article photo; may be null.
    # @attr author [TD::Types::String, nil] Article author; may be empty.
    # @attr publish_date [Integer] Point in time (Unix timestamp) when the article was published; 0 if unknown.
    class PageBlockRelatedArticle < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Related article URL.
      attr_accessor url: TD::Types::String

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Article title; may be empty.
      attr_accessor title: TD::Types::String?

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Article description; may be empty.
      attr_accessor description: TD::Types::String?

      # Article photo; may be null.
      attr_accessor photo: TD::Types::Photo?

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Article author; may be empty.
      attr_accessor author: TD::Types::String?

      # Point in time (Unix timestamp) when the article was published; 0 if unknown.
      attr_accessor publish_date: Integer
    end

    # Contains the storage usage statistics for a specific chat.
    # 
    # @attr chat_id [Integer] Chat identifier; 0 if none.
    # @attr size [Integer] Total size of the files in the chat, in bytes.
    # @attr count [Integer] Total number of files in the chat.
    # @attr by_file_type [Array<TD::Types::StorageStatisticsByFileType>] Statistics split by file types.
    class StorageStatisticsByChat < TD::Types::Base
      # Chat identifier; 0 if none.
      attr_accessor chat_id: Integer

      # Total size of the files in the chat, in bytes.
      attr_accessor size: Integer

      # Total number of files in the chat.
      attr_accessor count: Integer

      # Statistics split by file types.
      attr_accessor by_file_type: ::Array[TD::Types::StorageStatisticsByFileType]
    end

    # A list of privacy rules.
    # Rules are matched in the specified order.
    # The first matched rule defines the privacy setting for a given user.
    # If no rule matches, the action is not allowed.
    # 
    # @attr rules [Array<TD::Types::UserPrivacySettingRule>] A list of rules.
    class UserPrivacySettingRules < TD::Types::Base
      # A list of rules.
      attr_accessor rules: ::Array[TD::Types::UserPrivacySettingRule]
    end

    # Describes the type of an inline keyboard button.
    class InlineKeyboardButtonType < TD::Types::Base
      # A button to buy something.
      # This button must be in the first column and row of the keyboard and can be attached only to a message with content
      #   of the type messageInvoice.
      class Buy < TD::Types::InlineKeyboardButtonType
      end

      # A button that opens a specified URL.
      # 
      # @attr url [TD::Types::String] HTTP or tg:// URL to open.
      class Url < TD::Types::InlineKeyboardButtonType
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # HTTP or tg:// URL to open.
        attr_accessor url: TD::Types::String
      end

      # A button with a user reference to be handled in the same way as textEntityTypeMentionName entities.
      # 
      # @attr user_id [Integer] User identifier.
      class User < TD::Types::InlineKeyboardButtonType
        # User identifier.
        attr_accessor user_id: Integer
      end

      # A button that sends a callback query to a bot.
      # 
      # @attr data [String] Data to be sent to the bot via a callback query.
      class Callback < TD::Types::InlineKeyboardButtonType
        # Data to be sent to the bot via a callback query.
        attr_accessor data: String
      end

      # A button that opens a specified URL and automatically authorize the current user if allowed to do so.
      # 
      # @attr url [TD::Types::String] An HTTP URL to open.
      # @attr id [Integer] Unique button identifier.
      # @attr forward_text [TD::Types::String] If non-empty, new text of the button in forwarded messages.
      class LoginUrl < TD::Types::InlineKeyboardButtonType
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # An HTTP URL to open.
        attr_accessor url: TD::Types::String

        # Unique button identifier.
        attr_accessor id: Integer

        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # If non-empty, new text of the button in forwarded messages.
        attr_accessor forward_text: TD::Types::String
      end

      # A button with a game that sends a callback query to a bot.
      # This button must be in the first column and row of the keyboard and can be attached only to a message with content
      #   of the type messageGame.
      class CallbackGame < TD::Types::InlineKeyboardButtonType
      end

      # A button that forces an inline query to the bot to be inserted in the input field.
      # 
      # @attr query [TD::Types::String] Inline query to be sent to the bot.
      # @attr in_current_chat [Boolean] True, if the inline query must be sent from the current chat.
      class SwitchInline < TD::Types::InlineKeyboardButtonType
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Inline query to be sent to the bot.
        attr_accessor query: TD::Types::String

        # True, if the inline query must be sent from the current chat.
        attr_accessor in_current_chat: bool
      end

      # A button that asks for password of the current user and then sends a callback query to a bot.
      # 
      # @attr data [String] Data to be sent to the bot via a callback query.
      class CallbackWithPassword < TD::Types::InlineKeyboardButtonType
        # Data to be sent to the bot via a callback query.
        attr_accessor data: String
      end
    end

    # Describes the types of chats to which notification settings are relevant.
    class NotificationSettingsScope < TD::Types::Base
      # Notification settings applied to all basic groups and supergroups when the corresponding chat setting has a default
      #   value.
      class GroupChats < TD::Types::NotificationSettingsScope
      end

      # Notification settings applied to all channels when the corresponding chat setting has a default value.
      class ChannelChats < TD::Types::NotificationSettingsScope
      end

      # Notification settings applied to all private and secret chats when the corresponding chat setting has a default
      #   value.
      class PrivateChats < TD::Types::NotificationSettingsScope
      end
    end

    # Contains information about a Telegram Passport authorization form that was requested.
    # 
    # @attr id [Integer] Unique identifier of the authorization form.
    # @attr required_elements [Array<TD::Types::PassportRequiredElement>] Telegram Passport elements that must be
    #   provided to complete the form.
    # @attr privacy_policy_url [TD::Types::String, nil] URL for the privacy policy of the service; may be empty.
    class PassportAuthorizationForm < TD::Types::Base
      # Unique identifier of the authorization form.
      attr_accessor id: Integer

      # Telegram Passport elements that must be
      # provided to complete the form.
      attr_accessor required_elements: ::Array[TD::Types::PassportRequiredElement]

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # URL for the privacy policy of the service; may be empty.
      attr_accessor privacy_policy_url: TD::Types::String?
    end

    # Contains information about notification settings for several chats.
    # 
    # @attr mute_for [Integer] Time left before notifications will be unmuted, in seconds.
    # @attr sound [TD::Types::String] The name of an audio file to be used for notification sounds; only applies to iOS
    #   applications.
    # @attr show_preview [Boolean] True, if message content must be displayed in notifications.
    # @attr disable_pinned_message_notifications [Boolean] True, if notifications for incoming pinned messages will be
    #   created as for an ordinary unread message.
    # @attr disable_mention_notifications [Boolean] True, if notifications for messages with mentions will be created as
    #   for an ordinary unread message.
    class ScopeNotificationSettings < TD::Types::Base
      # Time left before notifications will be unmuted, in seconds.
      attr_accessor mute_for: Integer

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # The name of an audio file to be used for notification sounds; only applies to iOS
      # applications.
      attr_accessor sound: TD::Types::String

      # True, if message content must be displayed in notifications.
      attr_accessor show_preview: bool

      # True, if notifications for incoming pinned messages will be
      # created as for an ordinary unread message.
      attr_accessor disable_pinned_message_notifications: bool

      # True, if notifications for messages with mentions will be created as
      # for an ordinary unread message.
      attr_accessor disable_mention_notifications: bool
    end

    # Contains statistics about number of new members invited by a user.
    # 
    # @attr user_id [Integer] User identifier.
    # @attr added_member_count [Integer] Number of new members invited by the user.
    class ChatStatisticsInviterInfo < TD::Types::Base
      # User identifier.
      attr_accessor user_id: Integer

      # Number of new members invited by the user.
      attr_accessor added_member_count: Integer
    end

    # Contains the description of an error in a Telegram Passport element; for bots only.
    # 
    # @attr type [TD::Types::PassportElementType] Type of Telegram Passport element that has the error.
    # @attr message [TD::Types::String] Error message.
    # @attr source [TD::Types::InputPassportElementErrorSource] Error source.
    class InputPassportElementError < TD::Types::Base
      # Type of Telegram Passport element that has the error.
      attr_accessor type: TD::Types::PassportElementType

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Error message.
      attr_accessor message: TD::Types::String

      # Error source.
      attr_accessor source: TD::Types::InputPassportElementErrorSource
    end

    # Represents result of checking whether the current session can be used to transfer a chat ownership to another user.
    class CanTransferOwnershipResult < TD::Types::Base
      # The session can be used.
      class Ok < TD::Types::CanTransferOwnershipResult
      end

      # The 2-step verification needs to be enabled first.
      class PasswordNeeded < TD::Types::CanTransferOwnershipResult
      end

      # The session was created recently, user needs to wait.
      # 
      # @attr retry_after [Integer] Time left before the session can be used to transfer ownership of a chat, in seconds.
      class SessionTooFresh < TD::Types::CanTransferOwnershipResult
        # Time left before the session can be used to transfer ownership of a chat, in seconds.
        attr_accessor retry_after: Integer
      end

      # The 2-step verification was enabled recently, user needs to wait.
      # 
      # @attr retry_after [Integer] Time left before the session can be used to transfer ownership of a chat, in seconds.
      class PasswordTooFresh < TD::Types::CanTransferOwnershipResult
        # Time left before the session can be used to transfer ownership of a chat, in seconds.
        attr_accessor retry_after: Integer
      end
    end

    # Represents result of checking whether a name can be used for a new sticker set.
    class CheckStickerSetNameResult < TD::Types::Base
      # The name can be set.
      class Ok < TD::Types::CheckStickerSetNameResult
      end

      # The name is invalid.
      class NameInvalid < TD::Types::CheckStickerSetNameResult
      end

      # The name is occupied.
      class NameOccupied < TD::Types::CheckStickerSetNameResult
      end
    end

    # Describes a group of video synchronization source identifiers.
    # 
    # @attr semantics [TD::Types::String] The semantics of sources, one of "SIM" or "FID".
    # @attr source_ids [Array<Integer>] The list of synchronization source identifiers.
    class GroupCallVideoSourceGroup < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # The semantics of sources, one of "SIM" or "FID".
      attr_accessor semantics: TD::Types::String

      # The list of synchronization source identifiers.
      attr_accessor source_ids: ::Array[Integer]
    end

    # Describes a Vertical alignment of a table cell content.
    class PageBlockVerticalAlignment < TD::Types::Base
      # The content must be top-aligned.
      class Top < TD::Types::PageBlockVerticalAlignment
      end

      # The content must be bottom-aligned.
      class Bottom < TD::Types::PageBlockVerticalAlignment
      end

      # The content must be middle-aligned.
      class Middle < TD::Types::PageBlockVerticalAlignment
      end
    end

    # Contains the description of an error in a Telegram Passport element.
    class PassportElementErrorSource < TD::Types::Base
      # The file contains an error.
      # The error will be considered resolved when the file changes.
      # 
      # @attr file_index [Integer] Index of a file with the error.
      class File < TD::Types::PassportElementErrorSource
        # Index of a file with the error.
        attr_accessor file_index: Integer
      end

      # The list of attached files contains an error.
      # The error will be considered resolved when the list of files changes.
      class Files < TD::Types::PassportElementErrorSource
      end

      # The selfie with the document contains an error.
      # The error will be considered resolved when the file with the selfie changes.
      class Selfie < TD::Types::PassportElementErrorSource
      end

      # One of the data fields contains an error.
      # The error will be considered resolved when the value of the field changes.
      # 
      # @attr field_name [TD::Types::String] Field name.
      class DataField < TD::Types::PassportElementErrorSource
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Field name.
        attr_accessor field_name: TD::Types::String
      end

      # The front side of the document contains an error.
      # The error will be considered resolved when the file with the front side changes.
      class FrontSide < TD::Types::PassportElementErrorSource
      end

      # The element contains an error in an unspecified place.
      # The error will be considered resolved when new data is added.
      class Unspecified < TD::Types::PassportElementErrorSource
      end

      # The reverse side of the document contains an error.
      # The error will be considered resolved when the file with the reverse side changes.
      class ReverseSide < TD::Types::PassportElementErrorSource
      end

      # One of files with the translation of the document contains an error.
      # The error will be considered resolved when the file changes.
      # 
      # @attr file_index [Integer] Index of a file with the error.
      class TranslationFile < TD::Types::PassportElementErrorSource
        # Index of a file with the error.
        attr_accessor file_index: Integer
      end

      # The translation of the document contains an error.
      # The error will be considered resolved when the list of translation files changes.
      class TranslationFiles < TD::Types::PassportElementErrorSource
      end
    end

    # Contains information about a Telegram Passport elements and corresponding errors.
    # 
    # @attr elements [Array<TD::Types::PassportElement>] Telegram Passport elements.
    # @attr errors [Array<TD::Types::PassportElementError>] Errors in the elements that are already available.
    class PassportElementsWithErrors < TD::Types::Base
      # Telegram Passport elements.
      attr_accessor elements: ::Array[TD::Types::PassportElement]

      # Errors in the elements that are already available.
      attr_accessor errors: ::Array[TD::Types::PassportElementError]
    end

    # Contains auto-download settings presets for the current user.
    # 
    # @attr low [TD::Types::AutoDownloadSettings] Preset with lowest settings; supposed to be used by default when
    #   roaming.
    # @attr medium [TD::Types::AutoDownloadSettings] Preset with medium settings; supposed to be used by default when
    #   using mobile data.
    # @attr high [TD::Types::AutoDownloadSettings] Preset with highest settings; supposed to be used by default when
    #   connected on Wi-Fi.
    class AutoDownloadSettingsPresets < TD::Types::Base
      # Preset with lowest settings; supposed to be used by default when
      # roaming.
      attr_accessor low: TD::Types::AutoDownloadSettings

      # Preset with medium settings; supposed to be used by default when
      # using mobile data.
      attr_accessor medium: TD::Types::AutoDownloadSettings

      # Preset with highest settings; supposed to be used by default when
      # connected on Wi-Fi.
      attr_accessor high: TD::Types::AutoDownloadSettings
    end

    # Describes a horizontal alignment of a table cell content.
    class PageBlockHorizontalAlignment < TD::Types::Base
      # The content must be left-aligned.
      class Left < TD::Types::PageBlockHorizontalAlignment
      end

      # The content must be right-aligned.
      class Right < TD::Types::PageBlockHorizontalAlignment
      end

      # The content must be center-aligned.
      class Center < TD::Types::PageBlockHorizontalAlignment
      end
    end

    # Contains the storage usage statistics for a specific file type.
    # 
    # @attr file_type [TD::Types::FileType] File type.
    # @attr size [Integer] Total size of the files, in bytes.
    # @attr count [Integer] Total number of files.
    class StorageStatisticsByFileType < TD::Types::Base
      # File type.
      attr_accessor file_type: TD::Types::FileType

      # Total size of the files, in bytes.
      attr_accessor size: Integer

      # Total number of files.
      attr_accessor count: Integer
    end

    # Contains information about a group call participant's video channel.
    # 
    # @attr source_groups [Array<TD::Types::GroupCallVideoSourceGroup>] List of synchronization source groups of the
    #   video.
    # @attr endpoint_id [TD::Types::String] Video channel endpoint identifier.
    # @attr is_paused [Boolean] True if the video is paused.
    #   This flag needs to be ignored, if new video frames are received.
    class GroupCallParticipantVideoInfo < TD::Types::Base
      # List of synchronization source groups of the
      # video.
      attr_accessor source_groups: ::Array[TD::Types::GroupCallVideoSourceGroup]

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Video channel endpoint identifier.
      attr_accessor endpoint_id: TD::Types::String

      # True if the video is paused.
      # This flag needs to be ignored, if new video frames are received.
      attr_accessor is_paused: bool
    end

    # Contains statistics about messages sent by a user.
    # 
    # @attr user_id [Integer] User identifier.
    # @attr sent_message_count [Integer] Number of sent messages.
    # @attr average_character_count [Integer] Average number of characters in sent messages; 0 if unknown.
    class ChatStatisticsMessageSenderInfo < TD::Types::Base
      # User identifier.
      attr_accessor user_id: Integer

      # Number of sent messages.
      attr_accessor sent_message_count: Integer

      # Average number of characters in sent messages; 0 if unknown.
      attr_accessor average_character_count: Integer
    end

    # Contains the description of an error in a Telegram Passport element; for bots only.
    class InputPassportElementErrorSource < TD::Types::Base
      # The file contains an error.
      # The error is considered resolved when the file changes.
      # 
      # @attr file_hash [String] Current hash of the file which has the error.
      class File < TD::Types::InputPassportElementErrorSource
        # Current hash of the file which has the error.
        attr_accessor file_hash: String
      end

      # The list of attached files contains an error.
      # The error is considered resolved when the file list changes.
      # 
      # @attr file_hashes [Array<String>] Current hashes of all attached files.
      class Files < TD::Types::InputPassportElementErrorSource
        # Current hashes of all attached files.
        attr_accessor file_hashes: ::Array[String]
      end

      # The selfie contains an error.
      # The error is considered resolved when the file with the selfie changes.
      # 
      # @attr file_hash [String] Current hash of the file containing the selfie.
      class Selfie < TD::Types::InputPassportElementErrorSource
        # Current hash of the file containing the selfie.
        attr_accessor file_hash: String
      end

      # A data field contains an error.
      # The error is considered resolved when the field's value changes.
      # 
      # @attr field_name [TD::Types::String] Field name.
      # @attr data_hash [String] Current data hash.
      class DataField < TD::Types::InputPassportElementErrorSource
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
        # Field name.
        attr_accessor field_name: TD::Types::String

        # Current data hash.
        attr_accessor data_hash: String
      end

      # The front side of the document contains an error.
      # The error is considered resolved when the file with the front side of the document changes.
      # 
      # @attr file_hash [String] Current hash of the file containing the front side.
      class FrontSide < TD::Types::InputPassportElementErrorSource
        # Current hash of the file containing the front side.
        attr_accessor file_hash: String
      end

      # The element contains an error in an unspecified place.
      # The error will be considered resolved when new data is added.
      # 
      # @attr element_hash [String] Current hash of the entire element.
      class Unspecified < TD::Types::InputPassportElementErrorSource
        # Current hash of the entire element.
        attr_accessor element_hash: String
      end

      # The reverse side of the document contains an error.
      # The error is considered resolved when the file with the reverse side of the document changes.
      # 
      # @attr file_hash [String] Current hash of the file containing the reverse side.
      class ReverseSide < TD::Types::InputPassportElementErrorSource
        # Current hash of the file containing the reverse side.
        attr_accessor file_hash: String
      end

      # One of the files containing the translation of the document contains an error.
      # The error is considered resolved when the file with the translation changes.
      # 
      # @attr file_hash [String] Current hash of the file containing the translation.
      class TranslationFile < TD::Types::InputPassportElementErrorSource
        # Current hash of the file containing the translation.
        attr_accessor file_hash: String
      end

      # The translation of the document contains an error.
      # The error is considered resolved when the list of files changes.
      # 
      # @attr file_hashes [Array<String>] Current hashes of all files with the translation.
      class TranslationFiles < TD::Types::InputPassportElementErrorSource
        # Current hashes of all files with the translation.
        attr_accessor file_hashes: ::Array[String]
      end
    end

    # Contains settings for the authentication of the user's phone number.
    # 
    # @attr allow_flash_call [Boolean] Pass true if the authentication code may be sent via a flash call to the specified
    #   phone number.
    # @attr allow_missed_call [Boolean] Pass true if the authentication code may be sent via a missed call to the
    #   specified phone number.
    # @attr is_current_phone_number [Boolean] Pass true if the authenticated phone number is used on the current device.
    # @attr allow_sms_retriever_api [Boolean] For official applications only.
    #   True, if the application can use Android SMS Retriever API (requires Google Play Services >= 10.2) to
    #   automatically receive the authentication code from the SMS.
    #   See https://developers.google.com/identity/sms-retriever/ for more details.
    # @attr authentication_tokens [Array<TD::Types::String>] List of up to 20 authentication tokens, recently received in
    #   updateOption("authentication_token") in previously logged out sessions.
    class PhoneNumberAuthenticationSettings < TD::Types::Base
      # Pass true if the authentication code may be sent via a flash call to the specified
      # phone number.
      attr_accessor allow_flash_call: bool

      # Pass true if the authentication code may be sent via a missed call to the
      # specified phone number.
      attr_accessor allow_missed_call: bool

      # Pass true if the authenticated phone number is used on the current device.
      attr_accessor is_current_phone_number: bool

      # For official applications only.
      # True, if the application can use Android SMS Retriever API (requires Google Play Services >= 10.2) to
      # automatically receive the authentication code from the SMS.
      # See https://developers.google.com/identity/sms-retriever/ for more details.
      attr_accessor allow_sms_retriever_api: bool

      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # List of up to 20 authentication tokens, recently received in
      # updateOption("authentication_token") in previously logged out sessions.
      attr_accessor authentication_tokens: ::Array[TD::Types::String]
    end

    # Information about the email address authentication code that was sent.
    # 
    # @attr email_address_pattern [TD::Types::String] Pattern of the email address to which an authentication code was
    #   sent.
    # @attr length [Integer] Length of the code; 0 if unknown.
    class EmailAddressAuthenticationCodeInfo < TD::Types::Base
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
      # Pattern of the email address to which an authentication code was
      # sent.
      attr_accessor email_address_pattern: TD::Types::String

      # Length of the code; 0 if unknown.
      attr_accessor length: Integer
    end

    # Contains statistics about interactions with a message.
    # 
    # @attr message_id [Integer] Message identifier.
    # @attr view_count [Integer] Number of times the message was viewed.
    # @attr forward_count [Integer] Number of times the message was forwarded.
    class ChatStatisticsMessageInteractionInfo < TD::Types::Base
      # Message identifier.
      attr_accessor message_id: Integer

      # Number of times the message was viewed.
      attr_accessor view_count: Integer

      # Number of times the message was forwarded.
      attr_accessor forward_count: Integer
    end

    # Contains statistics about administrator actions done by a user.
    # 
    # @attr user_id [Integer] Administrator user identifier.
    # @attr deleted_message_count [Integer] Number of messages deleted by the administrator.
    # @attr banned_user_count [Integer] Number of users banned by the administrator.
    # @attr restricted_user_count [Integer] Number of users restricted by the administrator.
    class ChatStatisticsAdministratorActionsInfo < TD::Types::Base
      # Administrator user identifier.
      attr_accessor user_id: Integer

      # Number of messages deleted by the administrator.
      attr_accessor deleted_message_count: Integer

      # Number of users banned by the administrator.
      attr_accessor banned_user_count: Integer

      # Number of users restricted by the administrator.
      attr_accessor restricted_user_count: Integer
    end
  end

  # This is a generated module from current TDLib scheme
  # It contains all available TDLib methods
  module ClientMethods
    # Accepts an incoming call.
    # 
    # _@param_ `call_id` — Call identifier.
    # 
    # _@param_ `protocol` — The call protocols supported by the application.
    def accept_call: (call_id: Integer, protocol: TD::Types::CallProtocol) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Accepts Telegram terms of services.
    # 
    # _@param_ `terms_of_service_id` — Terms of service identifier.
    def accept_terms_of_service: (terms_of_service_id: TD::Types::String) -> TD::Types::Ok

    # Adds a new member to a chat.
    # Members can't be added to private or secret chats.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `user_id` — Identifier of the user.
    # 
    # _@param_ `forward_limit` — The number of earlier messages from the chat to be forwarded to the new member; up to 100. Ignored for supergroups and channels, or if the added user is a bot.
    def add_chat_member: (chat_id: Integer, user_id: Integer, forward_limit: Integer) -> TD::Types::Ok

    # Adds multiple new members to a chat.
    # Currently, this method is only available for supergroups and channels.
    # This method can't be used to join a chat.
    # Members can't be added to a channel if it has more than 200 members.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `user_ids` — Identifiers of the users to be added to the chat. The maximum number of added users is 20 for supergroups and 100 for channels.
    def add_chat_members: (chat_id: Integer, user_ids: ::Array[Integer]) -> TD::Types::Ok

    # Adds a chat to a chat list.
    # A chat can't be simultaneously in Main and Archive chat lists, so it is automatically removed from another one if
    #   needed.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `chat_list` — The chat list. Use getChatListsToAddChat to get suitable chat lists.
    def add_chat_to_list: (chat_id: Integer, chat_list: TD::Types::ChatList) -> TD::Types::Ok

    # Adds a user to the contact list or edits an existing contact by their user identifier.
    # 
    # _@param_ `contact` — The contact to add or edit; phone number can be empty and needs to be specified only if known, vCard is ignored.
    # 
    # _@param_ `share_phone_number` — True, if the new contact needs to be allowed to see current user's phone number. A corresponding rule to {TD::Types::UserPrivacySetting::ShowPhoneNumber} will be added if needed. Use the field userFullInfo.need_phone_number_privacy_exception to check whether the current user needs to be asked to share their phone number.
    def add_contact: (?contact: TD::Types::Contact?, share_phone_number: bool) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Adds a custom server language pack to the list of installed language packs in current localization target.
    # Can be called before authorization.
    # 
    # _@param_ `language_pack_id` — Identifier of a language pack to be added; may be different from a name that is used in an "https://t.me/setlanguage/" link.
    def add_custom_server_language_pack: (language_pack_id: TD::Types::String) -> TD::Types::Ok

    # Adds a new sticker to the list of favorite stickers.
    # The new sticker is added to the top of the list.
    # If the sticker was already in the list, it is removed from the list first.
    # Only stickers belonging to a sticker set can be added to this list.
    # 
    # _@param_ `sticker` — Sticker file to add.
    def add_favorite_sticker: (sticker: TD::Types::InputFile) -> TD::Types::Ok

    # Adds a local message to a chat.
    # The message is persistent across application restarts only if the message database is used.
    # Returns the added message.
    # 
    # _@param_ `chat_id` — Target chat.
    # 
    # _@param_ `sender_id` — Identifier of the sender of the message.
    # 
    # _@param_ `reply_to_message_id` — Identifier of the message to reply to or 0.
    # 
    # _@param_ `disable_notification` — Pass true to disable notification for the message.
    # 
    # _@param_ `input_message_content` — The content of the message to be added.
    def add_local_message: (
                             chat_id: Integer,
                             sender_id: TD::Types::MessageSender,
                             reply_to_message_id: Integer,
                             disable_notification: bool,
                             input_message_content: TD::Types::InputMessageContent
                           ) -> TD::Types::Message

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Adds a message to TDLib internal log.
    # Can be called synchronously.
    # 
    # _@param_ `verbosity_level` — The minimum verbosity level needed for the message to be logged; 0-1023.
    # 
    # _@param_ `text` — Text of a message to log.
    def add_log_message: (verbosity_level: Integer, text: TD::Types::String) -> TD::Types::Ok

    # Adds the specified data to data usage statistics.
    # Can be called before authorization.
    # 
    # _@param_ `entry` — The network statistics entry with the data to be added to statistics.
    def add_network_statistics: (entry: TD::Types::NetworkStatisticsEntry) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Adds a proxy server for network requests.
    # Can be called before authorization.
    # 
    # _@param_ `server` — Proxy server IP address.
    # 
    # _@param_ `port` — Proxy server port.
    # 
    # _@param_ `enable` — True, if the proxy needs to be enabled.
    # 
    # _@param_ `type` — Proxy type.
    def add_proxy: (
                     server: TD::Types::String,
                     port: Integer,
                     enable: bool,
                     _type: TD::Types::ProxyType
                   ) -> TD::Types::Proxy

    # Manually adds a new sticker to the list of recently used stickers.
    # The new sticker is added to the top of the list.
    # If the sticker was already in the list, it is removed from the list first.
    # Only stickers belonging to a sticker set can be added to this list.
    # 
    # _@param_ `is_attached` — Pass true to add the sticker to the list of stickers recently attached to photo or video files; pass false to add the sticker to the list of recently sent stickers.
    # 
    # _@param_ `sticker` — Sticker file to add.
    def add_recent_sticker: (is_attached: bool, sticker: TD::Types::InputFile) -> TD::Types::Stickers

    # Adds a chat to the list of recently found chats.
    # The chat is added to the beginning of the list.
    # If the chat is already in the list, it will be removed from the list first.
    # 
    # _@param_ `chat_id` — Identifier of the chat to add.
    def add_recently_found_chat: (chat_id: Integer) -> TD::Types::Ok

    # Manually adds a new animation to the list of saved animations.
    # The new animation is added to the beginning of the list.
    # If the animation was already in the list, it is removed first.
    # Only non-secret video animations with MIME type "video/mp4" can be added to the list.
    # 
    # _@param_ `animation` — The animation file to be added. Only animations known to the server (i.e., successfully sent via a message) can be added to the list.
    def add_saved_animation: (animation: TD::Types::InputFile) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Adds a new sticker to a set; for bots only.
    # Returns the sticker set.
    # 
    # _@param_ `user_id` — Sticker set owner.
    # 
    # _@param_ `name` — Sticker set name.
    # 
    # _@param_ `sticker` — Sticker to add to the set.
    def add_sticker_to_set: (user_id: Integer, name: TD::Types::String, sticker: TD::Types::InputSticker) -> TD::Types::StickerSet

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Sets the result of a callback query; for bots only.
    # 
    # _@param_ `callback_query_id` — Identifier of the callback query.
    # 
    # _@param_ `text` — Text of the answer.
    # 
    # _@param_ `show_alert` — If true, an alert must be shown to the user instead of a toast notification.
    # 
    # _@param_ `url` — URL to be opened.
    # 
    # _@param_ `cache_time` — Time during which the result of the query can be cached, in seconds.
    def answer_callback_query: (
                                 callback_query_id: Integer,
                                 text: TD::Types::String,
                                 show_alert: bool,
                                 url: TD::Types::String,
                                 cache_time: Integer
                               ) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Answers a custom query; for bots only.
    # 
    # _@param_ `custom_query_id` — Identifier of a custom query.
    # 
    # _@param_ `data` — JSON-serialized answer to the query.
    def answer_custom_query: (custom_query_id: Integer, data: TD::Types::String) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Sets the result of an inline query; for bots only.
    # 
    # _@param_ `inline_query_id` — Identifier of the inline query.
    # 
    # _@param_ `is_personal` — True, if the result of the query can be cached for the specified user.
    # 
    # _@param_ `results` — The results of the query.
    # 
    # _@param_ `cache_time` — Allowed time to cache the results of the query, in seconds.
    # 
    # _@param_ `next_offset` — Offset for the next inline query; pass an empty string if there are no more results.
    # 
    # _@param_ `switch_pm_text` — If non-empty, this text must be shown on the button that opens a private chat with the bot and sends a start message to the bot with the parameter switch_pm_parameter.
    # 
    # _@param_ `switch_pm_parameter` — The parameter for the bot start message.
    def answer_inline_query: (
                               inline_query_id: Integer,
                               is_personal: bool,
                               results: ::Array[TD::Types::InputInlineQueryResult],
                               cache_time: Integer,
                               next_offset: TD::Types::String,
                               switch_pm_text: TD::Types::String,
                               switch_pm_parameter: TD::Types::String
                             ) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Sets the result of a pre-checkout query; for bots only.
    # 
    # _@param_ `pre_checkout_query_id` — Identifier of the pre-checkout query.
    # 
    # _@param_ `error_message` — An error message, empty on success.
    def answer_pre_checkout_query: (pre_checkout_query_id: Integer, error_message: TD::Types::String) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Sets the result of a shipping query; for bots only.
    # 
    # _@param_ `shipping_query_id` — Identifier of the shipping query.
    # 
    # _@param_ `shipping_options` — Available shipping options.
    # 
    # _@param_ `error_message` — An error message, empty on success.
    def answer_shipping_query: (shipping_query_id: Integer, shipping_options: ::Array[TD::Types::ShippingOption], error_message: TD::Types::String) -> TD::Types::Ok

    # Bans a member in a chat.
    # Members can't be banned in private or secret chats.
    # In supergroups and channels, the user will not be able to return to the group on their own using invite links,
    #   etc., unless unbanned first.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `member_id` — Member identifier.
    # 
    # _@param_ `banned_until_date` — Point in time (Unix timestamp) when the user will be unbanned; 0 if never. If the user is banned for more than 366 days or for less than 30 seconds from the current time, the user is considered to be banned forever. Ignored in basic groups and if a chat is banned.
    # 
    # _@param_ `revoke_messages` — Pass true to delete all messages in the chat for the user that is being removed. Always true for supergroups and channels.
    def ban_chat_member: (
                           chat_id: Integer,
                           member_id: TD::Types::MessageSender,
                           banned_until_date: Integer,
                           revoke_messages: bool
                         ) -> TD::Types::Ok

    # Blocks an original sender of a message in the Replies chat.
    # 
    # _@param_ `message_id` — The identifier of an incoming message in the Replies chat.
    # 
    # _@param_ `delete_message` — Pass true if the message must be deleted.
    # 
    # _@param_ `delete_all_messages` — Pass true if all messages from the same sender must be deleted.
    # 
    # _@param_ `report_spam` — Pass true if the sender must be reported to the Telegram moderators.
    def block_message_sender_from_replies: (
                                             message_id: Integer,
                                             delete_message: bool,
                                             delete_all_messages: bool,
                                             report_spam: bool
                                           ) -> TD::Types::Ok

    # Checks whether the current session can be used to transfer a chat ownership to another user.
    def can_transfer_ownership: () -> TD::Types::CanTransferOwnershipResult

    # Stops the downloading of a file.
    # If a file has already been downloaded, does nothing.
    # 
    # _@param_ `file_id` — Identifier of a file to stop downloading.
    # 
    # _@param_ `only_if_pending` — Pass true to stop downloading only if it hasn't been started, i.e. request hasn't been sent to server.
    def cancel_download_file: (file_id: Integer, only_if_pending: bool) -> TD::Types::Ok

    # Cancels reset of 2-step verification password.
    # The method can be called if passwordState.pending_reset_date > 0.
    def cancel_password_reset: () -> TD::Types::Ok

    # Stops the uploading of a file.
    # Supported only for files uploaded by using uploadFile.
    # For other files the behavior is undefined.
    # 
    # _@param_ `file_id` — Identifier of the file to stop uploading.
    def cancel_upload_file: (file_id: Integer) -> TD::Types::Ok

    # Changes imported contacts using the list of contacts saved on the device.
    # Imports newly added contacts and, if at least the file database is enabled, deletes recently deleted contacts.
    # Query result depends on the result of the previous query, so only one query is possible at the same time.
    # 
    # _@param_ `contacts` — The new list of contacts, contact's vCard are ignored and are not imported.
    def change_imported_contacts: (contacts: ::Array[TD::Types::Contact]) -> TD::Types::ImportedContacts

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Changes the phone number of the user and sends an authentication code to the user's new phone number.
    # On success, returns information about the sent code.
    # 
    # _@param_ `phone_number` — The new phone number of the user in international format.
    # 
    # _@param_ `settings` — Settings for the authentication of the user's phone number; pass null to use default settings.
    def change_phone_number: (phone_number: TD::Types::String, settings: TD::Types::PhoneNumberAuthenticationSettings) -> TD::Types::AuthenticationCodeInfo

    # Installs/uninstalls or activates/archives a sticker set.
    # 
    # _@param_ `set_id` — Identifier of the sticker set.
    # 
    # _@param_ `is_installed` — The new value of is_installed.
    # 
    # _@param_ `is_archived` — The new value of is_archived. A sticker set can't be installed and archived simultaneously.
    def change_sticker_set: (set_id: Integer, is_installed: bool, is_archived: bool) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Checks the authentication token of a bot; to log in as a bot.
    # Works only when the current authorization state is authorizationStateWaitPhoneNumber.
    # Can be used instead of setAuthenticationPhoneNumber and checkAuthenticationCode to log in.
    # 
    # _@param_ `token` — The bot token.
    def check_authentication_bot_token: (token: TD::Types::String) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Checks the authentication code.
    # Works only when the current authorization state is authorizationStateWaitCode.
    # 
    # _@param_ `code` — Authentication code to check.
    def check_authentication_code: (code: TD::Types::String) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Checks the authentication password for correctness.
    # Works only when the current authorization state is authorizationStateWaitPassword.
    # 
    # _@param_ `password` — The password to check.
    def check_authentication_password: (password: TD::Types::String) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Checks whether a password recovery code sent to an email address is valid.
    # Works only when the current authorization state is authorizationStateWaitPassword.
    # 
    # _@param_ `recovery_code` — Recovery code to check.
    def check_authentication_password_recovery_code: (recovery_code: TD::Types::String) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Checks the authentication code sent to confirm a new phone number of the user.
    # 
    # _@param_ `code` — Authentication code to check.
    def check_change_phone_number_code: (code: TD::Types::String) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Checks the validity of an invite link for a chat and returns information about the corresponding chat.
    # 
    # _@param_ `invite_link` — Invite link to be checked.
    def check_chat_invite_link: (invite_link: TD::Types::String) -> TD::Types::ChatInviteLinkInfo

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Checks whether a username can be set for a chat.
    # 
    # _@param_ `chat_id` — Chat identifier; must be identifier of a supergroup chat, or a channel chat, or a private chat with self, or zero if the chat is being created.
    # 
    # _@param_ `username` — Username to be checked.
    def check_chat_username: (chat_id: Integer, username: TD::Types::String) -> TD::Types::CheckChatUsernameResult

    # Checks whether the maximum number of owned public chats has been reached.
    # Returns corresponding error if the limit was reached.
    # 
    # _@param_ `type` — Type of the public chats, for which to check the limit.
    def check_created_public_chats_limit: (_type: TD::Types::PublicChatType) -> TD::Types::Ok

    # Checks the database encryption key for correctness.
    # Works only when the current authorization state is authorizationStateWaitEncryptionKey.
    # 
    # _@param_ `encryption_key` — Encryption key to check or set up.
    def check_database_encryption_key: (encryption_key: String) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Checks the email address verification code for Telegram Passport.
    # 
    # _@param_ `code` — Verification code to check.
    def check_email_address_verification_code: (code: TD::Types::String) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Checks whether a 2-step verification password recovery code sent to an email address is valid.
    # 
    # _@param_ `recovery_code` — Recovery code to check.
    def check_password_recovery_code: (recovery_code: TD::Types::String) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Checks phone number confirmation code.
    # 
    # _@param_ `code` — Confirmation code to check.
    def check_phone_number_confirmation_code: (code: TD::Types::String) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Checks the phone number verification code for Telegram Passport.
    # 
    # _@param_ `code` — Verification code to check.
    def check_phone_number_verification_code: (code: TD::Types::String) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Checks the 2-step verification recovery email address verification code.
    # 
    # _@param_ `code` — Verification code to check.
    def check_recovery_email_address_code: (code: TD::Types::String) -> TD::Types::PasswordState

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Checks whether a name can be used for a new sticker set.
    # 
    # _@param_ `name` — Name to be checked.
    def check_sticker_set_name: (name: TD::Types::String) -> TD::Types::CheckStickerSetNameResult

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Removes potentially dangerous characters from the name of a file.
    # The encoding of the file name is supposed to be UTF-8.
    # Returns an empty string on failure.
    # Can be called synchronously.
    # 
    # _@param_ `file_name` — File name or path to the file.
    def clean_file_name: (file_name: TD::Types::String) -> TD::Types::Text

    # Clears draft messages in all chats.
    # 
    # _@param_ `exclude_secret_chats` — If true, local draft messages in secret chats will not be cleared.
    def clear_all_draft_messages: (exclude_secret_chats: bool) -> TD::Types::Ok

    # Clears all imported contacts, contact list remains unchanged.
    def clear_imported_contacts: () -> TD::Types::Ok

    # Clears the list of recently used stickers.
    # 
    # _@param_ `is_attached` — Pass true to clear the list of stickers recently attached to photo or video files; pass false to clear the list of recently sent stickers.
    def clear_recent_stickers: (is_attached: bool) -> TD::Types::Ok

    # Clears the list of recently found chats.
    def clear_recently_found_chats: () -> TD::Types::Ok

    # Informs TDLib that a message with an animated emoji was clicked by the user.
    # Returns a big animated sticker to be played or a 404 error if usual animation needs to be played.
    # 
    # _@param_ `chat_id` — Chat identifier of the message.
    # 
    # _@param_ `message_id` — Identifier of the clicked message.
    def click_animated_emoji_message: (chat_id: Integer, message_id: Integer) -> TD::Types::Sticker

    # Closes the TDLib instance.
    # All databases will be flushed to disk and properly closed.
    # After the close completes, updateAuthorizationState with authorizationStateClosed will be sent.
    # Can be called before initialization.
    def close: () -> TD::Types::Ok

    # Informs TDLib that the chat is closed by the user.
    # Many useful activities depend on the chat being opened or closed.
    # 
    # _@param_ `chat_id` — Chat identifier.
    def close_chat: (chat_id: Integer) -> TD::Types::Ok

    # Closes a secret chat, effectively transferring its state to secretChatStateClosed.
    # 
    # _@param_ `secret_chat_id` — Secret chat identifier.
    def close_secret_chat: (secret_chat_id: Integer) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Confirms QR code authentication on another device.
    # Returns created session on success.
    # 
    # _@param_ `link` — A link from a QR code. The link must be scanned by the in-app camera.
    def confirm_qr_code_authentication: (link: TD::Types::String) -> TD::Types::Session

    # Returns an existing chat corresponding to a known basic group.
    # 
    # _@param_ `basic_group_id` — Basic group identifier.
    # 
    # _@param_ `force` — If true, the chat will be created without network request. In this case all information about the chat except its type, title and photo can be incorrect.
    def create_basic_group_chat: (basic_group_id: Integer, force: bool) -> TD::Types::Chat

    # Creates a new call.
    # 
    # _@param_ `user_id` — Identifier of the user to be called.
    # 
    # _@param_ `protocol` — The call protocols supported by the application.
    # 
    # _@param_ `is_video` — True, if a video call needs to be created.
    def create_call: (user_id: Integer, protocol: TD::Types::CallProtocol, is_video: bool) -> TD::Types::CallId

    # Creates new chat filter.
    # Returns information about the created chat filter.
    # 
    # _@param_ `filter` — Chat filter.
    def create_chat_filter: (filter: TD::Types::ChatFilter) -> TD::Types::ChatFilterInfo

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Creates a new invite link for a chat.
    # Available for basic groups, supergroups, and channels.
    # Requires administrator privileges and can_invite_users right in the chat.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `name` — Invite link name; 0-32 characters.
    # 
    # _@param_ `expiration_date` — Point in time (Unix timestamp) when the link will expire; pass 0 if never.
    # 
    # _@param_ `member_limit` — The maximum number of chat members that can join the chat via the link simultaneously; 0-99999; pass 0 if not limited.
    # 
    # _@param_ `creates_join_request` — True, if the link only creates join request. If true, member_limit must not be specified.
    def create_chat_invite_link: (
                                   chat_id: Integer,
                                   name: TD::Types::String,
                                   expiration_date: Integer,
                                   member_limit: Integer,
                                   creates_join_request: bool
                                 ) -> TD::Types::ChatInviteLink

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Creates a new basic group and sends a corresponding messageBasicGroupChatCreate.
    # Returns the newly created chat.
    # 
    # _@param_ `user_ids` — Identifiers of users to be added to the basic group.
    # 
    # _@param_ `title` — Title of the new basic group; 1-128 characters.
    def create_new_basic_group_chat: (user_ids: ::Array[Integer], title: TD::Types::String) -> TD::Types::Chat

    # Creates a new secret chat.
    # Returns the newly created chat.
    # 
    # _@param_ `user_id` — Identifier of the target user.
    def create_new_secret_chat: (user_id: Integer) -> TD::Types::Chat

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Creates a new sticker set.
    # Returns the newly created sticker set.
    # 
    # _@param_ `user_id` — Sticker set owner; ignored for regular users.
    # 
    # _@param_ `title` — Sticker set title; 1-64 characters.
    # 
    # _@param_ `name` — Sticker set name. Can contain only English letters, digits and underscores. Must end with *"_by_<bot username>"* (*<bot_username>* is case insensitive) for bots; 1-64 characters.
    # 
    # _@param_ `stickers` — List of stickers to be added to the set; must be non-empty. All stickers must have the same format. For TGS stickers, uploadStickerFile must be used before the sticker is shown.
    # 
    # _@param_ `source` — Source of the sticker set; may be empty if unknown.
    def create_new_sticker_set: (
                                  ?user_id: Integer?,
                                  ?title: TD::Types::String?,
                                  ?name: TD::Types::String?,
                                  stickers: ::Array[TD::Types::InputSticker],
                                  ?source: TD::Types::String?
                                ) -> TD::Types::StickerSet

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Creates a new supergroup or channel and sends a corresponding messageSupergroupChatCreate.
    # Returns the newly created chat.
    # 
    # _@param_ `title` — Title of the new chat; 1-128 characters.
    # 
    # _@param_ `is_channel` — True, if a channel chat needs to be created.
    # 
    # _@param_ `description` — Chat description; 0-255 characters.
    # 
    # _@param_ `location` — Chat location if a location-based supergroup is being created; pass null to create an ordinary supergroup chat.
    # 
    # _@param_ `for_import` — True, if the supergroup is created for importing messages using importMessage.
    def create_new_supergroup_chat: (
                                      title: TD::Types::String,
                                      is_channel: bool,
                                      description: TD::Types::String,
                                      location: TD::Types::ChatLocation,
                                      for_import: bool
                                    ) -> TD::Types::Chat

    # Returns an existing chat corresponding to a given user.
    # 
    # _@param_ `user_id` — User identifier.
    # 
    # _@param_ `force` — If true, the chat will be created without network request. In this case all information about the chat except its type, title and photo can be incorrect.
    def create_private_chat: (user_id: Integer, force: bool) -> TD::Types::Chat

    # Returns an existing chat corresponding to a known secret chat.
    # 
    # _@param_ `secret_chat_id` — Secret chat identifier.
    def create_secret_chat: (secret_chat_id: Integer) -> TD::Types::Chat

    # Returns an existing chat corresponding to a known supergroup or channel.
    # 
    # _@param_ `supergroup_id` — Supergroup or channel identifier.
    # 
    # _@param_ `force` — If true, the chat will be created without network request. In this case all information about the chat except its type, title and photo can be incorrect.
    def create_supergroup_chat: (supergroup_id: Integer, force: bool) -> TD::Types::Chat

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Creates a new temporary password for processing payments.
    # 
    # _@param_ `password` — Persistent user password.
    # 
    # _@param_ `valid_for` — Time during which the temporary password will be valid, in seconds; must be between 60 and 86400.
    def create_temporary_password: (password: TD::Types::String, valid_for: Integer) -> TD::Types::TemporaryPasswordState

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Creates a video chat (a group call bound to a chat).
    # Available only for basic groups, supergroups and channels; requires can_manage_video_chats rights.
    # 
    # _@param_ `chat_id` — Chat identifier, in which the video chat will be created.
    # 
    # _@param_ `title` — Group call title; if empty, chat title will be used.
    # 
    # _@param_ `start_date` — Point in time (Unix timestamp) when the group call is supposed to be started by an administrator; 0 to start the video chat immediately. The date must be at least 10 seconds and at most 8 days in the future.
    def create_video_chat: (chat_id: Integer, ?title: TD::Types::String?, start_date: Integer) -> TD::Types::GroupCallId

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Deletes the account of the current user, deleting all information associated with the user from the server.
    # The phone number of the account can be used to create a new account.
    # Can be called before authorization when the current authorization state is authorizationStateWaitPassword.
    # 
    # _@param_ `reason` — The reason why the account was deleted; optional.
    def delete_account: (?reason: TD::Types::String?) -> TD::Types::Ok

    # Deletes all call messages.
    # 
    # _@param_ `revoke` — Pass true to delete the messages for all users.
    def delete_all_call_messages: (revoke: bool) -> TD::Types::Ok

    # Deletes all revoked chat invite links created by a given chat administrator.
    # Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for
    #   other links.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `creator_user_id` — User identifier of a chat administrator, which links will be deleted. Must be an identifier of the current user for non-owner.
    def delete_all_revoked_chat_invite_links: (chat_id: Integer, creator_user_id: Integer) -> TD::Types::Ok

    # Deletes a chat along with all messages in the corresponding chat for all chat members; requires owner privileges.
    # For group chats this will release the username and remove all members.
    # Chats with more than 1000 members can't be deleted using this method.
    # 
    # _@param_ `chat_id` — Chat identifier.
    def delete_chat: (chat_id: Integer) -> TD::Types::Ok

    # Deletes existing chat filter.
    # 
    # _@param_ `chat_filter_id` — Chat filter identifier.
    def delete_chat_filter: (chat_filter_id: Integer) -> TD::Types::Ok

    # Deletes all messages in the chat.
    # Use chat.can_be_deleted_only_for_self and chat.can_be_deleted_for_all_users fields to find whether and how the
    #   method can be applied to the chat.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `remove_from_chat_list` — Pass true if the chat needs to be removed from the chat list.
    # 
    # _@param_ `revoke` — Pass true to delete chat history for all users.
    def delete_chat_history: (chat_id: Integer, remove_from_chat_list: bool, revoke: bool) -> TD::Types::Ok

    # Deletes all messages between the specified dates in a chat.
    # Supported only for private chats and basic groups.
    # Messages sent in the last 30 seconds will not be deleted.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `min_date` — The minimum date of the messages to delete.
    # 
    # _@param_ `max_date` — The maximum date of the messages to delete.
    # 
    # _@param_ `revoke` — Pass true to delete chat messages for all users; private chats only.
    def delete_chat_messages_by_date: (
                                        chat_id: Integer,
                                        min_date: Integer,
                                        max_date: Integer,
                                        revoke: bool
                                      ) -> TD::Types::Ok

    # Deletes all messages sent by the specified message sender in a chat.
    # Supported only for supergroups; requires can_delete_messages administrator privileges.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `sender_id` — Identifier of the sender of messages to delete.
    def delete_chat_messages_by_sender: (chat_id: Integer, sender_id: TD::Types::MessageSender) -> TD::Types::Ok

    # Deletes the default reply markup from a chat.
    # Must be called after a one-time keyboard or a ForceReply reply markup has been used.
    # UpdateChatReplyMarkup will be sent if the reply markup is changed.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `message_id` — The message identifier of the used keyboard.
    def delete_chat_reply_markup: (chat_id: Integer, message_id: Integer) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Deletes commands supported by the bot for the given user scope and language; for bots only.
    # 
    # _@param_ `scope` — The scope to which the commands are relevant; pass null to delete commands in the default bot command scope.
    # 
    # _@param_ `language_code` — A two-letter ISO 639-1 language code or an empty string.
    def delete_commands: (scope: TD::Types::BotCommandScope, language_code: TD::Types::String) -> TD::Types::Ok

    # Deletes a file from the TDLib file cache.
    # 
    # _@param_ `file_id` — Identifier of the file to delete.
    def delete_file: (file_id: Integer) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Deletes all information about a language pack in the current localization target.
    # The language pack which is currently in use (including base language pack) or is being synchronized can't be
    #   deleted.
    # Can be called before authorization.
    # 
    # _@param_ `language_pack_id` — Identifier of the language pack to delete.
    def delete_language_pack: (language_pack_id: TD::Types::String) -> TD::Types::Ok

    # Deletes messages.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `message_ids` — Identifiers of the messages to be deleted.
    # 
    # _@param_ `revoke` — Pass true to delete messages for all chat members. Always true for supergroups, channels and secret chats.
    def delete_messages: (chat_id: Integer, message_ids: ::Array[Integer], revoke: bool) -> TD::Types::Ok

    # Deletes a Telegram Passport element.
    # 
    # _@param_ `type` — Element type.
    def delete_passport_element: (_type: TD::Types::PassportElementType) -> TD::Types::Ok

    # Deletes a profile photo.
    # 
    # _@param_ `profile_photo_id` — Identifier of the profile photo to delete.
    def delete_profile_photo: (profile_photo_id: Integer) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Deletes revoked chat invite links.
    # Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for
    #   other links.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `invite_link` — Invite link to revoke.
    def delete_revoked_chat_invite_link: (chat_id: Integer, invite_link: TD::Types::String) -> TD::Types::Ok

    # Deletes saved credentials for all payment provider bots.
    def delete_saved_credentials: () -> TD::Types::Ok

    # Deletes saved order info.
    def delete_saved_order_info: () -> TD::Types::Ok

    # Closes the TDLib instance, destroying all local data without a proper logout.
    # The current user session will remain in the list of all active sessions.
    # All local data will be destroyed.
    # After the destruction completes updateAuthorizationState with authorizationStateClosed will be sent.
    # Can be called before authorization.
    def destroy: () -> TD::Types::Ok

    # Disables the currently enabled proxy.
    # Can be called before authorization.
    def disable_proxy: () -> TD::Types::Ok

    # Discards a call.
    # 
    # _@param_ `call_id` — Call identifier.
    # 
    # _@param_ `is_disconnected` — True, if the user was disconnected.
    # 
    # _@param_ `duration` — The call duration, in seconds.
    # 
    # _@param_ `is_video` — True, if the call was a video call.
    # 
    # _@param_ `connection_id` — Identifier of the connection used during the call.
    def discard_call: (
                        call_id: Integer,
                        is_disconnected: bool,
                        duration: Integer,
                        is_video: bool,
                        connection_id: Integer
                      ) -> TD::Types::Ok

    # Disconnects all websites from the current user's Telegram account.
    def disconnect_all_websites: () -> TD::Types::Ok

    # Disconnects website from the current user's Telegram account.
    # 
    # _@param_ `website_id` — Website identifier.
    def disconnect_website: (website_id: Integer) -> TD::Types::Ok

    # Downloads a file from the cloud.
    # Download progress and completion of the download will be notified through updateFile updates.
    # 
    # _@param_ `file_id` — Identifier of the file to download.
    # 
    # _@param_ `priority` — Priority of the download (1-32). The higher the priority, the earlier the file will be downloaded. If the priorities of two files are equal, then the last one for which downloadFile was called will be downloaded first.
    # 
    # _@param_ `offset` — The starting position from which the file needs to be downloaded.
    # 
    # _@param_ `limit` — Number of bytes which need to be downloaded starting from the "offset" position before the download will automatically be canceled; use 0 to download without a limit.
    # 
    # _@param_ `synchronous` — If false, this request returns file state just after the download has been started. If true, this request returns file state only after the download has succeeded, has failed, has been canceled or a new downloadFile request with different offset/limit parameters was sent.
    def download_file: (
                         file_id: Integer,
                         priority: Integer,
                         offset: Integer,
                         limit: Integer,
                         synchronous: bool
                       ) -> TD::Types::File

    # Edits existing chat filter.
    # Returns information about the edited chat filter.
    # 
    # _@param_ `chat_filter_id` — Chat filter identifier.
    # 
    # _@param_ `filter` — The edited chat filter.
    def edit_chat_filter: (chat_filter_id: Integer, filter: TD::Types::ChatFilter) -> TD::Types::ChatFilterInfo

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Edits a non-primary invite link for a chat.
    # Available for basic groups, supergroups, and channels.
    # Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for
    #   other links.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `invite_link` — Invite link to be edited.
    # 
    # _@param_ `name` — Invite link name; 0-32 characters.
    # 
    # _@param_ `expiration_date` — Point in time (Unix timestamp) when the link will expire; pass 0 if never.
    # 
    # _@param_ `member_limit` — The maximum number of chat members that can join the chat via the link simultaneously; 0-99999; pass 0 if not limited.
    # 
    # _@param_ `creates_join_request` — True, if the link only creates join request. If true, member_limit must not be specified.
    def edit_chat_invite_link: (
                                 chat_id: Integer,
                                 invite_link: TD::Types::String,
                                 name: TD::Types::String,
                                 expiration_date: Integer,
                                 member_limit: Integer,
                                 creates_join_request: bool
                               ) -> TD::Types::ChatInviteLink

    # Edits information about a custom local language pack in the current localization target.
    # Can be called before authorization.
    # 
    # _@param_ `info` — New information about the custom local language pack.
    def edit_custom_language_pack_info: (info: TD::Types::LanguagePackInfo) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Edits the caption of an inline message sent via a bot; for bots only.
    # 
    # _@param_ `inline_message_id` — Inline message identifier.
    # 
    # _@param_ `reply_markup` — The new message reply markup; pass null if none.
    # 
    # _@param_ `caption` — New message content caption; pass null to remove caption; 0-GetOption("message_caption_length_max") characters.
    def edit_inline_message_caption: (inline_message_id: TD::Types::String, reply_markup: TD::Types::ReplyMarkup, caption: TD::Types::FormattedText) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Edits the content of a live location in an inline message sent via a bot; for bots only.
    # 
    # _@param_ `inline_message_id` — Inline message identifier.
    # 
    # _@param_ `reply_markup` — The new message reply markup; pass null if none.
    # 
    # _@param_ `location` — New location content of the message; pass null to stop sharing the live location.
    # 
    # _@param_ `heading` — The new direction in which the location moves, in degrees; 1-360. Pass 0 if unknown.
    # 
    # _@param_ `proximity_alert_radius` — The new maximum distance for proximity alerts, in meters (0-100000). Pass 0 if the notification is disabled.
    def edit_inline_message_live_location: (
                                             inline_message_id: TD::Types::String,
                                             reply_markup: TD::Types::ReplyMarkup,
                                             location: TD::Types::Location,
                                             heading: Integer,
                                             proximity_alert_radius: Integer
                                           ) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Edits the content of a message with an animation, an audio, a document, a photo or a video in an inline message
    #   sent via a bot; for bots only.
    # 
    # _@param_ `inline_message_id` — Inline message identifier.
    # 
    # _@param_ `reply_markup` — The new message reply markup; pass null if none; for bots only.
    # 
    # _@param_ `input_message_content` — New content of the message. Must be one of the following types: inputMessageAnimation, inputMessageAudio, inputMessageDocument, {TD::Types::InputMessageContent::Photo} or inputMessageVideo.
    def edit_inline_message_media: (inline_message_id: TD::Types::String, reply_markup: TD::Types::ReplyMarkup, input_message_content: TD::Types::InputMessageContent) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Edits the reply markup of an inline message sent via a bot; for bots only.
    # 
    # _@param_ `inline_message_id` — Inline message identifier.
    # 
    # _@param_ `reply_markup` — The new message reply markup; pass null if none.
    def edit_inline_message_reply_markup: (inline_message_id: TD::Types::String, reply_markup: TD::Types::ReplyMarkup) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Edits the text of an inline text or game message sent via a bot; for bots only.
    # 
    # _@param_ `inline_message_id` — Inline message identifier.
    # 
    # _@param_ `reply_markup` — The new message reply markup; pass null if none.
    # 
    # _@param_ `input_message_content` — New text content of the message. Must be of type inputMessageText.
    def edit_inline_message_text: (inline_message_id: TD::Types::String, reply_markup: TD::Types::ReplyMarkup, input_message_content: TD::Types::InputMessageContent) -> TD::Types::Ok

    # Edits the message content caption.
    # Returns the edited message after the edit is completed on the server side.
    # 
    # _@param_ `chat_id` — The chat the message belongs to.
    # 
    # _@param_ `message_id` — Identifier of the message.
    # 
    # _@param_ `reply_markup` — The new message reply markup; pass null if none; for bots only.
    # 
    # _@param_ `caption` — New message content caption; 0-GetOption("message_caption_length_max") characters; pass null to remove caption.
    def edit_message_caption: (
                                chat_id: Integer,
                                message_id: Integer,
                                reply_markup: TD::Types::ReplyMarkup,
                                caption: TD::Types::FormattedText
                              ) -> TD::Types::Message

    # Edits the message content of a live location.
    # Messages can be edited for a limited period of time specified in the live location.
    # Returns the edited message after the edit is completed on the server side.
    # 
    # _@param_ `chat_id` — The chat the message belongs to.
    # 
    # _@param_ `message_id` — Identifier of the message.
    # 
    # _@param_ `reply_markup` — The new message reply markup; pass null if none; for bots only.
    # 
    # _@param_ `location` — New location content of the message; pass null to stop sharing the live location.
    # 
    # _@param_ `heading` — The new direction in which the location moves, in degrees; 1-360. Pass 0 if unknown.
    # 
    # _@param_ `proximity_alert_radius` — The new maximum distance for proximity alerts, in meters (0-100000). Pass 0 if the notification is disabled.
    def edit_message_live_location: (
                                      chat_id: Integer,
                                      message_id: Integer,
                                      reply_markup: TD::Types::ReplyMarkup,
                                      location: TD::Types::Location,
                                      heading: Integer,
                                      proximity_alert_radius: Integer
                                    ) -> TD::Types::Message

    # Edits the content of a message with an animation, an audio, a document, a photo or a video, including message
    #   caption.
    # If only the caption needs to be edited, use editMessageCaption instead.
    # The media can't be edited if the message was set to self-destruct or to a self-destructing media.
    # The type of message content in an album can't be changed with exception of replacing a photo with a video or vice
    #   versa.
    # Returns the edited message after the edit is completed on the server side.
    # 
    # _@param_ `chat_id` — The chat the message belongs to.
    # 
    # _@param_ `message_id` — Identifier of the message.
    # 
    # _@param_ `reply_markup` — The new message reply markup; pass null if none; for bots only.
    # 
    # _@param_ `input_message_content` — New content of the message. Must be one of the following types: inputMessageAnimation, inputMessageAudio, inputMessageDocument, {TD::Types::InputMessageContent::Photo} or inputMessageVideo.
    def edit_message_media: (
                              chat_id: Integer,
                              message_id: Integer,
                              reply_markup: TD::Types::ReplyMarkup,
                              input_message_content: TD::Types::InputMessageContent
                            ) -> TD::Types::Message

    # Edits the message reply markup; for bots only.
    # Returns the edited message after the edit is completed on the server side.
    # 
    # _@param_ `chat_id` — The chat the message belongs to.
    # 
    # _@param_ `message_id` — Identifier of the message.
    # 
    # _@param_ `reply_markup` — The new message reply markup; pass null if none.
    def edit_message_reply_markup: (chat_id: Integer, message_id: Integer, reply_markup: TD::Types::ReplyMarkup) -> TD::Types::Message

    # Edits the time when a scheduled message will be sent.
    # Scheduling state of all messages in the same album or forwarded together with the message will be also changed.
    # 
    # _@param_ `chat_id` — The chat the message belongs to.
    # 
    # _@param_ `message_id` — Identifier of the message.
    # 
    # _@param_ `scheduling_state` — The new message scheduling state; pass null to send the message immediately.
    def edit_message_scheduling_state: (chat_id: Integer, message_id: Integer, scheduling_state: TD::Types::MessageSchedulingState) -> TD::Types::Ok

    # Edits the text of a message (or a text of a game message).
    # Returns the edited message after the edit is completed on the server side.
    # 
    # _@param_ `chat_id` — The chat the message belongs to.
    # 
    # _@param_ `message_id` — Identifier of the message.
    # 
    # _@param_ `reply_markup` — The new message reply markup; pass null if none; for bots only.
    # 
    # _@param_ `input_message_content` — New text content of the message. Must be of type inputMessageText.
    def edit_message_text: (
                             chat_id: Integer,
                             message_id: Integer,
                             reply_markup: TD::Types::ReplyMarkup,
                             input_message_content: TD::Types::InputMessageContent
                           ) -> TD::Types::Message

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Edits an existing proxy server for network requests.
    # Can be called before authorization.
    # 
    # _@param_ `proxy_id` — Proxy identifier.
    # 
    # _@param_ `server` — Proxy server IP address.
    # 
    # _@param_ `port` — Proxy server port.
    # 
    # _@param_ `enable` — True, if the proxy needs to be enabled.
    # 
    # _@param_ `type` — Proxy type.
    def edit_proxy: (
                      proxy_id: Integer,
                      server: TD::Types::String,
                      port: Integer,
                      enable: bool,
                      _type: TD::Types::ProxyType
                    ) -> TD::Types::Proxy

    # Enables a proxy.
    # Only one proxy can be enabled at a time.
    # Can be called before authorization.
    # 
    # _@param_ `proxy_id` — Proxy identifier.
    def enable_proxy: (proxy_id: Integer) -> TD::Types::Ok

    # Ends a group call.
    # Requires groupCall.can_be_managed.
    # 
    # _@param_ `group_call_id` — Group call identifier.
    def end_group_call: (group_call_id: Integer) -> TD::Types::Ok

    # Ends recording of an active group call.
    # Requires groupCall.can_be_managed group call flag.
    # 
    # _@param_ `group_call_id` — Group call identifier.
    def end_group_call_recording: (group_call_id: Integer) -> TD::Types::Ok

    # Ends screen sharing in a joined group call.
    # 
    # _@param_ `group_call_id` — Group call identifier.
    def end_group_call_screen_sharing: (group_call_id: Integer) -> TD::Types::Ok

    # Finishes the file generation.
    # 
    # _@param_ `generation_id` — The identifier of the generation process.
    # 
    # _@param_ `error` — If passed, the file generation has failed and must be terminated; pass null if the file generation succeeded.
    def finish_file_generation: (generation_id: Integer, error: TD::Types::Error) -> TD::Types::Ok

    # Forwards previously sent messages.
    # Returns the forwarded messages in the same order as the message identifiers passed in message_ids.
    # If a message can't be forwarded, null will be returned instead of the message.
    # 
    # _@param_ `chat_id` — Identifier of the chat to which to forward messages.
    # 
    # _@param_ `from_chat_id` — Identifier of the chat from which to forward messages.
    # 
    # _@param_ `message_ids` — Identifiers of the messages to forward. Message identifiers must be in a strictly increasing order. At most 100 messages can be forwarded simultaneously.
    # 
    # _@param_ `options` — Options to be used to send the messages; pass null to use default options.
    # 
    # _@param_ `send_copy` — If true, content of the messages will be copied without reference to the original sender. Always true if the messages are forwarded to a secret chat or are local.
    # 
    # _@param_ `remove_caption` — If true, media caption of message copies will be removed. Ignored if send_copy is false.
    # 
    # _@param_ `only_preview` — If true, messages will not be forwarded and instead fake messages will be returned.
    def forward_messages: (
                            chat_id: Integer,
                            from_chat_id: Integer,
                            message_ids: ::Array[Integer],
                            options: TD::Types::MessageSendOptions,
                            send_copy: bool,
                            remove_caption: bool,
                            only_preview: bool
                          ) -> TD::Types::Messages

    # Returns the period of inactivity after which the account of the current user will automatically be deleted.
    def get_account_ttl: () -> TD::Types::AccountTtl

    # Returns all active live locations that need to be updated by the application.
    # The list is persistent across application restarts only if the message database is used.
    def get_active_live_location_messages: () -> TD::Types::Messages

    # Returns all active sessions of the current user.
    def get_active_sessions: () -> TD::Types::Sessions

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns all available Telegram Passport elements.
    # 
    # _@param_ `password` — Password of the current user.
    def get_all_passport_elements: (password: TD::Types::String) -> TD::Types::PassportElements

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns an animated emoji corresponding to a given emoji.
    # Returns a 404 error if the emoji has no animated emoji.
    # 
    # _@param_ `emoji` — The emoji.
    def get_animated_emoji: (emoji: TD::Types::String) -> TD::Types::AnimatedEmoji

    # Returns application config, provided by the server.
    # Can be called before authorization.
    def get_application_config: () -> TD::Types::JsonValue

    # Returns the link for downloading official Telegram application to be used when the current user invites friends to
    #   Telegram.
    def get_application_download_link: () -> TD::Types::HttpUrl

    # Returns a list of archived sticker sets.
    # 
    # _@param_ `is_masks` — Pass true to return mask stickers sets; pass false to return ordinary sticker sets.
    # 
    # _@param_ `offset_sticker_set_id` — Identifier of the sticker set from which to return the result.
    # 
    # _@param_ `limit` — The maximum number of sticker sets to return; up to 100.
    def get_archived_sticker_sets: (is_masks: bool, offset_sticker_set_id: Integer, limit: Integer) -> TD::Types::StickerSets

    # Returns a list of sticker sets attached to a file.
    # Currently, only photos and videos can have attached sticker sets.
    # 
    # _@param_ `file_id` — File identifier.
    def get_attached_sticker_sets: (file_id: Integer) -> TD::Types::StickerSets

    # Returns the current authorization state; this is an offline request.
    # For informational purposes only.
    # Use updateAuthorizationState instead to maintain the current authorization state.
    # Can be called before initialization.
    def get_authorization_state: () -> TD::Types::AuthorizationState

    # Returns auto-download settings presets for the current user.
    def get_auto_download_settings_presets: () -> TD::Types::AutoDownloadSettingsPresets

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Constructs a persistent HTTP URL for a background.
    # 
    # _@param_ `name` — Background name.
    # 
    # _@param_ `type` — Background type.
    def get_background_url: (name: TD::Types::String, _type: TD::Types::BackgroundType) -> TD::Types::HttpUrl

    # Returns backgrounds installed by the user.
    # 
    # _@param_ `for_dark_theme` — True, if the backgrounds must be ordered for dark theme.
    def get_backgrounds: (for_dark_theme: bool) -> TD::Types::Backgrounds

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns information about a bank card.
    # 
    # _@param_ `bank_card_number` — The bank card number.
    def get_bank_card_info: (bank_card_number: TD::Types::String) -> TD::Types::BankCardInfo

    # Returns information about a basic group by its identifier.
    # This is an offline request if the current user is not a bot.
    # 
    # _@param_ `basic_group_id` — Basic group identifier.
    def get_basic_group: (basic_group_id: Integer) -> TD::Types::BasicGroup

    # Returns full information about a basic group by its identifier.
    # 
    # _@param_ `basic_group_id` — Basic group identifier.
    def get_basic_group_full_info: (basic_group_id: Integer) -> TD::Types::BasicGroupFullInfo

    # Returns users and chats that were blocked by the current user.
    # 
    # _@param_ `offset` — Number of users and chats to skip in the result; must be non-negative.
    # 
    # _@param_ `limit` — The maximum number of users and chats to return; up to 100.
    def get_blocked_message_senders: (offset: Integer, limit: Integer) -> TD::Types::MessageSenders

    # Sends a callback query to a bot and returns an answer.
    # Returns an error with code 502 if the bot fails to answer the query before the query timeout expires.
    # 
    # _@param_ `chat_id` — Identifier of the chat with the message.
    # 
    # _@param_ `message_id` — Identifier of the message from which the query originated.
    # 
    # _@param_ `payload` — Query payload.
    def get_callback_query_answer: (chat_id: Integer, message_id: Integer, payload: TD::Types::CallbackQueryPayload) -> TD::Types::CallbackQueryAnswer

    # Returns information about a message with the callback button that originated a callback query; for bots only.
    # 
    # _@param_ `chat_id` — Identifier of the chat the message belongs to.
    # 
    # _@param_ `message_id` — Message identifier.
    # 
    # _@param_ `callback_query_id` — Identifier of the callback query.
    def get_callback_query_message: (chat_id: Integer, message_id: Integer, callback_query_id: Integer) -> TD::Types::Message

    # Returns information about a chat by its identifier, this is an offline request if the current user is not a bot.
    # 
    # _@param_ `chat_id` — Chat identifier.
    def get_chat: (chat_id: Integer) -> TD::Types::Chat

    # Returns a list of administrators of the chat with their custom titles.
    # 
    # _@param_ `chat_id` — Chat identifier.
    def get_chat_administrators: (chat_id: Integer) -> TD::Types::ChatAdministrators

    # Returns list of message sender identifiers, which can be used to send messages in a chat.
    # 
    # _@param_ `chat_id` — Chat identifier.
    def get_chat_available_message_senders: (chat_id: Integer) -> TD::Types::MessageSenders

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns a list of service actions taken by chat members and administrators in the last 48 hours.
    # Available only for supergroups and channels.
    # Requires administrator rights.
    # Returns results in reverse chronological order (i.
    # e., in order of decreasing event_id).
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `query` — Search query by which to filter events.
    # 
    # _@param_ `from_event_id` — Identifier of an event from which to return results. Use 0 to get results from the latest events.
    # 
    # _@param_ `limit` — The maximum number of events to return; up to 100.
    # 
    # _@param_ `filters` — The types of events to return; pass null to get chat events of all types.
    # 
    # _@param_ `user_ids` — User identifiers by which to filter events. By default, events relating to all users will be returned.
    def get_chat_event_log: (
                              chat_id: Integer,
                              query: TD::Types::String,
                              from_event_id: Integer,
                              limit: Integer,
                              filters: TD::Types::ChatEventLogFilters,
                              user_ids: ::Array[Integer]
                            ) -> TD::Types::ChatEvents

    # Returns information about a chat filter by its identifier.
    # 
    # _@param_ `chat_filter_id` — Chat filter identifier.
    def get_chat_filter: (chat_filter_id: Integer) -> TD::Types::ChatFilter

    # Returns default icon name for a filter.
    # Can be called synchronously.
    # 
    # _@param_ `filter` — Chat filter.
    def get_chat_filter_default_icon_name: (filter: TD::Types::ChatFilter) -> TD::Types::Text

    # Returns messages in a chat.
    # The messages are returned in a reverse chronological order (i.e., in order of decreasing message_id).
    # For optimal performance, the number of returned messages is chosen by TDLib.
    # This is an offline request if only_local is true.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `from_message_id` — Identifier of the message starting from which history must be fetched; use 0 to get results from the last message.
    # 
    # _@param_ `offset` — Specify 0 to get results from exactly the from_message_id or a negative offset up to 99 to get additionally some newer messages.
    # 
    # _@param_ `limit` — The maximum number of messages to be returned; must be positive and can't be greater than 100. If the offset is negative, the limit must be greater than or equal to -offset. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit.
    # 
    # _@param_ `only_local` — If true, returns only messages that are available locally without sending network requests.
    def get_chat_history: (
                            chat_id: Integer,
                            from_message_id: Integer,
                            offset: Integer,
                            limit: Integer,
                            only_local: bool
                          ) -> TD::Types::Messages

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns information about an invite link.
    # Requires administrator privileges and can_invite_users right in the chat to get own links and owner privileges to
    #   get other links.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `invite_link` — Invite link to get.
    def get_chat_invite_link: (chat_id: Integer, invite_link: TD::Types::String) -> TD::Types::ChatInviteLink

    # Returns list of chat administrators with number of their invite links.
    # Requires owner privileges in the chat.
    # 
    # _@param_ `chat_id` — Chat identifier.
    def get_chat_invite_link_counts: (chat_id: Integer) -> TD::Types::ChatInviteLinkCounts

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns chat members joined a chat via an invite link.
    # Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for
    #   other links.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `invite_link` — Invite link for which to return chat members.
    # 
    # _@param_ `offset_member` — A chat member from which to return next chat members; pass null to get results from the beginning.
    # 
    # _@param_ `limit` — The maximum number of chat members to return; up to 100.
    def get_chat_invite_link_members: (
                                        chat_id: Integer,
                                        invite_link: TD::Types::String,
                                        offset_member: TD::Types::ChatInviteLinkMember,
                                        limit: Integer
                                      ) -> TD::Types::ChatInviteLinkMembers

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns invite links for a chat created by specified administrator.
    # Requires administrator privileges and can_invite_users right in the chat to get own links and owner privileges to
    #   get other links.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `creator_user_id` — User identifier of a chat administrator. Must be an identifier of the current user for non-owner.
    # 
    # _@param_ `is_revoked` — Pass true if revoked links needs to be returned instead of active or expired.
    # 
    # _@param_ `offset_date` — Creation date of an invite link starting after which to return invite links; use 0 to get results from the beginning.
    # 
    # _@param_ `offset_invite_link` — Invite link starting after which to return invite links; use empty string to get results from the beginning.
    # 
    # _@param_ `limit` — The maximum number of invite links to return; up to 100.
    def get_chat_invite_links: (
                                 chat_id: Integer,
                                 creator_user_id: Integer,
                                 is_revoked: bool,
                                 offset_date: Integer,
                                 offset_invite_link: TD::Types::String,
                                 limit: Integer
                               ) -> TD::Types::ChatInviteLinks

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns pending join requests in a chat.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `invite_link` — Invite link for which to return join requests. If empty, all join requests will be returned. Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for other links.
    # 
    # _@param_ `query` — A query to search for in the first names, last names and usernames of the users to return.
    # 
    # _@param_ `offset_request` — A chat join request from which to return next requests; pass null to get results from the beginning.
    # 
    # _@param_ `limit` — The maximum number of requests to join the chat to return.
    def get_chat_join_requests: (
                                  chat_id: Integer,
                                  invite_link: TD::Types::String,
                                  query: TD::Types::String,
                                  offset_request: TD::Types::ChatJoinRequest,
                                  limit: Integer
                                ) -> TD::Types::ChatJoinRequests

    # Returns chat lists to which the chat can be added.
    # This is an offline request.
    # 
    # _@param_ `chat_id` — Chat identifier.
    def get_chat_lists_to_add_chat: (chat_id: Integer) -> TD::Types::ChatLists

    # Returns information about a single member of a chat.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `member_id` — Member identifier.
    def get_chat_member: (chat_id: Integer, member_id: TD::Types::MessageSender) -> TD::Types::ChatMember

    # Returns the last message sent in a chat no later than the specified date.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `date` — Point in time (Unix timestamp) relative to which to search for messages.
    def get_chat_message_by_date: (chat_id: Integer, date: Integer) -> TD::Types::Message

    # Returns information about the next messages of the specified type in the chat split by days.
    # Returns the results in reverse chronological order.
    # Can return partial result for the last returned day.
    # Behavior of this method depends on the value of the option "utc_time_offset".
    # 
    # _@param_ `chat_id` — Identifier of the chat in which to return information about messages.
    # 
    # _@param_ `filter` — Filter for message content. Filters searchMessagesFilterEmpty, searchMessagesFilterMention, searchMessagesFilterUnreadMention, and {TD::Types::SearchMessagesFilter::UnreadReaction} are unsupported in this function.
    # 
    # _@param_ `from_message_id` — The message identifier from which to return information about messages; use 0 to get results from the last message.
    def get_chat_message_calendar: (chat_id: Integer, filter: TD::Types::SearchMessagesFilter, from_message_id: Integer) -> TD::Types::MessageCalendar

    # Returns approximate number of messages of the specified type in the chat.
    # 
    # _@param_ `chat_id` — Identifier of the chat in which to count messages.
    # 
    # _@param_ `filter` — Filter for message content; {TD::Types::SearchMessagesFilter::Empty} is unsupported in this function.
    # 
    # _@param_ `return_local` — If true, returns count that is available locally without sending network requests, returning -1 if the number of messages is unknown.
    def get_chat_message_count: (chat_id: Integer, filter: TD::Types::SearchMessagesFilter, return_local: bool) -> TD::Types::Count

    # Returns list of chats with non-default notification settings.
    # 
    # _@param_ `scope` — If specified, only chats from the scope will be returned; pass null to return chats from all scopes.
    # 
    # _@param_ `compare_sound` — If true, also chats with non-default sound will be returned.
    def get_chat_notification_settings_exceptions: (scope: TD::Types::NotificationSettingsScope, compare_sound: bool) -> TD::Types::Chats

    # Returns information about a newest pinned message in the chat.
    # 
    # _@param_ `chat_id` — Identifier of the chat the message belongs to.
    def get_chat_pinned_message: (chat_id: Integer) -> TD::Types::Message

    # Returns all scheduled messages in a chat.
    # The messages are returned in a reverse chronological order (i.e., in order of decreasing message_id).
    # 
    # _@param_ `chat_id` — Chat identifier.
    def get_chat_scheduled_messages: (chat_id: Integer) -> TD::Types::Messages

    # Returns sparse positions of messages of the specified type in the chat to be used for shared media scroll
    #   implementation.
    # Returns the results in reverse chronological order (i.e., in order of decreasing message_id).
    # Cannot be used in secret chats or with searchMessagesFilterFailedToSend filter without an enabled message database.
    # 
    # _@param_ `chat_id` — Identifier of the chat in which to return information about message positions.
    # 
    # _@param_ `filter` — Filter for message content. Filters searchMessagesFilterEmpty, searchMessagesFilterMention, searchMessagesFilterUnreadMention, and {TD::Types::SearchMessagesFilter::UnreadReaction} are unsupported in this function.
    # 
    # _@param_ `from_message_id` — The message identifier from which to return information about message positions.
    # 
    # _@param_ `limit` — The expected number of message positions to be returned; 50-2000. A smaller number of positions can be returned, if there are not enough appropriate messages.
    def get_chat_sparse_message_positions: (
                                             chat_id: Integer,
                                             filter: TD::Types::SearchMessagesFilter,
                                             from_message_id: Integer,
                                             limit: Integer
                                           ) -> TD::Types::MessagePositions

    # Returns sponsored message to be shown in a chat; for channel chats only.
    # Returns a 404 error if there is no sponsored message in the chat.
    # 
    # _@param_ `chat_id` — Identifier of the chat.
    def get_chat_sponsored_message: (chat_id: Integer) -> TD::Types::SponsoredMessage

    # Returns detailed statistics about a chat.
    # Currently, this method can be used only for supergroups and channels.
    # Can be used only if supergroupFullInfo.can_get_statistics == true.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `is_dark` — Pass true if a dark theme is used by the application.
    def get_chat_statistics: (chat_id: Integer, is_dark: bool) -> TD::Types::ChatStatistics

    # Returns an ordered list of chats from the beginning of a chat list.
    # For informational purposes only.
    # Use loadChats and updates processing instead to maintain chat lists in a consistent state.
    # 
    # _@param_ `chat_list` — The chat list in which to return chats; pass null to get chats from the main chat list.
    # 
    # _@param_ `limit` — The maximum number of chats to be returned.
    def get_chats: (chat_list: TD::Types::ChatList, limit: Integer) -> TD::Types::Chats

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns the list of commands supported by the bot for the given user scope and language; for bots only.
    # 
    # _@param_ `scope` — The scope to which the commands are relevant; pass null to get commands in the default bot command scope.
    # 
    # _@param_ `language_code` — A two-letter ISO 639-1 language code or an empty string.
    def get_commands: (scope: TD::Types::BotCommandScope, language_code: TD::Types::String) -> TD::Types::BotCommands

    # Returns all website where the current user used Telegram to log in.
    def get_connected_websites: () -> TD::Types::ConnectedWebsites

    # Returns all user contacts.
    def get_contacts: () -> TD::Types::Users

    # Returns information about existing countries.
    # Can be called before authorization.
    def get_countries: () -> TD::Types::Countries

    # Uses the current IP address to find the current country.
    # Returns two-letter ISO 3166-1 alpha-2 country code.
    # Can be called before authorization.
    def get_country_code: () -> TD::Types::Text

    # Returns a list of public chats of the specified type, owned by the user.
    # 
    # _@param_ `type` — Type of the public chats to return.
    def get_created_public_chats: (_type: TD::Types::PublicChatType) -> TD::Types::Chats

    # Returns all updates needed to restore current TDLib state, i.e.
    # all actual UpdateAuthorizationState/UpdateUser/UpdateNewChat and others.
    # This is especially useful if TDLib is run in a separate process.
    # Can be called before initialization.
    def get_current_state: () -> TD::Types::Updates

    # Returns database statistics.
    def get_database_statistics: () -> TD::Types::DatabaseStatistics

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns information about a tg:// deep link.
    # Use "tg://need_update_for_some_feature" or "tg:some_unsupported_feature" for testing.
    # Returns a 404 error for unknown links.
    # Can be called before authorization.
    # 
    # _@param_ `link` — The link.
    def get_deep_link_info: (link: TD::Types::String) -> TD::Types::DeepLinkInfo

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns an HTTP URL which can be used to automatically log in to the translation platform and suggest new emoji
    #   replacements.
    # The URL will be valid for 30 seconds after generation.
    # 
    # _@param_ `language_code` — Language code for which the emoji replacements will be suggested.
    def get_emoji_suggestions_url: (language_code: TD::Types::String) -> TD::Types::HttpUrl

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns an HTTP URL which can be used to automatically authorize the current user on a website after clicking an
    #   HTTP link.
    # Use the method getExternalLinkInfo to find whether a prior user confirmation is needed.
    # 
    # _@param_ `link` — The HTTP link.
    # 
    # _@param_ `allow_write_access` — True, if the current user allowed the bot, returned in getExternalLinkInfo, to send them messages.
    def get_external_link: (link: TD::Types::String, allow_write_access: bool) -> TD::Types::HttpUrl

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns information about an action to be done when the current user clicks an external link.
    # Don't use this method for links from secret chats if web page preview is disabled in secret chats.
    # 
    # _@param_ `link` — The link.
    def get_external_link_info: (link: TD::Types::String) -> TD::Types::LoginUrlInfo

    # Returns favorite stickers.
    def get_favorite_stickers: () -> TD::Types::Stickers

    # Returns information about a file; this is an offline request.
    # 
    # _@param_ `file_id` — Identifier of the file to get.
    def get_file: (file_id: Integer) -> TD::Types::File

    # Returns file downloaded prefix size from a given offset, in bytes.
    # 
    # _@param_ `file_id` — Identifier of the file.
    # 
    # _@param_ `offset` — Offset from which downloaded prefix size needs to be calculated.
    def get_file_downloaded_prefix_size: (file_id: Integer, offset: Integer) -> TD::Types::Count

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns the extension of a file, guessed by its MIME type.
    # Returns an empty string on failure.
    # Can be called synchronously.
    # 
    # _@param_ `mime_type` — The MIME type of the file.
    def get_file_extension: (mime_type: TD::Types::String) -> TD::Types::Text

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns the MIME type of a file, guessed by its extension.
    # Returns an empty string on failure.
    # Can be called synchronously.
    # 
    # _@param_ `file_name` — The name of the file or path to the file.
    def get_file_mime_type: (file_name: TD::Types::String) -> TD::Types::Text

    # Returns the high scores for a game and some part of the high score table in the range of the specified user; for
    #   bots only.
    # 
    # _@param_ `chat_id` — The chat that contains the message with the game.
    # 
    # _@param_ `message_id` — Identifier of the message.
    # 
    # _@param_ `user_id` — User identifier.
    def get_game_high_scores: (chat_id: Integer, message_id: Integer, user_id: Integer) -> TD::Types::GameHighScores

    # Returns information about a group call.
    # 
    # _@param_ `group_call_id` — Group call identifier.
    def get_group_call: (group_call_id: Integer) -> TD::Types::GroupCall

    # Returns invite link to a video chat in a public chat.
    # 
    # _@param_ `group_call_id` — Group call identifier.
    # 
    # _@param_ `can_self_unmute` — Pass true if the invite link needs to contain an invite hash, passing which to joinGroupCall would allow the invited user to unmute themselves. Requires groupCall.can_be_managed group call flag.
    def get_group_call_invite_link: (group_call_id: Integer, can_self_unmute: bool) -> TD::Types::HttpUrl

    # Returns a file with a segment of a group call stream in a modified OGG format for audio or MPEG-4 format for video.
    # 
    # _@param_ `group_call_id` — Group call identifier.
    # 
    # _@param_ `time_offset` — Point in time when the stream segment begins; Unix timestamp in milliseconds.
    # 
    # _@param_ `scale` — Segment duration scale; 0-1. Segment's duration is 1000/(2**scale) milliseconds.
    # 
    # _@param_ `channel_id` — Identifier of an audio/video channel to get as received from tgcalls.
    # 
    # _@param_ `video_quality` — Video quality as received from tgcalls; pass null to get the worst available quality.
    def get_group_call_stream_segment: (
                                         group_call_id: Integer,
                                         time_offset: Integer,
                                         scale: Integer,
                                         channel_id: Integer,
                                         video_quality: TD::Types::GroupCallVideoQuality
                                       ) -> TD::Types::FilePart

    # Returns a list of common group chats with a given user.
    # Chats are sorted by their type and creation date.
    # 
    # _@param_ `user_id` — User identifier.
    # 
    # _@param_ `offset_chat_id` — Chat identifier starting from which to return chats; use 0 for the first request.
    # 
    # _@param_ `limit` — The maximum number of chats to be returned; up to 100.
    def get_groups_in_common: (user_id: Integer, offset_chat_id: Integer, limit: Integer) -> TD::Types::Chats

    # Returns the total number of imported contacts.
    def get_imported_contact_count: () -> TD::Types::Count

    # Returns a list of recently inactive supergroups and channels.
    # Can be used when user reaches limit on the number of joined supergroups and channels and receives CHANNELS_TOO_MUCH
    #   error.
    def get_inactive_supergroup_chats: () -> TD::Types::Chats

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns game high scores and some part of the high score table in the range of the specified user; for bots only.
    # 
    # _@param_ `inline_message_id` — Inline message identifier.
    # 
    # _@param_ `user_id` — User identifier.
    def get_inline_game_high_scores: (inline_message_id: TD::Types::String, user_id: Integer) -> TD::Types::GameHighScores

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Sends an inline query to a bot and returns its results.
    # Returns an error with code 502 if the bot fails to answer the query before the query timeout expires.
    # 
    # _@param_ `bot_user_id` — The identifier of the target bot.
    # 
    # _@param_ `chat_id` — Identifier of the chat where the query was sent.
    # 
    # _@param_ `user_location` — Location of the user; pass null if unknown or the bot doesn't need user's location.
    # 
    # _@param_ `query` — Text of the query.
    # 
    # _@param_ `offset` — Offset of the first entry to return.
    def get_inline_query_results: (
                                    bot_user_id: Integer,
                                    chat_id: Integer,
                                    user_location: TD::Types::Location,
                                    query: TD::Types::String,
                                    offset: TD::Types::String
                                  ) -> TD::Types::InlineQueryResults

    # Returns a list of installed sticker sets.
    # 
    # _@param_ `is_masks` — Pass true to return mask sticker sets; pass false to return ordinary sticker sets.
    def get_installed_sticker_sets: (is_masks: bool) -> TD::Types::StickerSets

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns information about the type of an internal link.
    # Returns a 404 error if the link is not internal.
    # Can be called before authorization.
    # 
    # _@param_ `link` — The link.
    def get_internal_link_type: (link: TD::Types::String) -> TD::Types::InternalLinkType

    # Converts a JsonValue object to corresponding JSON-serialized string.
    # Can be called synchronously.
    # 
    # _@param_ `json_value` — The {TD::Types::JsonValue} object.
    def get_json_string: (json_value: TD::Types::JsonValue) -> TD::Types::Text

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Converts a JSON-serialized string to corresponding JsonValue object.
    # Can be called synchronously.
    # 
    # _@param_ `json` — The JSON-serialized string.
    def get_json_value: (json: TD::Types::String) -> TD::Types::JsonValue

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns information about a language pack.
    # Returned language pack identifier may be different from a provided one.
    # Can be called before authorization.
    # 
    # _@param_ `language_pack_id` — Language pack identifier.
    def get_language_pack_info: (language_pack_id: TD::Types::String) -> TD::Types::LanguagePackInfo

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns a string stored in the local database from the specified localization target and language pack by its key.
    # Returns a 404 error if the string is not found.
    # Can be called synchronously.
    # 
    # _@param_ `language_pack_database_path` — Path to the language pack database in which strings are stored.
    # 
    # _@param_ `localization_target` — Localization target to which the language pack belongs.
    # 
    # _@param_ `language_pack_id` — Language pack identifier.
    # 
    # _@param_ `key` — Language pack key of the string to be returned.
    def get_language_pack_string: (
                                    language_pack_database_path: TD::Types::String,
                                    localization_target: TD::Types::String,
                                    language_pack_id: TD::Types::String,
                                    key: TD::Types::String
                                  ) -> TD::Types::LanguagePackStringValue

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns strings from a language pack in the current localization target by their keys.
    # Can be called before authorization.
    # 
    # _@param_ `language_pack_id` — Language pack identifier of the strings to be returned.
    # 
    # _@param_ `keys` — Language pack keys of the strings to be returned; leave empty to request all available strings.
    def get_language_pack_strings: (language_pack_id: TD::Types::String, keys: ::Array[TD::Types::String]) -> TD::Types::LanguagePackStrings

    # Returns information about the current localization target.
    # This is an offline request if only_local is true.
    # Can be called before authorization.
    # 
    # _@param_ `only_local` — If true, returns only locally available information without sending network requests.
    def get_localization_target_info: (only_local: bool) -> TD::Types::LocalizationTargetInfo

    # Returns information about currently used log stream for internal logging of TDLib.
    # Can be called synchronously.
    def get_log_stream: () -> TD::Types::LogStream

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns current verbosity level for a specified TDLib internal log tag.
    # Can be called synchronously.
    # 
    # _@param_ `tag` — Logging tag to change verbosity level.
    def get_log_tag_verbosity_level: (tag: TD::Types::String) -> TD::Types::LogVerbosityLevel

    # Returns list of available TDLib internal log tags, for example, ["actor", "binlog", "connections", "notifications",
    #   "proxy"].
    # Can be called synchronously.
    def get_log_tags: () -> TD::Types::LogTags

    # Returns current verbosity level of the internal logging of TDLib.
    # Can be called synchronously.
    def get_log_verbosity_level: () -> TD::Types::LogVerbosityLevel

    # Returns an HTTP URL which can be used to automatically authorize the user on a website after clicking an inline
    #   button of type inlineKeyboardButtonTypeLoginUrl.
    # Use the method getLoginUrlInfo to find whether a prior user confirmation is needed.
    # If an error is returned, then the button must be handled as an ordinary URL button.
    # 
    # _@param_ `chat_id` — Chat identifier of the message with the button.
    # 
    # _@param_ `message_id` — Message identifier of the message with the button.
    # 
    # _@param_ `button_id` — Button identifier.
    # 
    # _@param_ `allow_write_access` — True, if the user allowed the bot to send them messages.
    def get_login_url: (
                         chat_id: Integer,
                         message_id: Integer,
                         button_id: Integer,
                         allow_write_access: bool
                       ) -> TD::Types::HttpUrl

    # Returns information about a button of type inlineKeyboardButtonTypeLoginUrl.
    # The method needs to be called when the user presses the button.
    # 
    # _@param_ `chat_id` — Chat identifier of the message with the button.
    # 
    # _@param_ `message_id` — Message identifier of the message with the button.
    # 
    # _@param_ `button_id` — Button identifier.
    def get_login_url_info: (chat_id: Integer, message_id: Integer, button_id: Integer) -> TD::Types::LoginUrlInfo

    # Returns information about a file with a map thumbnail in PNG format.
    # Only map thumbnail files with size less than 1MB can be downloaded.
    # 
    # _@param_ `location` — Location of the map center.
    # 
    # _@param_ `zoom` — Map zoom level; 13-20.
    # 
    # _@param_ `width` — Map width in pixels before applying scale; 16-1024.
    # 
    # _@param_ `height` — Map height in pixels before applying scale; 16-1024.
    # 
    # _@param_ `scale` — Map scale; 1-3.
    # 
    # _@param_ `chat_id` — Identifier of a chat, in which the thumbnail will be shown. Use 0 if unknown.
    def get_map_thumbnail_file: (
                                  location: TD::Types::Location,
                                  zoom: Integer,
                                  width: Integer,
                                  height: Integer,
                                  scale: Integer,
                                  chat_id: Integer
                                ) -> TD::Types::File

    # Replaces text entities with Markdown formatting in a human-friendly format.
    # Entities that can't be represented in Markdown unambiguously are kept as is.
    # Can be called synchronously.
    # 
    # _@param_ `text` — The text.
    def get_markdown_text: (text: TD::Types::FormattedText) -> TD::Types::FormattedText

    # Returns the current user.
    def get_me: () -> TD::Types::User

    # Returns information about a message.
    # 
    # _@param_ `chat_id` — Identifier of the chat the message belongs to.
    # 
    # _@param_ `message_id` — Identifier of the message to get.
    def get_message: (chat_id: Integer, message_id: Integer) -> TD::Types::Message

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns reactions added for a message, along with their sender.
    # 
    # _@param_ `chat_id` — Identifier of the chat to which the message belongs.
    # 
    # _@param_ `message_id` — Identifier of the message.
    # 
    # _@param_ `reaction` — If non-empty, only added reactions with the specified text representation will be returned.
    # 
    # _@param_ `offset` — Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results.
    # 
    # _@param_ `limit` — The maximum number of reactions to be returned; must be positive and can't be greater than 100.
    def get_message_added_reactions: (
                                       chat_id: Integer,
                                       message_id: Integer,
                                       reaction: TD::Types::String,
                                       offset: TD::Types::String,
                                       limit: Integer
                                     ) -> TD::Types::AddedReactions

    # Returns reactions, which can be added to a message.
    # The list can change after updateReactions, updateChatAvailableReactions for the chat, or
    #   updateMessageInteractionInfo for the message.
    # 
    # _@param_ `chat_id` — Identifier of the chat to which the message belongs.
    # 
    # _@param_ `message_id` — Identifier of the message.
    def get_message_available_reactions: (chat_id: Integer, message_id: Integer) -> TD::Types::AvailableReactions

    # Returns an HTML code for embedding the message.
    # Available only for messages in supergroups and channels with a username.
    # 
    # _@param_ `chat_id` — Identifier of the chat to which the message belongs.
    # 
    # _@param_ `message_id` — Identifier of the message.
    # 
    # _@param_ `for_album` — Pass true to return an HTML code for embedding of the whole media album.
    def get_message_embedding_code: (chat_id: Integer, message_id: Integer, for_album: bool) -> TD::Types::Text

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns information about a file with messages exported from another app.
    # 
    # _@param_ `message_file_head` — Beginning of the message file; up to 100 first lines.
    def get_message_file_type: (message_file_head: TD::Types::String) -> TD::Types::MessageFileType

    # Returns a confirmation text to be shown to the user before starting message import.
    # 
    # _@param_ `chat_id` — Identifier of a chat to which the messages will be imported. It must be an identifier of a private chat with a mutual contact or an identifier of a supergroup chat with can_change_info administrator right.
    def get_message_import_confirmation_text: (chat_id: Integer) -> TD::Types::Text

    # Returns an HTTPS link to a message in a chat.
    # Available only for already sent messages in supergroups and channels, or if message.can_get_media_timestamp_links
    #   and a media timestamp link is generated.
    # This is an offline request.
    # 
    # _@param_ `chat_id` — Identifier of the chat to which the message belongs.
    # 
    # _@param_ `message_id` — Identifier of the message.
    # 
    # _@param_ `media_timestamp` — If not 0, timestamp from which the video/audio/video note/voice note playing must start, in seconds. The media can be in the message content or in its web page preview.
    # 
    # _@param_ `for_album` — Pass true to create a link for the whole media album.
    # 
    # _@param_ `for_comment` — Pass true to create a link to the message as a channel post comment, or from a message thread.
    def get_message_link: (
                            chat_id: Integer,
                            message_id: Integer,
                            media_timestamp: Integer,
                            for_album: bool,
                            for_comment: bool
                          ) -> TD::Types::MessageLink

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns information about a public or private message link.
    # Can be called for any internal link of the type internalLinkTypeMessage.
    # 
    # _@param_ `url` — The message link.
    def get_message_link_info: (url: TD::Types::String) -> TD::Types::MessageLinkInfo

    # Returns information about a message, if it is available locally without sending network request.
    # This is an offline request.
    # 
    # _@param_ `chat_id` — Identifier of the chat the message belongs to.
    # 
    # _@param_ `message_id` — Identifier of the message to get.
    def get_message_locally: (chat_id: Integer, message_id: Integer) -> TD::Types::Message

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns forwarded copies of a channel message to different public channels.
    # For optimal performance, the number of returned messages is chosen by TDLib.
    # 
    # _@param_ `chat_id` — Chat identifier of the message.
    # 
    # _@param_ `message_id` — Message identifier.
    # 
    # _@param_ `offset` — Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results.
    # 
    # _@param_ `limit` — The maximum number of messages to be returned; must be positive and can't be greater than 100. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit.
    def get_message_public_forwards: (
                                       chat_id: Integer,
                                       message_id: Integer,
                                       offset: TD::Types::String,
                                       limit: Integer
                                     ) -> TD::Types::FoundMessages

    # Returns detailed statistics about a message.
    # Can be used only if message.can_get_statistics == true.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `message_id` — Message identifier.
    # 
    # _@param_ `is_dark` — Pass true if a dark theme is used by the application.
    def get_message_statistics: (chat_id: Integer, message_id: Integer, is_dark: bool) -> TD::Types::MessageStatistics

    # Returns information about a message thread.
    # Can be used only if message.can_get_message_thread == true.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `message_id` — Identifier of the message.
    def get_message_thread: (chat_id: Integer, message_id: Integer) -> TD::Types::MessageThreadInfo

    # Returns messages in a message thread of a message.
    # Can be used only if message.can_get_message_thread == true.
    # Message thread of a channel message is in the channel's linked supergroup.
    # The messages are returned in a reverse chronological order (i.e., in order of decreasing message_id).
    # For optimal performance, the number of returned messages is chosen by TDLib.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `message_id` — Message identifier, which thread history needs to be returned.
    # 
    # _@param_ `from_message_id` — Identifier of the message starting from which history must be fetched; use 0 to get results from the last message.
    # 
    # _@param_ `offset` — Specify 0 to get results from exactly the from_message_id or a negative offset up to 99 to get additionally some newer messages.
    # 
    # _@param_ `limit` — The maximum number of messages to be returned; must be positive and can't be greater than 100. If the offset is negative, the limit must be greater than or equal to -offset. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit.
    def get_message_thread_history: (
                                      chat_id: Integer,
                                      message_id: Integer,
                                      from_message_id: Integer,
                                      offset: Integer,
                                      limit: Integer
                                    ) -> TD::Types::Messages

    # Returns viewers of a recent outgoing message in a basic group or a supergroup chat.
    # For video notes and voice notes only users, opened content of the message, are returned.
    # The method can be called if message.can_get_viewers == true.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `message_id` — Identifier of the message.
    def get_message_viewers: (chat_id: Integer, message_id: Integer) -> TD::Types::Users

    # Returns information about messages.
    # If a message is not found, returns null on the corresponding position of the result.
    # 
    # _@param_ `chat_id` — Identifier of the chat the messages belong to.
    # 
    # _@param_ `message_ids` — Identifiers of the messages to get.
    def get_messages: (chat_id: Integer, message_ids: ::Array[Integer]) -> TD::Types::Messages

    # Returns network data usage statistics.
    # Can be called before authorization.
    # 
    # _@param_ `only_current` — If true, returns only data for the current library launch.
    def get_network_statistics: (only_current: bool) -> TD::Types::NetworkStatistics

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns the value of an option by its name.
    # (Check the list of available options on https://core.telegram.org/tdlib/options.) Can be called before
    #   authorization.
    # 
    # _@param_ `name` — The name of the option.
    def get_option: (name: TD::Types::String) -> TD::Types::OptionValue

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns a Telegram Passport authorization form for sharing data with a service.
    # 
    # _@param_ `bot_user_id` — User identifier of the service's bot.
    # 
    # _@param_ `scope` — Telegram Passport element types requested by the service.
    # 
    # _@param_ `public_key` — Service's public key.
    # 
    # _@param_ `nonce` — Unique request identifier provided by the service.
    def get_passport_authorization_form: (
                                           bot_user_id: Integer,
                                           scope: TD::Types::String,
                                           public_key: TD::Types::String,
                                           nonce: TD::Types::String
                                         ) -> TD::Types::PassportAuthorizationForm

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns already available Telegram Passport elements suitable for completing a Telegram Passport authorization
    #   form.
    # Result can be received only once for each authorization form.
    # 
    # _@param_ `autorization_form_id` — Authorization form identifier.
    # 
    # _@param_ `password` — Password of the current user.
    def get_passport_authorization_form_available_elements: (autorization_form_id: Integer, password: TD::Types::String) -> TD::Types::PassportElementsWithErrors

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns one of the available Telegram Passport elements.
    # 
    # _@param_ `type` — Telegram Passport element type.
    # 
    # _@param_ `password` — Password of the current user.
    def get_passport_element: (_type: TD::Types::PassportElementType, password: TD::Types::String) -> TD::Types::PassportElement

    # Returns the current state of 2-step verification.
    def get_password_state: () -> TD::Types::PasswordState

    # Returns an invoice payment form.
    # This method must be called when the user presses inlineKeyboardButtonBuy.
    # 
    # _@param_ `chat_id` — Chat identifier of the Invoice message.
    # 
    # _@param_ `message_id` — Message identifier.
    # 
    # _@param_ `theme` — Preferred payment form theme; pass null to use the default theme.
    def get_payment_form: (chat_id: Integer, message_id: Integer, theme: TD::Types::PaymentFormTheme) -> TD::Types::PaymentForm

    # Returns information about a successful payment.
    # 
    # _@param_ `chat_id` — Chat identifier of the PaymentSuccessful message.
    # 
    # _@param_ `message_id` — Message identifier.
    def get_payment_receipt: (chat_id: Integer, message_id: Integer) -> TD::Types::PaymentReceipt

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns information about a phone number by its prefix.
    # Can be called before authorization.
    # 
    # _@param_ `phone_number_prefix` — The phone number prefix.
    def get_phone_number_info: (phone_number_prefix: TD::Types::String) -> TD::Types::PhoneNumberInfo

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns information about a phone number by its prefix synchronously.
    # getCountries must be called at least once after changing localization to the specified language if properly
    #   localized country information is expected.
    # Can be called synchronously.
    # 
    # _@param_ `language_code` — A two-letter ISO 639-1 language code for country information localization.
    # 
    # _@param_ `phone_number_prefix` — The phone number prefix.
    def get_phone_number_info_sync: (language_code: TD::Types::String, phone_number_prefix: TD::Types::String) -> TD::Types::PhoneNumberInfo

    # Returns users voted for the specified option in a non-anonymous polls.
    # For optimal performance, the number of returned users is chosen by TDLib.
    # 
    # _@param_ `chat_id` — Identifier of the chat to which the poll belongs.
    # 
    # _@param_ `message_id` — Identifier of the message containing the poll.
    # 
    # _@param_ `option_id` — 0-based identifier of the answer option.
    # 
    # _@param_ `offset` — Number of users to skip in the result; must be non-negative.
    # 
    # _@param_ `limit` — The maximum number of users to be returned; must be positive and can't be greater than 50. For optimal performance, the number of returned users is chosen by TDLib and can be smaller than the specified limit, even if the end of the voter list has not been reached.
    def get_poll_voters: (
                           chat_id: Integer,
                           message_id: Integer,
                           option_id: Integer,
                           offset: Integer,
                           limit: Integer
                         ) -> TD::Types::Users

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns an IETF language tag of the language preferred in the country, which must be used to fill native fields in
    #   Telegram Passport personal details.
    # Returns a 404 error if unknown.
    # 
    # _@param_ `country_code` — A two-letter ISO 3166-1 alpha-2 country code.
    def get_preferred_country_language: (country_code: TD::Types::String) -> TD::Types::Text

    # Returns list of proxies that are currently set up.
    # Can be called before authorization.
    def get_proxies: () -> TD::Types::Proxies

    # Returns an HTTPS link, which can be used to add a proxy.
    # Available only for SOCKS5 and MTProto proxies.
    # Can be called before authorization.
    # 
    # _@param_ `proxy_id` — Proxy identifier.
    def get_proxy_link: (proxy_id: Integer) -> TD::Types::HttpUrl

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns a globally unique push notification subscription identifier for identification of an account, which has
    #   received a push notification.
    # Can be called synchronously.
    # 
    # _@param_ `payload` — JSON-encoded push notification payload.
    def get_push_receiver_id: (payload: TD::Types::String) -> TD::Types::PushReceiverId

    # Returns up to 20 recently used inline bots in the order of their last usage.
    def get_recent_inline_bots: () -> TD::Types::Users

    # Returns a list of recently used stickers.
    # 
    # _@param_ `is_attached` — Pass true to return stickers and masks that were recently attached to photos or video files; pass false to return recently sent stickers.
    def get_recent_stickers: (is_attached: bool) -> TD::Types::Stickers

    # Returns recently opened chats, this is an offline request.
    # Returns chats in the order of last opening.
    # 
    # _@param_ `limit` — The maximum number of chats to be returned.
    def get_recently_opened_chats: (limit: Integer) -> TD::Types::Chats

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns t.me URLs recently visited by a newly registered user.
    # 
    # _@param_ `referrer` — Google Play referrer to identify the user.
    def get_recently_visited_t_me_urls: (referrer: TD::Types::String) -> TD::Types::TMeUrls

    # Returns recommended chat filters for the current user.
    def get_recommended_chat_filters: () -> TD::Types::RecommendedChatFilters

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns a 2-step verification recovery email address that was previously set up.
    # This method can be used to verify a password provided by the user.
    # 
    # _@param_ `password` — The password for the current user.
    def get_recovery_email_address: (password: TD::Types::String) -> TD::Types::RecoveryEmailAddress

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns information about a file by its remote ID; this is an offline request.
    # Can be used to register a URL as a file for further uploading, or sending as a message.
    # Even the request succeeds, the file can be used only if it is still accessible to the user.
    # For example, if the file is from a message, then the message must be not deleted and accessible to the user.
    # If the file database is disabled, then the corresponding object with the file must be preloaded by the application.
    # 
    # _@param_ `remote_file_id` — Remote identifier of the file to get.
    # 
    # _@param_ `file_type` — File type; pass null if unknown.
    def get_remote_file: (remote_file_id: TD::Types::String, file_type: TD::Types::FileType) -> TD::Types::File

    # Returns information about a message that is replied by a given message.
    # Also returns the pinned message, the game message, and the invoice message for messages of the types
    #   messagePinMessage, messageGameScore, and messagePaymentSuccessful respectively.
    # 
    # _@param_ `chat_id` — Identifier of the chat the message belongs to.
    # 
    # _@param_ `message_id` — Identifier of the reply message.
    def get_replied_message: (chat_id: Integer, message_id: Integer) -> TD::Types::Message

    # Returns saved animations.
    def get_saved_animations: () -> TD::Types::Animations

    # Returns saved order info, if any.
    def get_saved_order_info: () -> TD::Types::OrderInfo

    # Returns the notification settings for chats of a given type.
    # 
    # _@param_ `scope` — Types of chats for which to return the notification settings information.
    def get_scope_notification_settings: (scope: TD::Types::NotificationSettingsScope) -> TD::Types::ScopeNotificationSettings

    # Returns information about a secret chat by its identifier.
    # This is an offline request.
    # 
    # _@param_ `secret_chat_id` — Secret chat identifier.
    def get_secret_chat: (secret_chat_id: Integer) -> TD::Types::SecretChat

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Loads an asynchronous or a zoomed in statistical graph.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `token` — The token for graph loading.
    # 
    # _@param_ `x` — X-value for zoomed in graph or 0 otherwise.
    def get_statistical_graph: (chat_id: Integer, token: TD::Types::String, x: Integer) -> TD::Types::StatisticalGraph

    # Returns emoji corresponding to a sticker.
    # The list is only for informational purposes, because a sticker is always sent with a fixed emoji from the
    #   corresponding Sticker object.
    # 
    # _@param_ `sticker` — Sticker file identifier.
    def get_sticker_emojis: (sticker: TD::Types::InputFile) -> TD::Types::Emojis

    # Returns information about a sticker set by its identifier.
    # 
    # _@param_ `set_id` — Identifier of the sticker set.
    def get_sticker_set: (set_id: Integer) -> TD::Types::StickerSet

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns stickers from the installed sticker sets that correspond to a given emoji.
    # If the emoji is non-empty, favorite and recently used stickers may also be returned.
    # 
    # _@param_ `emoji` — String representation of emoji. If empty, returns all known installed stickers.
    # 
    # _@param_ `limit` — The maximum number of stickers to be returned.
    def get_stickers: (emoji: TD::Types::String, limit: Integer) -> TD::Types::Stickers

    # Returns storage usage statistics.
    # Can be called before authorization.
    # 
    # _@param_ `chat_limit` — The maximum number of chats with the largest storage usage for which separate statistics need to be returned. All other chats will be grouped in entries with chat_id == 0. If the chat info database is not used, the chat_limit is ignored and is always set to 0.
    def get_storage_statistics: (chat_limit: Integer) -> TD::Types::StorageStatistics

    # Quickly returns approximate storage usage statistics.
    # Can be called before authorization.
    def get_storage_statistics_fast: () -> TD::Types::StorageStatisticsFast

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns suggested name for saving a file in a given directory.
    # 
    # _@param_ `file_id` — Identifier of the file.
    # 
    # _@param_ `directory` — Directory in which the file is supposed to be saved.
    def get_suggested_file_name: (file_id: Integer, directory: TD::Types::String) -> TD::Types::Text

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns a suggested name for a new sticker set with a given title.
    # 
    # _@param_ `title` — Sticker set title; 1-64 characters.
    def get_suggested_sticker_set_name: (title: TD::Types::String) -> TD::Types::Text

    # Returns a list of basic group and supergroup chats, which can be used as a discussion group for a channel.
    # Returned basic group chats must be first upgraded to supergroups before they can be set as a discussion group.
    # To set a returned supergroup as a discussion group, access to its old messages must be enabled using
    #   toggleSupergroupIsAllHistoryAvailable first.
    def get_suitable_discussion_chats: () -> TD::Types::Chats

    # Returns information about a supergroup or a channel by its identifier.
    # This is an offline request if the current user is not a bot.
    # 
    # _@param_ `supergroup_id` — Supergroup or channel identifier.
    def get_supergroup: (supergroup_id: Integer) -> TD::Types::Supergroup

    # Returns full information about a supergroup or a channel by its identifier, cached for up to 1 minute.
    # 
    # _@param_ `supergroup_id` — Supergroup or channel identifier.
    def get_supergroup_full_info: (supergroup_id: Integer) -> TD::Types::SupergroupFullInfo

    # Returns information about members or banned users in a supergroup or channel.
    # Can be used only if supergroupFullInfo.can_get_members == true; additionally, administrator privileges may be
    #   required for some filters.
    # 
    # _@param_ `supergroup_id` — Identifier of the supergroup or channel.
    # 
    # _@param_ `filter` — The type of users to return; pass null to use supergroupMembersFilterRecent.
    # 
    # _@param_ `offset` — Number of users to skip.
    # 
    # _@param_ `limit` — The maximum number of users be returned; up to 200.
    def get_supergroup_members: (
                                  supergroup_id: Integer,
                                  filter: TD::Types::SupergroupMembersFilter,
                                  offset: Integer,
                                  limit: Integer
                                ) -> TD::Types::ChatMembers

    # Returns a user that can be contacted to get support.
    def get_support_user: () -> TD::Types::User

    # Returns information about the current temporary password.
    def get_temporary_password_state: () -> TD::Types::TemporaryPasswordState

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns all entities (mentions, hashtags, cashtags, bot commands, bank card numbers, URLs, and email addresses)
    #   contained in the text.
    # Can be called synchronously.
    # 
    # _@param_ `text` — The text in which to look for entites.
    def get_text_entities: (text: TD::Types::String) -> TD::Types::TextEntities

    # Returns a list of frequently used chats.
    # Supported only if the chat info database is enabled.
    # 
    # _@param_ `category` — Category of chats to be returned.
    # 
    # _@param_ `limit` — The maximum number of chats to be returned; up to 30.
    def get_top_chats: (category: TD::Types::TopChatCategory, limit: Integer) -> TD::Types::Chats

    # Returns a list of trending sticker sets.
    # For optimal performance, the number of returned sticker sets is chosen by TDLib.
    # 
    # _@param_ `offset` — The offset from which to return the sticker sets; must be non-negative.
    # 
    # _@param_ `limit` — The maximum number of sticker sets to be returned; up to 100. For optimal performance, the number of returned sticker sets is chosen by TDLib and can be smaller than the specified limit, even if the end of the list has not been reached.
    def get_trending_sticker_sets: (offset: Integer, limit: Integer) -> TD::Types::StickerSets

    # Returns information about a user by their identifier.
    # This is an offline request if the current user is not a bot.
    # 
    # _@param_ `user_id` — User identifier.
    def get_user: (user_id: Integer) -> TD::Types::User

    # Returns full information about a user by their identifier.
    # 
    # _@param_ `user_id` — User identifier.
    def get_user_full_info: (user_id: Integer) -> TD::Types::UserFullInfo

    # Returns the current privacy settings.
    # 
    # _@param_ `setting` — The privacy setting.
    def get_user_privacy_setting_rules: (setting: TD::Types::UserPrivacySetting) -> TD::Types::UserPrivacySettingRules

    # Returns the profile photos of a user.
    # The result of this query may be outdated: some photos might have been deleted already.
    # 
    # _@param_ `user_id` — User identifier.
    # 
    # _@param_ `offset` — The number of photos to skip; must be non-negative.
    # 
    # _@param_ `limit` — The maximum number of photos to be returned; up to 100.
    def get_user_profile_photos: (user_id: Integer, offset: Integer, limit: Integer) -> TD::Types::ChatPhotos

    # Returns list of participant identifiers, on whose behalf a video chat in the chat can be joined.
    # 
    # _@param_ `chat_id` — Chat identifier.
    def get_video_chat_available_participants: (chat_id: Integer) -> TD::Types::MessageSenders

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Returns an instant view version of a web page if available.
    # Returns a 404 error if the web page has no instant view page.
    # 
    # _@param_ `url` — The web page URL.
    # 
    # _@param_ `force_full` — If true, the full instant view for the web page will be returned.
    def get_web_page_instant_view: (url: TD::Types::String, force_full: bool) -> TD::Types::WebPageInstantView

    # Returns a web page preview by the text of the message.
    # Do not call this function too often.
    # Returns a 404 error if the web page has no preview.
    # 
    # _@param_ `text` — Message text with formatting.
    def get_web_page_preview: (text: TD::Types::FormattedText) -> TD::Types::WebPage

    # Hides a suggested action.
    # 
    # _@param_ `action` — Suggested action to hide.
    def hide_suggested_action: (action: TD::Types::SuggestedAction) -> TD::Types::Ok

    # Adds new contacts or edits existing contacts by their phone numbers; contacts' user identifiers are ignored.
    # 
    # _@param_ `contacts` — The list of contacts to import or edit; contacts' vCard are ignored and are not imported.
    def import_contacts: (contacts: ::Array[TD::Types::Contact]) -> TD::Types::ImportedContacts

    # Imports messages exported from another app.
    # 
    # _@param_ `chat_id` — Identifier of a chat to which the messages will be imported. It must be an identifier of a private chat with a mutual contact or an identifier of a supergroup chat with can_change_info administrator right.
    # 
    # _@param_ `message_file` — File with messages to import. Only {TD::Types::InputFile::Local} and {TD::Types::InputFile::Generated} are supported. The file must not be previously uploaded.
    # 
    # _@param_ `attached_files` — Files used in the imported messages. Only {TD::Types::InputFile::Local} and {TD::Types::InputFile::Generated} are supported. The files must not be previously uploaded.
    def import_messages: (chat_id: Integer, message_file: TD::Types::InputFile, attached_files: ::Array[TD::Types::InputFile]) -> TD::Types::Ok

    # Invites users to an active group call.
    # Sends a service message of type messageInviteToGroupCall for video chats.
    # 
    # _@param_ `group_call_id` — Group call identifier.
    # 
    # _@param_ `user_ids` — User identifiers. At most 10 users can be invited simultaneously.
    def invite_group_call_participants: (group_call_id: Integer, user_ids: ::Array[Integer]) -> TD::Types::Ok

    # Adds the current user as a new member to a chat.
    # Private and secret chats can't be joined using this method.
    # 
    # _@param_ `chat_id` — Chat identifier.
    def join_chat: (chat_id: Integer) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Uses an invite link to add the current user to the chat if possible.
    # 
    # _@param_ `invite_link` — Invite link to use.
    def join_chat_by_invite_link: (invite_link: TD::Types::String) -> TD::Types::Chat

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Joins an active group call.
    # Returns join response payload for tgcalls.
    # 
    # _@param_ `group_call_id` — Group call identifier.
    # 
    # _@param_ `participant_id` — Identifier of a group call participant, which will be used to join the call; pass null to join as self; video chats only.
    # 
    # _@param_ `audio_source_id` — Caller audio channel synchronization source identifier; received from tgcalls.
    # 
    # _@param_ `payload` — Group call join payload; received from tgcalls.
    # 
    # _@param_ `is_muted` — True, if the user's microphone is muted.
    # 
    # _@param_ `is_my_video_enabled` — True, if the user's video is enabled.
    # 
    # _@param_ `invite_hash` — If non-empty, invite hash to be used to join the group call without being muted by administrators.
    def join_group_call: (
                           group_call_id: Integer,
                           participant_id: TD::Types::MessageSender,
                           audio_source_id: Integer,
                           payload: TD::Types::String,
                           is_muted: bool,
                           is_my_video_enabled: bool,
                           invite_hash: TD::Types::String
                         ) -> TD::Types::Text

    # Removes the current user from chat members.
    # Private and secret chats can't be left using this method.
    # 
    # _@param_ `chat_id` — Chat identifier.
    def leave_chat: (chat_id: Integer) -> TD::Types::Ok

    # Leaves a group call.
    # 
    # _@param_ `group_call_id` — Group call identifier.
    def leave_group_call: (group_call_id: Integer) -> TD::Types::Ok

    # Loads more chats from a chat list.
    # The loaded chats and their positions in the chat list will be sent through updates.
    # Chats are sorted by the pair (chat.position.order, chat.id) in descending order.
    # Returns a 404 error if all chats have been loaded.
    # 
    # _@param_ `chat_list` — The chat list in which to load chats; pass null to load chats from the main chat list.
    # 
    # _@param_ `limit` — The maximum number of chats to be loaded. For optimal performance, the number of loaded chats is chosen by TDLib and can be smaller than the specified limit, even if the end of the list is not reached.
    def load_chats: (chat_list: TD::Types::ChatList, limit: Integer) -> TD::Types::Ok

    # Loads more participants of a group call.
    # The loaded participants will be received through updates.
    # Use the field groupCall.loaded_all_participants to check whether all participants have already been loaded.
    # 
    # _@param_ `group_call_id` — Group call identifier. The group call must be previously received through getGroupCall and must be joined or being joined.
    # 
    # _@param_ `limit` — The maximum number of participants to load; up to 100.
    def load_group_call_participants: (group_call_id: Integer, limit: Integer) -> TD::Types::Ok

    # Closes the TDLib instance after a proper logout.
    # Requires an available network connection.
    # All local data will be destroyed.
    # After the logout completes, updateAuthorizationState with authorizationStateClosed will be sent.
    def log_out: () -> TD::Types::Ok

    # Informs TDLib that the chat is opened by the user.
    # Many useful activities depend on the chat being opened or closed (e.g., in supergroups and channels all updates are
    #   received only for opened chats).
    # 
    # _@param_ `chat_id` — Chat identifier.
    def open_chat: (chat_id: Integer) -> TD::Types::Ok

    # Informs TDLib that the message content has been opened (e.g., the user has opened a photo, video, document,
    #   location or venue, or has listened to an audio file or voice note message).
    # An updateMessageContentOpened update will be generated if something has changed.
    # 
    # _@param_ `chat_id` — Chat identifier of the message.
    # 
    # _@param_ `message_id` — Identifier of the message with the opened content.
    def open_message_content: (chat_id: Integer, message_id: Integer) -> TD::Types::Ok

    # Optimizes storage usage, i.e.
    # deletes some files and returns new storage usage statistics.
    # Secret thumbnails can't be deleted.
    # 
    # _@param_ `size` — Limit on the total size of files after deletion, in bytes. Pass -1 to use the default limit.
    # 
    # _@param_ `ttl` — Limit on the time that has passed since the last time a file was accessed (or creation time for some filesystems). Pass -1 to use the default limit.
    # 
    # _@param_ `count` — Limit on the total count of files after deletion. Pass -1 to use the default limit.
    # 
    # _@param_ `immunity_delay` — The amount of time after the creation of a file during which it can't be deleted, in seconds. Pass -1 to use the default value.
    # 
    # _@param_ `file_types` — If non-empty, only files with the given types are considered. By default, all types except thumbnails, profile photos, stickers and wallpapers are deleted.
    # 
    # _@param_ `chat_ids` — If non-empty, only files from the given chats are considered. Use 0 as chat identifier to delete files not belonging to any chat (e.g., profile photos).
    # 
    # _@param_ `exclude_chat_ids` — If non-empty, files from the given chats are excluded. Use 0 as chat identifier to exclude all files not belonging to any chat (e.g., profile photos).
    # 
    # _@param_ `return_deleted_file_statistics` — Pass true if statistics about the files that were deleted must be returned instead of the whole storage usage statistics. Affects only returned statistics.
    # 
    # _@param_ `chat_limit` — Same as in getStorageStatistics. Affects only returned statistics.
    def optimize_storage: (
                            size: Integer,
                            ttl: Integer,
                            count: Integer,
                            immunity_delay: Integer,
                            file_types: ::Array[TD::Types::FileType],
                            chat_ids: ::Array[Integer],
                            exclude_chat_ids: ::Array[Integer],
                            return_deleted_file_statistics: bool,
                            chat_limit: Integer
                          ) -> TD::Types::StorageStatistics

    # Parses Markdown entities in a human-friendly format, ignoring markup errors.
    # Can be called synchronously.
    # 
    # _@param_ `text` — The text to parse. For example, "__italic__ ~~strikethrough~~ ||spoiler|| **bold** `code` ```pre``` __[italic__ text_url](telegram.org) __italic**bold italic__bold**".
    def parse_markdown: (text: TD::Types::FormattedText) -> TD::Types::FormattedText

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Parses Bold, Italic, Underline, Strikethrough, Spoiler, Code, Pre, PreCode, TextUrl and MentionName entities
    #   contained in the text.
    # Can be called synchronously.
    # 
    # _@param_ `text` — The text to parse.
    # 
    # _@param_ `parse_mode` — Text parse mode.
    def parse_text_entities: (text: TD::Types::String, parse_mode: TD::Types::TextParseMode) -> TD::Types::FormattedText

    # Pins a message in a chat; requires can_pin_messages rights or can_edit_messages rights in the channel.
    # 
    # _@param_ `chat_id` — Identifier of the chat.
    # 
    # _@param_ `message_id` — Identifier of the new pinned message.
    # 
    # _@param_ `disable_notification` — True, if there must be no notification about the pinned message. Notifications are always disabled in channels and private chats.
    # 
    # _@param_ `only_for_self` — True, if the message needs to be pinned for one side only; private chats only.
    def pin_chat_message: (
                            chat_id: Integer,
                            message_id: Integer,
                            disable_notification: bool,
                            only_for_self: bool
                          ) -> TD::Types::Ok

    # Computes time needed to receive a response from a Telegram server through a proxy.
    # Can be called before authorization.
    # 
    # _@param_ `proxy_id` — Proxy identifier. Use 0 to ping a Telegram server without a proxy.
    def ping_proxy: (proxy_id: Integer) -> TD::Types::Seconds

    # Handles a pending join request in a chat.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `user_id` — Identifier of the user that sent the request.
    # 
    # _@param_ `approve` — True, if the request is approved. Otherwise the request is declined.
    def process_chat_join_request: (chat_id: Integer, user_id: Integer, approve: bool) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Handles all pending join requests for a given link in a chat.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `invite_link` — Invite link for which to process join requests. If empty, all join requests will be processed. Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for other links.
    # 
    # _@param_ `approve` — True, if the requests are approved. Otherwise the requests are declined.
    def process_chat_join_requests: (chat_id: Integer, invite_link: TD::Types::String, approve: bool) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Handles a push notification.
    # Returns error with code 406 if the push notification is not supported and connection to the server is required to
    #   fetch new data.
    # Can be called before authorization.
    # 
    # _@param_ `payload` — JSON-encoded push notification payload with all fields sent by the server, and "google.sent_time" and "google.notification.sound" fields added.
    def process_push_notification: (payload: TD::Types::String) -> TD::Types::Ok

    # Marks all mentions in a chat as read.
    # 
    # _@param_ `chat_id` — Chat identifier.
    def read_all_chat_mentions: (chat_id: Integer) -> TD::Types::Ok

    # Marks all reactions in a chat as read.
    # 
    # _@param_ `chat_id` — Chat identifier.
    def read_all_chat_reactions: (chat_id: Integer) -> TD::Types::Ok

    # Reads a part of a file from the TDLib file cache and returns read bytes.
    # This method is intended to be used only if the application has no direct access to TDLib's file system, because it
    #   is usually slower than a direct read from the file.
    # 
    # _@param_ `file_id` — Identifier of the file. The file must be located in the TDLib file cache.
    # 
    # _@param_ `offset` — The offset from which to read the file.
    # 
    # _@param_ `count` — Number of bytes to read. An error will be returned if there are not enough bytes available in the file from the specified position. Pass 0 to read all available data from the specified position.
    def read_file_part: (file_id: Integer, offset: Integer, count: Integer) -> TD::Types::FilePart

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Recovers the password with a password recovery code sent to an email address that was previously set up.
    # Works only when the current authorization state is authorizationStateWaitPassword.
    # 
    # _@param_ `recovery_code` — Recovery code to check.
    # 
    # _@param_ `new_password` — New password of the user; may be empty to remove the password.
    # 
    # _@param_ `new_hint` — New password hint; may be empty.
    def recover_authentication_password: (recovery_code: TD::Types::String, ?new_password: TD::Types::String?, ?new_hint: TD::Types::String?) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Recovers the 2-step verification password using a recovery code sent to an email address that was previously set
    #   up.
    # 
    # _@param_ `recovery_code` — Recovery code to check.
    # 
    # _@param_ `new_password` — New password of the user; may be empty to remove the password.
    # 
    # _@param_ `new_hint` — New password hint; may be empty.
    def recover_password: (recovery_code: TD::Types::String, ?new_password: TD::Types::String?, ?new_hint: TD::Types::String?) -> TD::Types::PasswordState

    # Registers the currently used device for receiving push notifications.
    # Returns a globally unique identifier of the push notification subscription.
    # 
    # _@param_ `device_token` — Device token.
    # 
    # _@param_ `other_user_ids` — List of user identifiers of other users currently using the application.
    def register_device: (device_token: TD::Types::DeviceToken, other_user_ids: ::Array[Integer]) -> TD::Types::PushReceiverId

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Finishes user registration.
    # Works only when the current authorization state is authorizationStateWaitRegistration.
    # 
    # _@param_ `first_name` — The first name of the user; 1-64 characters.
    # 
    # _@param_ `last_name` — The last name of the user; 0-64 characters.
    def register_user: (first_name: TD::Types::String, last_name: TD::Types::String) -> TD::Types::Ok

    # Removes background from the list of installed backgrounds.
    # 
    # _@param_ `background_id` — The background identifier.
    def remove_background: (background_id: Integer) -> TD::Types::Ok

    # Removes a chat action bar without any other action.
    # 
    # _@param_ `chat_id` — Chat identifier.
    def remove_chat_action_bar: (chat_id: Integer) -> TD::Types::Ok

    # Removes users from the contact list.
    # 
    # _@param_ `user_ids` — Identifiers of users to be deleted.
    def remove_contacts: (user_ids: ::Array[Integer]) -> TD::Types::Ok

    # Removes a sticker from the list of favorite stickers.
    # 
    # _@param_ `sticker` — Sticker file to delete from the list.
    def remove_favorite_sticker: (sticker: TD::Types::InputFile) -> TD::Types::Ok

    # Removes an active notification from notification list.
    # Needs to be called only if the notification is removed by the current user.
    # 
    # _@param_ `notification_group_id` — Identifier of notification group to which the notification belongs.
    # 
    # _@param_ `notification_id` — Identifier of removed notification.
    def remove_notification: (notification_group_id: Integer, notification_id: Integer) -> TD::Types::Ok

    # Removes a group of active notifications.
    # Needs to be called only if the notification group is removed by the current user.
    # 
    # _@param_ `notification_group_id` — Notification group identifier.
    # 
    # _@param_ `max_notification_id` — The maximum identifier of removed notifications.
    def remove_notification_group: (notification_group_id: Integer, max_notification_id: Integer) -> TD::Types::Ok

    # Removes a proxy server.
    # Can be called before authorization.
    # 
    # _@param_ `proxy_id` — Proxy identifier.
    def remove_proxy: (proxy_id: Integer) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Removes a hashtag from the list of recently used hashtags.
    # 
    # _@param_ `hashtag` — Hashtag to delete.
    def remove_recent_hashtag: (hashtag: TD::Types::String) -> TD::Types::Ok

    # Removes a sticker from the list of recently used stickers.
    # 
    # _@param_ `is_attached` — Pass true to remove the sticker from the list of stickers recently attached to photo or video files; pass false to remove the sticker from the list of recently sent stickers.
    # 
    # _@param_ `sticker` — Sticker file to delete.
    def remove_recent_sticker: (is_attached: bool, sticker: TD::Types::InputFile) -> TD::Types::Ok

    # Removes a chat from the list of recently found chats.
    # 
    # _@param_ `chat_id` — Identifier of the chat to be removed.
    def remove_recently_found_chat: (chat_id: Integer) -> TD::Types::Ok

    # Removes an animation from the list of saved animations.
    # 
    # _@param_ `animation` — Animation file to be removed.
    def remove_saved_animation: (animation: TD::Types::InputFile) -> TD::Types::Ok

    # Removes a sticker from the set to which it belongs; for bots only.
    # The sticker set must have been created by the bot.
    # 
    # _@param_ `sticker` — Sticker.
    def remove_sticker_from_set: (sticker: TD::Types::InputFile) -> TD::Types::Ok

    # Removes a chat from the list of frequently used chats.
    # Supported only if the chat info database is enabled.
    # 
    # _@param_ `category` — Category of frequently used chats.
    # 
    # _@param_ `chat_id` — Chat identifier.
    def remove_top_chat: (category: TD::Types::TopChatCategory, chat_id: Integer) -> TD::Types::Ok

    # Changes the order of chat filters.
    # 
    # _@param_ `chat_filter_ids` — Identifiers of chat filters in the new correct order.
    def reorder_chat_filters: (chat_filter_ids: ::Array[Integer]) -> TD::Types::Ok

    # Changes the order of installed sticker sets.
    # 
    # _@param_ `is_masks` — Pass true to change the order of mask sticker sets; pass false to change the order of ordinary sticker sets.
    # 
    # _@param_ `sticker_set_ids` — Identifiers of installed sticker sets in the new correct order.
    def reorder_installed_sticker_sets: (is_masks: bool, sticker_set_ids: ::Array[Integer]) -> TD::Types::Ok

    # Replaces current primary invite link for a chat with a new primary invite link.
    # Available for basic groups, supergroups, and channels.
    # Requires administrator privileges and can_invite_users right.
    # 
    # _@param_ `chat_id` — Chat identifier.
    def replace_primary_chat_invite_link: (chat_id: Integer) -> TD::Types::ChatInviteLink

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Reports a chat to the Telegram moderators.
    # A chat can be reported only from the chat action bar, or if chat.can_be_reported.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `message_ids` — Identifiers of reported messages, if any.
    # 
    # _@param_ `reason` — The reason for reporting the chat.
    # 
    # _@param_ `text` — Additional report details; 0-1024 characters.
    def report_chat: (
                       chat_id: Integer,
                       message_ids: ::Array[Integer],
                       reason: TD::Types::ChatReportReason,
                       text: TD::Types::String
                     ) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Reports a chat photo to the Telegram moderators.
    # A chat photo can be reported only if chat.can_be_reported.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `file_id` — Identifier of the photo to report. Only full photos from {TD::Types::ChatPhoto} can be reported.
    # 
    # _@param_ `reason` — The reason for reporting the chat photo.
    # 
    # _@param_ `text` — Additional report details; 0-1024 characters.
    def report_chat_photo: (
                             chat_id: Integer,
                             file_id: Integer,
                             reason: TD::Types::ChatReportReason,
                             text: TD::Types::String
                           ) -> TD::Types::Ok

    # Reports messages in a supergroup as spam; requires administrator rights in the supergroup.
    # 
    # _@param_ `supergroup_id` — Supergroup identifier.
    # 
    # _@param_ `message_ids` — Identifiers of messages to report.
    def report_supergroup_spam: (supergroup_id: Integer, message_ids: ::Array[Integer]) -> TD::Types::Ok

    # Requests to send a password recovery code to an email address that was previously set up.
    # Works only when the current authorization state is authorizationStateWaitPassword.
    def request_authentication_password_recovery: () -> TD::Types::Ok

    # Requests to send a 2-step verification password recovery code to an email address that was previously set up.
    def request_password_recovery: () -> TD::Types::EmailAddressAuthenticationCodeInfo

    # Requests QR code authentication by scanning a QR code on another logged in device.
    # Works only when the current authorization state is authorizationStateWaitPhoneNumber, or if there is no pending
    #   authentication query and the current authorization state is authorizationStateWaitCode,
    #   authorizationStateWaitRegistration, or authorizationStateWaitPassword.
    # 
    # _@param_ `other_user_ids` — List of user identifiers of other users currently using the application.
    def request_qr_code_authentication: (other_user_ids: ::Array[Integer]) -> TD::Types::Ok

    # Re-sends an authentication code to the user.
    # Works only when the current authorization state is authorizationStateWaitCode, the next_code_type of the result is
    #   not null and the server-specified timeout has passed.
    def resend_authentication_code: () -> TD::Types::Ok

    # Re-sends the authentication code sent to confirm a new phone number for the current user.
    # Works only if the previously received authenticationCodeInfo next_code_type was not null and the server-specified
    #   timeout has passed.
    def resend_change_phone_number_code: () -> TD::Types::AuthenticationCodeInfo

    # Re-sends the code to verify an email address to be added to a user's Telegram Passport.
    def resend_email_address_verification_code: () -> TD::Types::EmailAddressAuthenticationCodeInfo

    # Resends messages which failed to send.
    # Can be called only for messages for which messageSendingStateFailed.can_retry is true and after specified in
    #   messageSendingStateFailed.retry_after time passed.
    # If a message is re-sent, the corresponding failed to send message is deleted.
    # Returns the sent messages in the same order as the message identifiers passed in message_ids.
    # If a message can't be re-sent, null will be returned instead of the message.
    # 
    # _@param_ `chat_id` — Identifier of the chat to send messages.
    # 
    # _@param_ `message_ids` — Identifiers of the messages to resend. Message identifiers must be in a strictly increasing order.
    def resend_messages: (chat_id: Integer, message_ids: ::Array[Integer]) -> TD::Types::Messages

    # Resends phone number confirmation code.
    def resend_phone_number_confirmation_code: () -> TD::Types::AuthenticationCodeInfo

    # Re-sends the code to verify a phone number to be added to a user's Telegram Passport.
    def resend_phone_number_verification_code: () -> TD::Types::AuthenticationCodeInfo

    # Resends the 2-step verification recovery email address verification code.
    def resend_recovery_email_address_code: () -> TD::Types::PasswordState

    # Resets all notification settings to their default values.
    # By default, all chats are unmuted, the sound is set to "default" and message previews are shown.
    def reset_all_notification_settings: () -> TD::Types::Ok

    # Resets list of installed backgrounds to its default value.
    def reset_backgrounds: () -> TD::Types::Ok

    # Resets all network data usage statistics to zero.
    # Can be called before authorization.
    def reset_network_statistics: () -> TD::Types::Ok

    # Removes 2-step verification password without previous password and access to recovery email address.
    # The password can't be reset immediately and the request needs to be repeated after the specified time.
    def reset_password: () -> TD::Types::ResetPasswordResult

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Revokes invite link for a chat.
    # Available for basic groups, supergroups, and channels.
    # Requires administrator privileges and can_invite_users right in the chat for own links and owner privileges for
    #   other links.
    # If a primary link is revoked, then additionally to the revoked link returns new primary link.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `invite_link` — Invite link to be revoked.
    def revoke_chat_invite_link: (chat_id: Integer, invite_link: TD::Types::String) -> TD::Types::ChatInviteLinks

    # Revokes invite link for a group call.
    # Requires groupCall.can_be_managed group call flag.
    # 
    # _@param_ `group_call_id` — Group call identifier.
    def revoke_group_call_invite_link: (group_call_id: Integer) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Saves application log event on the server.
    # Can be called before authorization.
    # 
    # _@param_ `type` — Event type.
    # 
    # _@param_ `chat_id` — Optional chat identifier, associated with the event.
    # 
    # _@param_ `data` — The log event data.
    def save_application_log_event: (_type: TD::Types::String, chat_id: Integer, data: TD::Types::JsonValue) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Searches for a background by its name.
    # 
    # _@param_ `name` — The name of the background.
    def search_background: (name: TD::Types::String) -> TD::Types::Background

    # Searches for call messages.
    # Returns the results in reverse chronological order (i.
    # e., in order of decreasing message_id).
    # For optimal performance, the number of returned messages is chosen by TDLib.
    # 
    # _@param_ `from_message_id` — Identifier of the message from which to search; use 0 to get results from the last message.
    # 
    # _@param_ `limit` — The maximum number of messages to be returned; up to 100. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit.
    # 
    # _@param_ `only_missed` — If true, returns only messages with missed/declined calls.
    def search_call_messages: (from_message_id: Integer, limit: Integer, only_missed: bool) -> TD::Types::Messages

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Searches for a specified query in the first name, last name and username of the members of a specified chat.
    # Requires administrator rights in channels.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `query` — Query to search for.
    # 
    # _@param_ `limit` — The maximum number of users to be returned; up to 200.
    # 
    # _@param_ `filter` — The type of users to search for; pass null to search among all chat members.
    def search_chat_members: (
                               chat_id: Integer,
                               query: TD::Types::String,
                               limit: Integer,
                               filter: TD::Types::ChatMembersFilter
                             ) -> TD::Types::ChatMembers

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Searches for messages with given words in the chat.
    # Returns the results in reverse chronological order, i.e.
    # in order of decreasing message_id.
    # Cannot be used in secret chats with a non-empty query (searchSecretMessages must be used instead), or without an
    #   enabled message database.
    # For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified
    #   limit.
    # 
    # _@param_ `chat_id` — Identifier of the chat in which to search messages.
    # 
    # _@param_ `query` — Query to search for.
    # 
    # _@param_ `sender_id` — Identifier of the sender of messages to search for; pass null to search for messages from any sender. Not supported in secret chats.
    # 
    # _@param_ `from_message_id` — Identifier of the message starting from which history must be fetched; use 0 to get results from the last message.
    # 
    # _@param_ `offset` — Specify 0 to get results from exactly the from_message_id or a negative offset to get the specified message and some newer messages.
    # 
    # _@param_ `limit` — The maximum number of messages to be returned; must be positive and can't be greater than 100. If the offset is negative, the limit must be greater than -offset. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit.
    # 
    # _@param_ `filter` — Additional filter for messages to search; pass null to search for all messages.
    # 
    # _@param_ `message_thread_id` — If not 0, only messages in the specified thread will be returned; supergroups only.
    def search_chat_messages: (
                                chat_id: Integer,
                                query: TD::Types::String,
                                sender_id: TD::Types::MessageSender,
                                from_message_id: Integer,
                                offset: Integer,
                                limit: Integer,
                                filter: TD::Types::SearchMessagesFilter,
                                message_thread_id: Integer
                              ) -> TD::Types::Messages

    # Returns information about the recent locations of chat members that were sent to the chat.
    # Returns up to 1 location message per user.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `limit` — The maximum number of messages to be returned.
    def search_chat_recent_location_messages: (chat_id: Integer, limit: Integer) -> TD::Types::Messages

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Searches for the specified query in the title and username of already known chats, this is an offline request.
    # Returns chats in the order seen in the main chat list.
    # 
    # _@param_ `query` — Query to search for. If the query is empty, returns up to 50 recently found chats.
    # 
    # _@param_ `limit` — The maximum number of chats to be returned.
    def search_chats: (query: TD::Types::String, limit: Integer) -> TD::Types::Chats

    # Returns a list of users and location-based supergroups nearby.
    # The list of users nearby will be updated for 60 seconds after the request by the updates updateUsersNearby.
    # The request must be sent again every 25 seconds with adjusted location to not miss new chats.
    # 
    # _@param_ `location` — Current user location.
    def search_chats_nearby: (location: TD::Types::Location) -> TD::Types::ChatsNearby

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Searches for the specified query in the title and username of already known chats via request to the server.
    # Returns chats in the order seen in the main chat list.
    # 
    # _@param_ `query` — Query to search for.
    # 
    # _@param_ `limit` — The maximum number of chats to be returned.
    def search_chats_on_server: (query: TD::Types::String, limit: Integer) -> TD::Types::Chats

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Searches for the specified query in the first names, last names and usernames of the known user contacts.
    # 
    # _@param_ `query` — Query to search for; may be empty to return all contacts.
    # 
    # _@param_ `limit` — The maximum number of users to be returned.
    def search_contacts: (?query: TD::Types::String?, limit: Integer) -> TD::Types::Users

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Searches for emojis by keywords.
    # Supported only if the file database is enabled.
    # 
    # _@param_ `text` — Text to search for.
    # 
    # _@param_ `exact_match` — True, if only emojis, which exactly match text needs to be returned.
    # 
    # _@param_ `input_language_codes` — List of possible IETF language tags of the user's input language; may be empty if unknown.
    def search_emojis: (text: TD::Types::String, exact_match: bool, ?input_language_codes: ::Array[TD::Types::String]?) -> TD::Types::Emojis

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Searches for recently used hashtags by their prefix.
    # 
    # _@param_ `prefix` — Hashtag prefix to search for.
    # 
    # _@param_ `limit` — The maximum number of hashtags to be returned.
    def search_hashtags: (prefix: TD::Types::String, limit: Integer) -> TD::Types::Hashtags

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Searches for installed sticker sets by looking for specified query in their title and name.
    # 
    # _@param_ `is_masks` — Pass true to return mask sticker sets; pass false to return ordinary sticker sets.
    # 
    # _@param_ `query` — Query to search for.
    # 
    # _@param_ `limit` — The maximum number of sticker sets to return.
    def search_installed_sticker_sets: (is_masks: bool, query: TD::Types::String, limit: Integer) -> TD::Types::StickerSets

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Searches for messages in all chats except secret chats.
    # Returns the results in reverse chronological order (i.e., in order of decreasing (date, chat_id, message_id)).
    # For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified
    #   limit.
    # 
    # _@param_ `chat_list` — Chat list in which to search messages; pass null to search in all chats regardless of their chat list. Only Main and Archive chat lists are supported.
    # 
    # _@param_ `query` — Query to search for.
    # 
    # _@param_ `offset_date` — The date of the message starting from which the results need to be fetched. Use 0 or any date in the future to get results from the last message.
    # 
    # _@param_ `offset_chat_id` — The chat identifier of the last found message, or 0 for the first request.
    # 
    # _@param_ `offset_message_id` — The message identifier of the last found message, or 0 for the first request.
    # 
    # _@param_ `limit` — The maximum number of messages to be returned; up to 100. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit.
    # 
    # _@param_ `filter` — Additional filter for messages to search; pass null to search for all messages. Filters searchMessagesFilterMention, searchMessagesFilterUnreadMention, searchMessagesFilterUnreadReaction, searchMessagesFilterFailedToSend, and {TD::Types::SearchMessagesFilter::Pinned} are unsupported in this function.
    # 
    # _@param_ `min_date` — If not 0, the minimum date of the messages to return.
    # 
    # _@param_ `max_date` — If not 0, the maximum date of the messages to return.
    def search_messages: (
                           chat_list: TD::Types::ChatList,
                           query: TD::Types::String,
                           offset_date: Integer,
                           offset_chat_id: Integer,
                           offset_message_id: Integer,
                           limit: Integer,
                           filter: TD::Types::SearchMessagesFilter,
                           min_date: Integer,
                           max_date: Integer
                         ) -> TD::Types::Messages

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Searches a public chat by its username.
    # Currently, only private chats, supergroups and channels can be public.
    # Returns the chat if found; otherwise an error is returned.
    # 
    # _@param_ `username` — Username to be resolved.
    def search_public_chat: (username: TD::Types::String) -> TD::Types::Chat

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Searches public chats by looking for specified query in their username and title.
    # Currently, only private chats, supergroups and channels can be public.
    # Returns a meaningful number of results.
    # Excludes private chats with contacts and chats from the chat list from the results.
    # 
    # _@param_ `query` — Query to search for.
    def search_public_chats: (query: TD::Types::String) -> TD::Types::Chats

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Searches for messages in secret chats.
    # Returns the results in reverse chronological order.
    # For optimal performance, the number of returned messages is chosen by TDLib.
    # 
    # _@param_ `chat_id` — Identifier of the chat in which to search. Specify 0 to search in all secret chats.
    # 
    # _@param_ `query` — Query to search for. If empty, searchChatMessages must be used instead.
    # 
    # _@param_ `offset` — Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results.
    # 
    # _@param_ `limit` — The maximum number of messages to be returned; up to 100. For optimal performance, the number of returned messages is chosen by TDLib and can be smaller than the specified limit.
    # 
    # _@param_ `filter` — Additional filter for messages to search; pass null to search for all messages.
    def search_secret_messages: (
                                  chat_id: Integer,
                                  query: TD::Types::String,
                                  offset: TD::Types::String,
                                  limit: Integer,
                                  filter: TD::Types::SearchMessagesFilter
                                ) -> TD::Types::FoundMessages

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Searches for a sticker set by its name.
    # 
    # _@param_ `name` — Name of the sticker set.
    def search_sticker_set: (name: TD::Types::String) -> TD::Types::StickerSet

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Searches for ordinary sticker sets by looking for specified query in their title and name.
    # Excludes installed sticker sets from the results.
    # 
    # _@param_ `query` — Query to search for.
    def search_sticker_sets: (query: TD::Types::String) -> TD::Types::StickerSets

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Searches for stickers from public sticker sets that correspond to a given emoji.
    # 
    # _@param_ `emoji` — String representation of emoji; must be non-empty.
    # 
    # _@param_ `limit` — The maximum number of stickers to be returned.
    def search_stickers: (emoji: TD::Types::String, ?limit: Integer?) -> TD::Types::Stickers

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Invites a bot to a chat (if it is not yet a member) and sends it the /start command.
    # Bots can't be invited to a private chat other than the chat with the bot.
    # Bots can't be invited to channels (although they can be added as admins) and secret chats.
    # Returns the sent message.
    # 
    # _@param_ `bot_user_id` — Identifier of the bot.
    # 
    # _@param_ `chat_id` — Identifier of the target chat.
    # 
    # _@param_ `parameter` — A hidden parameter sent to the bot for deep linking purposes (https://core.telegram.org/bots#deep-linking).
    def send_bot_start_message: (bot_user_id: Integer, chat_id: Integer, parameter: TD::Types::String) -> TD::Types::Message

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Sends debug information for a call.
    # 
    # _@param_ `call_id` — Call identifier.
    # 
    # _@param_ `debug_information` — Debug information in application-specific format.
    def send_call_debug_information: (call_id: Integer, debug_information: TD::Types::String) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Sends a call rating.
    # 
    # _@param_ `call_id` — Call identifier.
    # 
    # _@param_ `rating` — Call rating; 1-5.
    # 
    # _@param_ `comment` — An optional user comment if the rating is less than 5.
    # 
    # _@param_ `problems` — List of the exact types of problems with the call, specified by the user.
    def send_call_rating: (
                            call_id: Integer,
                            rating: Integer,
                            comment: TD::Types::String,
                            problems: ::Array[TD::Types::CallProblem]
                          ) -> TD::Types::Ok

    # Sends call signaling data.
    # 
    # _@param_ `call_id` — Call identifier.
    # 
    # _@param_ `data` — The data.
    def send_call_signaling_data: (call_id: Integer, data: String) -> TD::Types::Ok

    # Sends a notification about user activity in a chat.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `message_thread_id` — If not 0, a message thread identifier in which the action was performed.
    # 
    # _@param_ `action` — The action description; pass null to cancel the currently active action.
    def send_chat_action: (chat_id: Integer, message_thread_id: Integer, action: TD::Types::ChatAction) -> TD::Types::Ok

    # Sends a notification about a screenshot taken in a chat.
    # Supported only in private and secret chats.
    # 
    # _@param_ `chat_id` — Chat identifier.
    def send_chat_screenshot_taken_notification: (chat_id: Integer) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Sends a custom request; for bots only.
    # 
    # _@param_ `method` — The method name.
    # 
    # _@param_ `parameters` — JSON-serialized method parameters.
    def send_custom_request: (method: TD::Types::String, parameters: TD::Types::String) -> TD::Types::CustomRequestResult

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Sends a code to verify an email address to be added to a user's Telegram Passport.
    # 
    # _@param_ `email_address` — Email address.
    def send_email_address_verification_code: (email_address: TD::Types::String) -> TD::Types::EmailAddressAuthenticationCodeInfo

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Sends the result of an inline query as a message.
    # Returns the sent message.
    # Always clears a chat draft message.
    # 
    # _@param_ `chat_id` — Target chat.
    # 
    # _@param_ `message_thread_id` — If not 0, a message thread identifier in which the message will be sent.
    # 
    # _@param_ `reply_to_message_id` — Identifier of a message to reply to or 0.
    # 
    # _@param_ `options` — Options to be used to send the message; pass null to use default options.
    # 
    # _@param_ `query_id` — Identifier of the inline query.
    # 
    # _@param_ `result_id` — Identifier of the inline result.
    # 
    # _@param_ `hide_via_bot` — If true, there will be no mention of a bot, via which the message is sent. Can be used only for bots GetOption("animation_search_bot_username"), GetOption("photo_search_bot_username") and GetOption("venue_search_bot_username").
    def send_inline_query_result_message: (
                                            chat_id: Integer,
                                            message_thread_id: Integer,
                                            reply_to_message_id: Integer,
                                            options: TD::Types::MessageSendOptions,
                                            query_id: Integer,
                                            result_id: TD::Types::String,
                                            hide_via_bot: bool
                                          ) -> TD::Types::Message

    # Sends a message.
    # Returns the sent message.
    # 
    # _@param_ `chat_id` — Target chat.
    # 
    # _@param_ `message_thread_id` — If not 0, a message thread identifier in which the message will be sent.
    # 
    # _@param_ `reply_to_message_id` — Identifier of the message to reply to or 0.
    # 
    # _@param_ `options` — Options to be used to send the message; pass null to use default options.
    # 
    # _@param_ `reply_markup` — Markup for replying to the message; pass null if none; for bots only.
    # 
    # _@param_ `input_message_content` — The content of the message to be sent.
    def send_message: (
                        chat_id: Integer,
                        message_thread_id: Integer,
                        reply_to_message_id: Integer,
                        options: TD::Types::MessageSendOptions,
                        reply_markup: TD::Types::ReplyMarkup,
                        input_message_content: TD::Types::InputMessageContent
                      ) -> TD::Types::Message

    # Sends 2-10 messages grouped together into an album.
    # Currently, only audio, document, photo and video messages can be grouped into an album.
    # Documents and audio files can be only grouped in an album with messages of the same type.
    # Returns sent messages.
    # 
    # _@param_ `chat_id` — Target chat.
    # 
    # _@param_ `message_thread_id` — If not 0, a message thread identifier in which the messages will be sent.
    # 
    # _@param_ `reply_to_message_id` — Identifier of a message to reply to or 0.
    # 
    # _@param_ `options` — Options to be used to send the messages; pass null to use default options.
    # 
    # _@param_ `input_message_contents` — Contents of messages to be sent. At most 10 messages can be added to an album.
    def send_message_album: (
                              chat_id: Integer,
                              message_thread_id: Integer,
                              reply_to_message_id: Integer,
                              options: TD::Types::MessageSendOptions,
                              input_message_contents: ::Array[TD::Types::InputMessageContent]
                            ) -> TD::Types::Messages

    # Sends a Telegram Passport authorization form, effectively sharing data with the service.
    # This method must be called after getPassportAuthorizationFormAvailableElements if some previously available
    #   elements are going to be reused.
    # 
    # _@param_ `autorization_form_id` — Authorization form identifier.
    # 
    # _@param_ `types` — Types of Telegram Passport elements chosen by user to complete the authorization form.
    def send_passport_authorization_form: (autorization_form_id: Integer, types: ::Array[TD::Types::PassportElementType]) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Sends a filled-out payment form to the bot for final verification.
    # 
    # _@param_ `chat_id` — Chat identifier of the Invoice message.
    # 
    # _@param_ `message_id` — Message identifier.
    # 
    # _@param_ `payment_form_id` — Payment form identifier returned by getPaymentForm.
    # 
    # _@param_ `order_info_id` — Identifier returned by validateOrderInfo, or an empty string.
    # 
    # _@param_ `shipping_option_id` — Identifier of a chosen shipping option, if applicable.
    # 
    # _@param_ `credentials` — The credentials chosen by user for payment.
    # 
    # _@param_ `tip_amount` — Chosen by the user amount of tip in the smallest units of the currency.
    def send_payment_form: (
                             chat_id: Integer,
                             message_id: Integer,
                             payment_form_id: Integer,
                             order_info_id: TD::Types::String,
                             shipping_option_id: TD::Types::String,
                             credentials: TD::Types::InputCredentials,
                             tip_amount: Integer
                           ) -> TD::Types::PaymentResult

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Sends phone number confirmation code to handle links of the type internalLinkTypePhoneNumberConfirmation.
    # 
    # _@param_ `hash` — Hash value from the link.
    # 
    # _@param_ `phone_number` — Phone number value from the link.
    # 
    # _@param_ `settings` — Settings for the authentication of the user's phone number; pass null to use default settings.
    def send_phone_number_confirmation_code: (hash: TD::Types::String, phone_number: TD::Types::String, settings: TD::Types::PhoneNumberAuthenticationSettings) -> TD::Types::AuthenticationCodeInfo

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Sends a code to verify a phone number to be added to a user's Telegram Passport.
    # 
    # _@param_ `phone_number` — The phone number of the user, in international format.
    # 
    # _@param_ `settings` — Settings for the authentication of the user's phone number; pass null to use default settings.
    def send_phone_number_verification_code: (phone_number: TD::Types::String, settings: TD::Types::PhoneNumberAuthenticationSettings) -> TD::Types::AuthenticationCodeInfo

    # Changes the period of inactivity after which the account of the current user will automatically be deleted.
    # 
    # _@param_ `ttl` — New account TTL.
    def set_account_ttl: (ttl: TD::Types::AccountTtl) -> TD::Types::Ok

    # Succeeds after a specified amount of time has passed.
    # Can be called before initialization.
    # 
    # _@param_ `seconds` — Number of seconds before the function returns.
    def set_alarm: (seconds: Float) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Sets the phone number of the user and sends an authentication code to the user.
    # Works only when the current authorization state is authorizationStateWaitPhoneNumber, or if there is no pending
    #   authentication query and the current authorization state is authorizationStateWaitCode,
    #   authorizationStateWaitRegistration, or authorizationStateWaitPassword.
    # 
    # _@param_ `phone_number` — The phone number of the user, in international format.
    # 
    # _@param_ `settings` — Settings for the authentication of the user's phone number; pass null to use default settings.
    def set_authentication_phone_number: (phone_number: TD::Types::String, settings: TD::Types::PhoneNumberAuthenticationSettings) -> TD::Types::Ok

    # Sets auto-download settings.
    # 
    # _@param_ `settings` — New user auto-download settings.
    # 
    # _@param_ `type` — Type of the network for which the new settings are relevant.
    def set_auto_download_settings: (settings: TD::Types::AutoDownloadSettings, _type: TD::Types::NetworkType) -> TD::Types::Ok

    # Changes the background selected by the user; adds background to the list of installed backgrounds.
    # 
    # _@param_ `background` — The input background to use; pass null to create a new filled backgrounds or to remove the current background.
    # 
    # _@param_ `type` — Background type; pass null to use the default type of the remote background or to remove the current background.
    # 
    # _@param_ `for_dark_theme` — True, if the background is chosen for dark theme.
    def set_background: (background: TD::Types::InputBackground, _type: TD::Types::BackgroundType, for_dark_theme: bool) -> TD::Types::Background

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Changes the bio of the current user.
    # 
    # _@param_ `bio` — The new value of the user bio; 0-70 characters without line feeds.
    def set_bio: (bio: TD::Types::String) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Informs the server about the number of pending bot updates if they haven't been processed for a long time; for bots
    #   only.
    # 
    # _@param_ `pending_update_count` — The number of pending updates.
    # 
    # _@param_ `error_message` — The last error message.
    def set_bot_updates_status: (pending_update_count: Integer, error_message: TD::Types::String) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Changes reactions, available in a chat.
    # Available for basic groups, supergroups, and channels.
    # Requires can_change_info administrator right.
    # 
    # _@param_ `chat_id` — Identifier of the chat.
    # 
    # _@param_ `available_reactions` — New list of reactions, available in the chat. All reactions must be active and order of the reactions must be the same as in updateReactions.
    def set_chat_available_reactions: (chat_id: Integer, available_reactions: ::Array[TD::Types::String]) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Changes application-specific data associated with a chat.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `client_data` — New value of client_data.
    def set_chat_client_data: (chat_id: Integer, client_data: TD::Types::String) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Changes information about a chat.
    # Available for basic groups, supergroups, and channels.
    # Requires can_change_info administrator right.
    # 
    # _@param_ `chat_id` — Identifier of the chat.
    # 
    # _@param_ `description` — New chat description; 0-255 characters.
    def set_chat_description: (chat_id: Integer, description: TD::Types::String) -> TD::Types::Ok

    # Changes the discussion group of a channel chat; requires can_change_info administrator right in the channel if it
    #   is specified.
    # 
    # _@param_ `chat_id` — Identifier of the channel chat. Pass 0 to remove a link from the supergroup passed in the second argument to a linked channel chat (requires can_pin_messages rights in the supergroup).
    # 
    # _@param_ `discussion_chat_id` — Identifier of a new channel's discussion group. Use 0 to remove the discussion group. Use the method getSuitableDiscussionChats to find all suitable groups. Basic group chats must be first upgraded to supergroup chats. If new chat members don't have access to old messages in the supergroup, then toggleSupergroupIsAllHistoryAvailable must be used first to change that.
    def set_chat_discussion_group: (chat_id: Integer, discussion_chat_id: Integer) -> TD::Types::Ok

    # Changes the draft message in a chat.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `message_thread_id` — If not 0, a message thread identifier in which the draft was changed.
    # 
    # _@param_ `draft_message` — New draft message; pass null to remove the draft.
    def set_chat_draft_message: (chat_id: Integer, message_thread_id: Integer, draft_message: TD::Types::DraftMessage) -> TD::Types::Ok

    # Changes the location of a chat.
    # Available only for some location-based supergroups, use supergroupFullInfo.can_set_location to check whether the
    #   method is allowed to use.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `location` — New location for the chat; must be valid and not null.
    def set_chat_location: (chat_id: Integer, location: TD::Types::ChatLocation) -> TD::Types::Ok

    # Changes the status of a chat member, needs appropriate privileges.
    # This function is currently not suitable for transferring chat ownership; use transferChatOwnership instead.
    # Use addChatMember or banChatMember if some additional parameters needs to be passed.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `member_id` — Member identifier. Chats can be only banned and unbanned in supergroups and channels.
    # 
    # _@param_ `status` — The new status of the member in the chat.
    def set_chat_member_status: (chat_id: Integer, member_id: TD::Types::MessageSender, status: TD::Types::ChatMemberStatus) -> TD::Types::Ok

    # Selects a message sender to send messages in a chat.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `message_sender_id` — New message sender for the chat.
    def set_chat_message_sender: (chat_id: Integer, message_sender_id: TD::Types::MessageSender) -> TD::Types::Ok

    # Changes the message TTL in a chat.
    # Requires can_delete_messages administrator right in basic groups, supergroups and channels Message TTL can't be
    #   changed in a chat with the current user (Saved Messages) and the chat 777000 (Telegram).
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `ttl` — New TTL value, in seconds; must be one of 0, 86400, 7 * 86400, or 31 * 86400 unless the chat is secret.
    def set_chat_message_ttl: (chat_id: Integer, ttl: Integer) -> TD::Types::Ok

    # Changes the notification settings of a chat.
    # Notification settings of a chat with the current user (Saved Messages) can't be changed.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `notification_settings` — New notification settings for the chat. If the chat is muted for more than 1 week, it is considered to be muted forever.
    def set_chat_notification_settings: (chat_id: Integer, notification_settings: TD::Types::ChatNotificationSettings) -> TD::Types::Ok

    # Changes the chat members permissions.
    # Supported only for basic groups and supergroups.
    # Requires can_restrict_members administrator right.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `permissions` — New non-administrator members permissions in the chat.
    def set_chat_permissions: (chat_id: Integer, permissions: TD::Types::ChatPermissions) -> TD::Types::Ok

    # Changes the photo of a chat.
    # Supported only for basic groups, supergroups and channels.
    # Requires can_change_info administrator right.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `photo` — New chat photo; pass null to delete the chat photo.
    def set_chat_photo: (chat_id: Integer, photo: TD::Types::InputChatPhoto) -> TD::Types::Ok

    # Changes the slow mode delay of a chat.
    # Available only for supergroups; requires can_restrict_members rights.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `slow_mode_delay` — New slow mode delay for the chat, in seconds; must be one of 0, 10, 30, 60, 300, 900, 3600.
    def set_chat_slow_mode_delay: (chat_id: Integer, slow_mode_delay: Integer) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Changes the chat theme.
    # Supported only in private and secret chats.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `theme_name` — Name of the new chat theme; pass an empty string to return the default theme.
    def set_chat_theme: (chat_id: Integer, theme_name: TD::Types::String) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Changes the chat title.
    # Supported only for basic groups, supergroups and channels.
    # Requires can_change_info administrator right.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `title` — New title of the chat; 1-128 characters.
    def set_chat_title: (chat_id: Integer, title: TD::Types::String) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Sets the list of commands supported by the bot for the given user scope and language; for bots only.
    # 
    # _@param_ `scope` — The scope to which the commands are relevant; pass null to change commands in the default bot command scope.
    # 
    # _@param_ `language_code` — A two-letter ISO 639-1 language code. If empty, the commands will be applied to all users from the given scope, for which language there are no dedicated commands.
    # 
    # _@param_ `commands` — List of the bot's commands.
    def set_commands: (scope: TD::Types::BotCommandScope, language_code: TD::Types::String, commands: ::Array[TD::Types::BotCommand]) -> TD::Types::Ok

    # Adds or changes a custom local language pack to the current localization target.
    # 
    # _@param_ `info` — Information about the language pack. Language pack ID must start with 'X', consist only of English letters, digits and hyphens, and must not exceed 64 characters. Can be called before authorization.
    # 
    # _@param_ `strings` — Strings of the new language pack.
    def set_custom_language_pack: (info: TD::Types::LanguagePackInfo, strings: ::Array[TD::Types::LanguagePackString]) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Adds, edits or deletes a string in a custom local language pack.
    # Can be called before authorization.
    # 
    # _@param_ `language_pack_id` — Identifier of a previously added custom local language pack in the current localization target.
    # 
    # _@param_ `new_string` — New language pack string.
    def set_custom_language_pack_string: (language_pack_id: TD::Types::String, new_string: TD::Types::LanguagePackString) -> TD::Types::Ok

    # Changes the database encryption key.
    # Usually the encryption key is never changed and is stored in some OS keychain.
    # 
    # _@param_ `new_encryption_key` — New encryption key.
    def set_database_encryption_key: (new_encryption_key: String) -> TD::Types::Ok

    # Informs TDLib on a file generation progress.
    # 
    # _@param_ `generation_id` — The identifier of the generation process.
    # 
    # _@param_ `expected_size` — Expected size of the generated file, in bytes; 0 if unknown.
    # 
    # _@param_ `local_prefix_size` — The number of bytes already generated.
    def set_file_generation_progress: (generation_id: Integer, expected_size: Integer, local_prefix_size: Integer) -> TD::Types::Ok

    # Updates the game score of the specified user in the game; for bots only.
    # 
    # _@param_ `chat_id` — The chat to which the message with the game belongs.
    # 
    # _@param_ `message_id` — Identifier of the message.
    # 
    # _@param_ `edit_message` — True, if the message needs to be edited.
    # 
    # _@param_ `user_id` — User identifier.
    # 
    # _@param_ `score` — The new score.
    # 
    # _@param_ `force` — Pass true to update the score even if it decreases. If the score is 0, the user will be deleted from the high score table.
    def set_game_score: (
                          chat_id: Integer,
                          message_id: Integer,
                          edit_message: bool,
                          user_id: Integer,
                          score: Integer,
                          force: bool
                        ) -> TD::Types::Message

    # Informs TDLib that speaking state of a participant of an active group has changed.
    # 
    # _@param_ `group_call_id` — Group call identifier.
    # 
    # _@param_ `audio_source` — Group call participant's synchronization audio source identifier, or 0 for the current user.
    # 
    # _@param_ `is_speaking` — True, if the user is speaking.
    def set_group_call_participant_is_speaking: (group_call_id: Integer, audio_source: Integer, is_speaking: bool) -> TD::Types::Ok

    # Changes volume level of a participant of an active group call.
    # If the current user can manage the group call, then the participant's volume level will be changed for all users
    #   with the default volume level.
    # 
    # _@param_ `group_call_id` — Group call identifier.
    # 
    # _@param_ `participant_id` — Participant identifier.
    # 
    # _@param_ `volume_level` — New participant's volume level; 1-20000 in hundreds of percents.
    def set_group_call_participant_volume_level: (group_call_id: Integer, participant_id: TD::Types::MessageSender, volume_level: Integer) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Sets group call title.
    # Requires groupCall.can_be_managed group call flag.
    # 
    # _@param_ `group_call_id` — Group call identifier.
    # 
    # _@param_ `title` — New group call title; 1-64 characters.
    def set_group_call_title: (group_call_id: Integer, title: TD::Types::String) -> TD::Types::Ok

    # Changes the period of inactivity after which sessions will automatically be terminated.
    # 
    # _@param_ `inactive_session_ttl_days` — New number of days of inactivity before sessions will be automatically terminated; 1-366 days.
    def set_inactive_session_ttl: (inactive_session_ttl_days: Integer) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Updates the game score of the specified user in a game; for bots only.
    # 
    # _@param_ `inline_message_id` — Inline message identifier.
    # 
    # _@param_ `edit_message` — True, if the message needs to be edited.
    # 
    # _@param_ `user_id` — User identifier.
    # 
    # _@param_ `score` — The new score.
    # 
    # _@param_ `force` — Pass true to update the score even if it decreases. If the score is 0, the user will be deleted from the high score table.
    def set_inline_game_score: (
                                 inline_message_id: TD::Types::String,
                                 edit_message: bool,
                                 user_id: Integer,
                                 score: Integer,
                                 force: bool
                               ) -> TD::Types::Ok

    # Changes the location of the current user.
    # Needs to be called if GetOption("is_location_visible") is true and location changes for more than 1 kilometer.
    # 
    # _@param_ `location` — The new location of the user.
    def set_location: (location: TD::Types::Location) -> TD::Types::Ok

    # Sets new log stream for internal logging of TDLib.
    # Can be called synchronously.
    # 
    # _@param_ `log_stream` — New log stream.
    def set_log_stream: (log_stream: TD::Types::LogStream) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Sets the verbosity level for a specified TDLib internal log tag.
    # Can be called synchronously.
    # 
    # _@param_ `tag` — Logging tag to change verbosity level.
    # 
    # _@param_ `new_verbosity_level` — New verbosity level; 1-1024.
    def set_log_tag_verbosity_level: (tag: TD::Types::String, new_verbosity_level: Integer) -> TD::Types::Ok

    # Sets the verbosity level of the internal logging of TDLib.
    # Can be called synchronously.
    # 
    # _@param_ `new_verbosity_level` — New value of the verbosity level for logging. Value 0 corresponds to fatal errors, value 1 corresponds to errors, value 2 corresponds to warnings and debug warnings, value 3 corresponds to informational, value 4 corresponds to debug, value 5 corresponds to verbose debug, value greater than 5 and up to 1023 can be used to enable even more logging.
    def set_log_verbosity_level: (new_verbosity_level: Integer) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Changes chosen reaction for a message.
    # 
    # _@param_ `chat_id` — Identifier of the chat to which the message belongs.
    # 
    # _@param_ `message_id` — Identifier of the message.
    # 
    # _@param_ `reaction` — Text representation of the new chosen reaction. Can be an empty string or the currently chosen reaction to remove the reaction.
    # 
    # _@param_ `is_big` — True, if the reaction is added with a big animation.
    def set_message_reaction: (
                                chat_id: Integer,
                                message_id: Integer,
                                reaction: TD::Types::String,
                                is_big: bool
                              ) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Changes the first and last name of the current user.
    # 
    # _@param_ `first_name` — The new value of the first name for the current user; 1-64 characters.
    # 
    # _@param_ `last_name` — The new value of the optional last name for the current user; 0-64 characters.
    def set_name: (first_name: TD::Types::String, last_name: TD::Types::String) -> TD::Types::Ok

    # Sets the current network type.
    # Can be called before authorization.
    # Calling this method forces all network connections to reopen, mitigating the delay in switching between different
    #   networks, so it must be called whenever the network is changed, even if the network type remains the same.
    # Network type is used to check whether the library can use the network at all and also for collecting detailed
    #   network data usage statistics.
    # 
    # _@param_ `type` — The new network type; pass null to set network type to networkTypeOther.
    def set_network_type: (_type: TD::Types::NetworkType) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Sets the value of an option.
    # (Check the list of available options on https://core.telegram.org/tdlib/options.) Only writable options can be set.
    # Can be called before authorization.
    # 
    # _@param_ `name` — The name of the option.
    # 
    # _@param_ `value` — The new value of the option; pass null to reset option value to a default value.
    def set_option: (name: TD::Types::String, value: TD::Types::OptionValue) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Adds an element to the user's Telegram Passport.
    # May return an error with a message "PHONE_VERIFICATION_NEEDED" or "EMAIL_VERIFICATION_NEEDED" if the chosen phone
    #   number or the chosen email address must be verified first.
    # 
    # _@param_ `element` — Input Telegram Passport element.
    # 
    # _@param_ `password` — Password of the current user.
    def set_passport_element: (element: TD::Types::InputPassportElement, password: TD::Types::String) -> TD::Types::PassportElement

    # Informs the user that some of the elements in their Telegram Passport contain errors; for bots only.
    # The user will not be able to resend the elements, until the errors are fixed.
    # 
    # _@param_ `user_id` — User identifier.
    # 
    # _@param_ `errors` — The errors.
    def set_passport_element_errors: (user_id: Integer, errors: ::Array[TD::Types::InputPassportElementError]) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Changes the password for the current user.
    # If a new recovery email address is specified, then the change will not be applied until the new recovery email
    #   address is confirmed.
    # 
    # _@param_ `old_password` — Previous password of the user.
    # 
    # _@param_ `new_password` — New password of the user; may be empty to remove the password.
    # 
    # _@param_ `new_hint` — New password hint; may be empty.
    # 
    # _@param_ `set_recovery_email_address` — Pass true if the recovery email address must be changed.
    # 
    # _@param_ `new_recovery_email_address` — New recovery email address; may be empty.
    def set_password: (
                        old_password: TD::Types::String,
                        ?new_password: TD::Types::String?,
                        ?new_hint: TD::Types::String?,
                        ?set_recovery_email_address: bool,
                        ?new_recovery_email_address: TD::Types::String?
                      ) -> TD::Types::PasswordState

    # Changes the order of pinned chats.
    # 
    # _@param_ `chat_list` — Chat list in which to change the order of pinned chats.
    # 
    # _@param_ `chat_ids` — The new list of pinned chats.
    def set_pinned_chats: (chat_list: TD::Types::ChatList, chat_ids: ::Array[Integer]) -> TD::Types::Ok

    # Changes the user answer to a poll.
    # A poll in quiz mode can be answered only once.
    # 
    # _@param_ `chat_id` — Identifier of the chat to which the poll belongs.
    # 
    # _@param_ `message_id` — Identifier of the message containing the poll.
    # 
    # _@param_ `option_ids` — 0-based identifiers of answer options, chosen by the user. User can choose more than 1 answer option only is the poll allows multiple answers.
    def set_poll_answer: (chat_id: Integer, message_id: Integer, option_ids: ::Array[Integer]) -> TD::Types::Ok

    # Changes a profile photo for the current user.
    # 
    # _@param_ `photo` — Profile photo to set.
    def set_profile_photo: (photo: TD::Types::InputChatPhoto) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Changes the 2-step verification recovery email address of the user.
    # If a new recovery email address is specified, then the change will not be applied until the new recovery email
    #   address is confirmed.
    # If new_recovery_email_address is the same as the email address that is currently set up, this call succeeds
    #   immediately and aborts all other requests waiting for an email confirmation.
    # 
    # _@param_ `password` — Password of the current user.
    # 
    # _@param_ `new_recovery_email_address` — New recovery email address.
    def set_recovery_email_address: (password: TD::Types::String, new_recovery_email_address: TD::Types::String) -> TD::Types::PasswordState

    # Changes notification settings for chats of a given type.
    # 
    # _@param_ `scope` — Types of chats for which to change the notification settings.
    # 
    # _@param_ `notification_settings` — The new notification settings for the given scope.
    def set_scope_notification_settings: (scope: TD::Types::NotificationSettingsScope, notification_settings: TD::Types::ScopeNotificationSettings) -> TD::Types::Ok

    # Changes the position of a sticker in the set to which it belongs; for bots only.
    # The sticker set must have been created by the bot.
    # 
    # _@param_ `sticker` — Sticker.
    # 
    # _@param_ `position` — New position of the sticker in the set, zero-based.
    def set_sticker_position_in_set: (sticker: TD::Types::InputFile, position: Integer) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Sets a sticker set thumbnail; for bots only.
    # Returns the sticker set.
    # 
    # _@param_ `user_id` — Sticker set owner.
    # 
    # _@param_ `name` — Sticker set name.
    # 
    # _@param_ `thumbnail` — Thumbnail to set in PNG, TGS, or WEBM format; pass null to remove the sticker set thumbnail. Thumbnail format must match the format of stickers in the set.
    def set_sticker_set_thumbnail: (user_id: Integer, name: TD::Types::String, thumbnail: TD::Types::InputFile) -> TD::Types::StickerSet

    # Changes the sticker set of a supergroup; requires can_change_info administrator right.
    # 
    # _@param_ `supergroup_id` — Identifier of the supergroup.
    # 
    # _@param_ `sticker_set_id` — New value of the supergroup sticker set identifier. Use 0 to remove the supergroup sticker set.
    def set_supergroup_sticker_set: (supergroup_id: Integer, sticker_set_id: Integer) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Changes the username of a supergroup or channel, requires owner privileges in the supergroup or channel.
    # 
    # _@param_ `supergroup_id` — Identifier of the supergroup or channel.
    # 
    # _@param_ `username` — New value of the username. Use an empty string to remove the username.
    def set_supergroup_username: (supergroup_id: Integer, username: TD::Types::String) -> TD::Types::Ok

    # Sets the parameters for TDLib initialization.
    # Works only when the current authorization state is authorizationStateWaitTdlibParameters.
    # 
    # _@param_ `parameters` — Parameters for TDLib initialization.
    def set_tdlib_parameters: (parameters: TD::Types::TdlibParameters) -> TD::Types::Ok

    # Changes user privacy settings.
    # 
    # _@param_ `setting` — The privacy setting.
    # 
    # _@param_ `rules` — The new privacy rules.
    def set_user_privacy_setting_rules: (setting: TD::Types::UserPrivacySetting, rules: TD::Types::UserPrivacySettingRules) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Changes the username of the current user.
    # 
    # _@param_ `username` — The new value of the username. Use an empty string to remove the username.
    def set_username: (username: TD::Types::String) -> TD::Types::Ok

    # Changes default participant identifier, on whose behalf a video chat in the chat will be joined.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `default_participant_id` — Default group call participant identifier to join the video chats.
    def set_video_chat_default_participant: (chat_id: Integer, default_participant_id: TD::Types::MessageSender) -> TD::Types::Ok

    # Shares the phone number of the current user with a mutual contact.
    # Supposed to be called when the user clicks on chatActionBarSharePhoneNumber.
    # 
    # _@param_ `user_id` — Identifier of the user with whom to share the phone number. The user must be a mutual contact.
    def share_phone_number: (user_id: Integer) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Starts recording of an active group call.
    # Requires groupCall.can_be_managed group call flag.
    # 
    # _@param_ `group_call_id` — Group call identifier.
    # 
    # _@param_ `title` — Group call recording title; 0-64 characters.
    # 
    # _@param_ `record_video` — Pass true to record a video file instead of an audio file.
    # 
    # _@param_ `use_portrait_orientation` — Pass true to use portrait orientation for video instead of landscape one.
    def start_group_call_recording: (
                                      group_call_id: Integer,
                                      title: TD::Types::String,
                                      record_video: bool,
                                      use_portrait_orientation: bool
                                    ) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Starts screen sharing in a joined group call.
    # Returns join response payload for tgcalls.
    # 
    # _@param_ `group_call_id` — Group call identifier.
    # 
    # _@param_ `audio_source_id` — Screen sharing audio channel synchronization source identifier; received from tgcalls.
    # 
    # _@param_ `payload` — Group call join payload; received from tgcalls.
    def start_group_call_screen_sharing: (group_call_id: Integer, audio_source_id: Integer, payload: TD::Types::String) -> TD::Types::Text

    # Starts a scheduled group call.
    # 
    # _@param_ `group_call_id` — Group call identifier.
    def start_scheduled_group_call: (group_call_id: Integer) -> TD::Types::Ok

    # Stops a poll.
    # A poll in a message can be stopped when the message has can_be_edited flag set.
    # 
    # _@param_ `chat_id` — Identifier of the chat to which the poll belongs.
    # 
    # _@param_ `message_id` — Identifier of the message containing the poll.
    # 
    # _@param_ `reply_markup` — The new message reply markup; pass null if none; for bots only.
    def stop_poll: (chat_id: Integer, message_id: Integer, reply_markup: TD::Types::ReplyMarkup) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Fetches the latest versions of all strings from a language pack in the current localization target from the server.
    # This method doesn't need to be called explicitly for the current used/base language packs.
    # Can be called before authorization.
    # 
    # _@param_ `language_pack_id` — Language pack identifier.
    def synchronize_language_pack: (language_pack_id: TD::Types::String) -> TD::Types::Ok

    # Terminates all other sessions of the current user.
    def terminate_all_other_sessions: () -> TD::Types::Ok

    # Terminates a session of the current user.
    # 
    # _@param_ `session_id` — Session identifier.
    def terminate_session: (session_id: Integer) -> TD::Types::Ok

    # Changes the value of the default disable_notification parameter, used when a message is sent to a chat.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `default_disable_notification` — New value of default_disable_notification.
    def toggle_chat_default_disable_notification: (chat_id: Integer, default_disable_notification: bool) -> TD::Types::Ok

    # Changes the ability of users to save, forward, or copy chat content.
    # Supported only for basic groups, supergroups and channels.
    # Requires owner privileges.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `has_protected_content` — True, if chat content can't be saved locally, forwarded, or copied.
    def toggle_chat_has_protected_content: (chat_id: Integer, has_protected_content: bool) -> TD::Types::Ok

    # Changes the marked as unread state of a chat.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `is_marked_as_unread` — New value of is_marked_as_unread.
    def toggle_chat_is_marked_as_unread: (chat_id: Integer, is_marked_as_unread: bool) -> TD::Types::Ok

    # Changes the pinned state of a chat.
    # There can be up to GetOption("pinned_chat_count_max")/GetOption("pinned_archived_chat_count_max") pinned non-secret
    #   chats and the same number of secret chats in the main/archive chat list.
    # 
    # _@param_ `chat_list` — Chat list in which to change the pinned state of the chat.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `is_pinned` — True, if the chat is pinned.
    def toggle_chat_is_pinned: (chat_list: TD::Types::ChatList, chat_id: Integer, is_pinned: bool) -> TD::Types::Ok

    # Toggles whether the current user will receive a notification when the group call will start; scheduled group calls
    #   only.
    # 
    # _@param_ `group_call_id` — Group call identifier.
    # 
    # _@param_ `enabled_start_notification` — New value of the enabled_start_notification setting.
    def toggle_group_call_enabled_start_notification: (group_call_id: Integer, enabled_start_notification: bool) -> TD::Types::Ok

    # Toggles whether current user's video is enabled.
    # 
    # _@param_ `group_call_id` — Group call identifier.
    # 
    # _@param_ `is_my_video_enabled` — Pass true if the current user's video is enabled.
    def toggle_group_call_is_my_video_enabled: (group_call_id: Integer, is_my_video_enabled: bool) -> TD::Types::Ok

    # Toggles whether current user's video is paused.
    # 
    # _@param_ `group_call_id` — Group call identifier.
    # 
    # _@param_ `is_my_video_paused` — Pass true if the current user's video is paused.
    def toggle_group_call_is_my_video_paused: (group_call_id: Integer, is_my_video_paused: bool) -> TD::Types::Ok

    # Toggles whether new participants of a group call can be unmuted only by administrators of the group call.
    # Requires groupCall.can_toggle_mute_new_participants group call flag.
    # 
    # _@param_ `group_call_id` — Group call identifier.
    # 
    # _@param_ `mute_new_participants` — New value of the mute_new_participants setting.
    def toggle_group_call_mute_new_participants: (group_call_id: Integer, mute_new_participants: bool) -> TD::Types::Ok

    # Toggles whether a group call participant hand is rased.
    # 
    # _@param_ `group_call_id` — Group call identifier.
    # 
    # _@param_ `participant_id` — Participant identifier.
    # 
    # _@param_ `is_hand_raised` — Pass true if the user's hand needs to be raised. Only self hand can be raised. Requires groupCall.can_be_managed group call flag to lower other's hand.
    def toggle_group_call_participant_is_hand_raised: (group_call_id: Integer, participant_id: TD::Types::MessageSender, is_hand_raised: bool) -> TD::Types::Ok

    # Toggles whether a participant of an active group call is muted, unmuted, or allowed to unmute themselves.
    # 
    # _@param_ `group_call_id` — Group call identifier.
    # 
    # _@param_ `participant_id` — Participant identifier.
    # 
    # _@param_ `is_muted` — Pass true if the user must be muted and false otherwise.
    def toggle_group_call_participant_is_muted: (group_call_id: Integer, participant_id: TD::Types::MessageSender, is_muted: bool) -> TD::Types::Ok

    # Pauses or unpauses screen sharing in a joined group call.
    # 
    # _@param_ `group_call_id` — Group call identifier.
    # 
    # _@param_ `is_paused` — True if screen sharing is paused.
    def toggle_group_call_screen_sharing_is_paused: (group_call_id: Integer, is_paused: bool) -> TD::Types::Ok

    # Changes the block state of a message sender.
    # Currently, only users and supergroup chats can be blocked.
    # 
    # _@param_ `sender_id` — Identifier of a message sender to block/unblock.
    # 
    # _@param_ `is_blocked` — New value of is_blocked.
    def toggle_message_sender_is_blocked: (sender_id: TD::Types::MessageSender, is_blocked: bool) -> TD::Types::Ok

    # Toggles whether a session can accept incoming calls.
    # 
    # _@param_ `session_id` — Session identifier.
    # 
    # _@param_ `can_accept_calls` — True, if incoming calls can be accepted by the session.
    def toggle_session_can_accept_calls: (session_id: Integer, can_accept_calls: bool) -> TD::Types::Ok

    # Toggles whether a session can accept incoming secret chats.
    # 
    # _@param_ `session_id` — Session identifier.
    # 
    # _@param_ `can_accept_secret_chats` — True, if incoming secret chats can be accepted by the session.
    def toggle_session_can_accept_secret_chats: (session_id: Integer, can_accept_secret_chats: bool) -> TD::Types::Ok

    # Toggles whether the message history of a supergroup is available to new members; requires can_change_info
    #   administrator right.
    # 
    # _@param_ `supergroup_id` — The identifier of the supergroup.
    # 
    # _@param_ `is_all_history_available` — The new value of is_all_history_available.
    def toggle_supergroup_is_all_history_available: (supergroup_id: Integer, is_all_history_available: bool) -> TD::Types::Ok

    # Upgrades supergroup to a broadcast group; requires owner privileges in the supergroup.
    # 
    # _@param_ `supergroup_id` — Identifier of the supergroup.
    def toggle_supergroup_is_broadcast_group: (supergroup_id: Integer) -> TD::Types::Ok

    # Toggles whether sender signature is added to sent messages in a channel; requires can_change_info administrator
    #   right.
    # 
    # _@param_ `supergroup_id` — Identifier of the channel.
    # 
    # _@param_ `sign_messages` — New value of sign_messages.
    def toggle_supergroup_sign_messages: (supergroup_id: Integer, sign_messages: bool) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Changes the owner of a chat.
    # The current user must be a current owner of the chat.
    # Use the method canTransferOwnership to check whether the ownership can be transferred from the current session.
    # Available only for supergroups and channel chats.
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `user_id` — Identifier of the user to which transfer the ownership. The ownership can't be transferred to a bot or to a deleted user.
    # 
    # _@param_ `password` — The password of the current user.
    def transfer_chat_ownership: (chat_id: Integer, user_id: Integer, password: TD::Types::String) -> TD::Types::Ok

    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # sord warn - TD::Types::String wasn't able to be resolved to a constant in this project
    # Translates a text to the given language.
    # Returns a 404 error if the translation can't be performed.
    # 
    # _@param_ `text` — Text to translate.
    # 
    # _@param_ `from_language_code` — A two-letter ISO 639-1 language code of the language from which the message is translated. If empty, the language will be detected automatically.
    # 
    # _@param_ `to_language_code` — A two-letter ISO 639-1 language code of the language to which the message is translated.
    def translate_text: (text: TD::Types::String, from_language_code: TD::Types::String, to_language_code: TD::Types::String) -> TD::Types::Text

    # Removes all pinned messages from a chat; requires can_pin_messages rights in the group or can_edit_messages rights
    #   in the channel.
    # 
    # _@param_ `chat_id` — Identifier of the chat.
    def unpin_all_chat_messages: (chat_id: Integer) -> TD::Types::Ok

    # Removes a pinned message from a chat; requires can_pin_messages rights in the group or can_edit_messages rights in
    #   the channel.
    # 
    # _@param_ `chat_id` — Identifier of the chat.
    # 
    # _@param_ `message_id` — Identifier of the removed pinned message.
    def unpin_chat_message: (chat_id: Integer, message_id: Integer) -> TD::Types::Ok

    # Creates a new supergroup from an existing basic group and sends a corresponding messageChatUpgradeTo and
    #   messageChatUpgradeFrom; requires creator privileges.
    # Deactivates the original basic group.
    # 
    # _@param_ `chat_id` — Identifier of the chat to upgrade.
    def upgrade_basic_group_chat_to_supergroup_chat: (chat_id: Integer) -> TD::Types::Chat

    # Asynchronously uploads a file to the cloud without sending it in a message.
    # updateFile will be used to notify about upload progress and successful completion of the upload.
    # The file will not have a persistent remote identifier until it will be sent in a message.
    # 
    # _@param_ `file` — File to upload.
    # 
    # _@param_ `file_type` — File type; pass null if unknown.
    # 
    # _@param_ `priority` — Priority of the upload (1-32). The higher the priority, the earlier the file will be uploaded. If the priorities of two files are equal, then the first one for which uploadFile was called will be uploaded first.
    def upload_file: (file: TD::Types::InputFile, file_type: TD::Types::FileType, priority: Integer) -> TD::Types::File

    # Uploads a file with a sticker; returns the uploaded file.
    # 
    # _@param_ `user_id` — Sticker file owner; ignored for regular users.
    # 
    # _@param_ `sticker` — Sticker file to upload.
    def upload_sticker_file: (user_id: Integer, sticker: TD::Types::InputSticker) -> TD::Types::File

    # Validates the order information provided by a user and returns the available shipping options for a flexible
    #   invoice.
    # 
    # _@param_ `chat_id` — Chat identifier of the Invoice message.
    # 
    # _@param_ `message_id` — Message identifier.
    # 
    # _@param_ `order_info` — The order information, provided by the user; pass null if empty.
    # 
    # _@param_ `allow_save` — True, if the order information can be saved.
    def validate_order_info: (
                               chat_id: Integer,
                               message_id: Integer,
                               ?order_info: TD::Types::OrderInfo?,
                               allow_save: bool
                             ) -> TD::Types::ValidatedOrderInfo

    # Informs TDLib that messages are being viewed by the user.
    # Sponsored messages must be marked as viewed only when the entire text of the message is shown on the screen
    #   (excluding the button).
    # Many useful activities depend on whether the messages are currently being viewed or not (e.g., marking messages as
    #   read, incrementing a view counter, updating a view counter, removing deleted messages in supergroups and channels).
    # 
    # _@param_ `chat_id` — Chat identifier.
    # 
    # _@param_ `message_thread_id` — If not 0, a message thread identifier in which the messages are being viewed.
    # 
    # _@param_ `message_ids` — The identifiers of the messages being viewed.
    # 
    # _@param_ `force_read` — True, if messages in closed chats must be marked as read by the request.
    def view_messages: (
                         chat_id: Integer,
                         message_thread_id: Integer,
                         message_ids: ::Array[Integer],
                         force_read: bool
                       ) -> TD::Types::Ok

    # Informs the server that some trending sticker sets have been viewed by the user.
    # 
    # _@param_ `sticker_set_ids` — Identifiers of viewed trending sticker sets.
    def view_trending_sticker_sets: (sticker_set_ids: ::Array[Integer]) -> TD::Types::Ok

    # Writes a part of a generated file.
    # This method is intended to be used only if the application has no direct access to TDLib's file system, because it
    #   is usually slower than a direct write to the destination file.
    # 
    # _@param_ `generation_id` — The identifier of the generation process.
    # 
    # _@param_ `offset` — The offset from which to write the data to the file.
    # 
    # _@param_ `data` — The data to write.
    def write_generated_file_part: (generation_id: Integer, offset: Integer, data: String) -> TD::Types::Ok
  end
end